bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineCfgNode,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineCfgNode,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineCfgNode,  this);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  def);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  candidate);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  candidate);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  def);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  numUseWithinUseCfgNode);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  null);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  reachingUses,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  reachingUses,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  numUseWithinUseCfgNode);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  def);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  false);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  false);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  this);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
19	[BUG]  [BUGGY]  Throwable  t  =  t.getCurrentName();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.getCurrentName();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getCurrentName();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
20	[BUG]  [BUGGY]  Throwable  t  =  t.getScope().getCurrentToken();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.getScope().getCurrentToken();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getScope().getCurrentToken();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
21	[BUG]  [BUGGY]  Throwable  t  =  t.nextToken();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.nextToken();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.nextToken();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
22	[BUG]  [BUGGY]  Throwable  t  =  t.getCurrentToken().toString();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.getCurrentToken().toString();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getCurrentToken().toString();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
23	[BUG]  [BUGGY]  Throwable  t  =  t.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.getCurrentScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getCurrentScope();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
24	[BUG]  [BUGGY]  Throwable  t  =  t.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.getCurrentNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getCurrentNode();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  def);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action(),  def);	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Action());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  Action());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  Action());	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  ActionParser());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  ActionParser());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  ActionParser());	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action(),  inlineCfgNode);	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
31	[BUG]  [BUGGY]  Predicate  c  =  t.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getCurrentScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getCurrentScope();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  Predicate  c  =  t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.inGlobalScope();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  Predicate  c  =  t.getConstructor();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getConstructor();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getConstructor();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getParent();  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getParent();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getParent();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentScope();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  &&!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  &&!t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  &&!t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope()    ||!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
37	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope()    ||!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
38	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope()));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope()));	  Throwables.checkState(t.inGlobalScope()    ||!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
39	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope(),  cfa);	  Throwables.checkState(t.inGlobalScope()    ||!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  def);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  false);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  false);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  this);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineNewDependencies,  this);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  null);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  null);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  true);  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  true);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
47	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
48	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  def));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  def));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  def));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
49	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  inlinedNewDependencies));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  inlinedNewDependencies));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  inlinedNewDependencies));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
50	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
51	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  MISSING_VARIABLES));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  MISSING_VARIABLES));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  MISSING_VARIABLES));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
52	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
53	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  null));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  null));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  null));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidate,  this);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  this,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidates,  this,  candidate);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  this,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidate,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  this,  t);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  this,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidate,  this,  t);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidate,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineNewDependencies,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  false);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  false);	  NodeTraversal.traverse(compiler,    cfa,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfa,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  def);	  NodeTraversal.traverse(compiler,    cfa,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  true);	  NodeTraversal.traverse(compiler,    cfa,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
66	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  SIDE_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
67	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getModule());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getModule());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getModule());	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
68	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
69	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  1);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
70	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_ERROR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_ERROR);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_ERROR);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
71	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg.getModule());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg.getModule());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg.getModule());	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
72	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_EXPECTED);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_EXPECTED);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_EXPECTED);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
73	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfa,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa,  numUseWithinUseCfgNode);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
74	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfa,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa,  numUseWithinCfgNode);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
75	[BUG]  [BUGGY]  inlineGlobalScope(cfa,  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(cfa,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(cfa,  t);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
76	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfg);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
77	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfa,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa,  def);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
78	[BUG]  [BUGGY]  enterScope(t,  cfa);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  enterScope(t,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	enterScope(t,  cfa);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
79	[BUG]  [BUGGY]  cfa.inlineGlobalScope(t);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.inlineGlobalScope(t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.inlineGlobalScope(t);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
80	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  varName.equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " "  +  varName.equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " "  +  varName.equals(t.getScope()));	  throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(t.getScope()));	  throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  scope: "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( "Unexpected  scope: "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( "Unexpected  scope: "  +  t.getScope());	  throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
83	[BUG]  [BUGGY]  t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
84	[BUG]  [BUGGY]  t.report(JSError.make(t,  c,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  c,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  c,  MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
85	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
86	[BUG]  [BUGGY]  t.report(JSError.make(t,  MISSING_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  MISSING_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  MISSING_EFFECT_PREDICATE,  numUseWithinUseCfgNode));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
87	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
88	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getMessage());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
89	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  varName,  t.getMessage());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  varName,  t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  varName,  t.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
90	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfa);	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
91	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getSourceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getSourceName());	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
92	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n.getMessage());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile(),  this);	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getSourceFile());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getSourceFile());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  t.getSourceFile());	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile(),  cfa);	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  c);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile(),  c);	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourcePath());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourcePath());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourcePath());	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  def);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile(),  def);	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  false);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile(),  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile(),  false);	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  1);	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
101	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  2);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  2);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  2);	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
102	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  *  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  *  2);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  *  2);	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
103	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  >  0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  >  0);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  >  0);	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
104	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  -  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  -  1);	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
105	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  3);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  3);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getVarCount()  +  3);	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
106	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  t.getScope());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ",  t.getScope());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
107	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getSourceName()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getSourceName()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(t.getSourceName()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
108	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getName()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getName()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(t.getName()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
109	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlinedNewDependencies,  t.inGlobalScope());	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlinedNewDependencies,  t.getScope());	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  c);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlinedNewDependencies,  c);	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this.inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this.inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  def);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  def);	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
116	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode  +  1);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
117	[BUG]  [BUGGY]  Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
118	[BUG]  [BUGGY]  Throwables.checkState(cfa.inGlobalScope(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(cfa.inGlobalScope(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(cfa.inGlobalScope(),  numUseWithinCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
119	[BUG]  [BUGGY]  Throwables.checkState(numUseWithinCfgNode,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(numUseWithinCfgNode,  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(numUseWithinCfgNode,  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
120	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope(),  numUseWithinCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
121	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode  *  2);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode  *  2);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinCfgNode  *  2);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
122	[BUG]  [BUGGY]  Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t.getScope());	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
123	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfa,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(cfa,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(cfa,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
124	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(cfg,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
125	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(cfa);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
126	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(cfg);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
127	[BUG]  [BUGGY]  NodeUtil.copyCurrentScopeAnalysis(cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScopeAnalysis(cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScopeAnalysis(cfa);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
128	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(cfa,  t));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(cfa,  t));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(cfa,  t));	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
129	[BUG]  [BUGGY]  NodeUtil.copyCurrentScopeAnalysis(cfa,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScopeAnalysis(cfa,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScopeAnalysis(cfa,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfg,    this);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this,  candidates);	  NodeTraversal.traverse(compiler,    cfg,    this);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this,  candidate);	  NodeTraversal.traverse(compiler,    cfg,    this);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this,  def);	  NodeTraversal.traverse(compiler,    cfg,    this);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
134	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  &&  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  &&  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  &&  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
135	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()  ||  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()  ||  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()  ||  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
136	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()  +  1);	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
137	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope()));	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
138	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalScope();	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
139	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getVarCount()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
140	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
141	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  t.getScope().getVarCount());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
142	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
143	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  def);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
144	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  numUseWithinUseCfgNode);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
145	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  cfgNode);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
146	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  c);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
147	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName  +  1);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
148	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  true);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineNewDependencies,  t.inGlobalScope());	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  false);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineNewDependencies,  c);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineNewDependencies,  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineNewDependencies,  t.getScope());	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this.inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this.inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this.inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  def);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  null);	  NodeTraversal.traverse(compiler,    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  path,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  path,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  path,  null);	  NodeTraversal.traverse(compiler,    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  null);	  NodeTraversal.traverse(compiler,    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  CandidateTraversal());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  CandidateTraversal());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  CandidateTraversal());	  NodeTraversal.traverse(compiler,    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  def);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  n);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  n);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  this,  t);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  n);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  n);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  t.getScope());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ",  t.getScope());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
167	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
168	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getName()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getName()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(t.getName()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
169	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getSourceName()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(t.getSourceName()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(t.getSourceName()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
170	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ",  t.inGlobalScope());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  c);	  NodeTraversal.traverse(compiler,    t,    def);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  t);	  NodeTraversal.traverse(compiler,    t,    def);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  n);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  n);	  NodeTraversal.traverse(compiler,    t,    def);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  numUseWithinUseCfgNode);	  NodeTraversal.traverse(compiler,    t,    def);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  t.inGlobalScope());	  NodeTraversal.traverse(compiler,    t,    def);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
176	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  e.getMessage());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  e.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  e.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
177	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
178	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  SIDE_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
179	[BUG]  [BUGGY]  throw  new  AssertionFailedError(e.getMessage(),  t.getMessage());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(e.getMessage(),  t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(e.getMessage(),  t.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
180	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  MISSING_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  MISSING_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  MISSING_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
181	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfa);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
182	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfg);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfg);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
183	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  3),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  3),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  3),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
184	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  2),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  2),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  2),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
185	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  1),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  1),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  1),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
186	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  0),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  0),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  0),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
187	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  0,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  0,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  0,  numUseWithinCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
188	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  2,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  2,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  2,  numUseWithinCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
189	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  1),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  1),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  1),  numUseWithinCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    t);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  t);	  NodeTraversal.traverse(compiler,    cfa,    t);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  t);	  NodeTraversal.traverse(compiler,    cfa,    t);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  cfg);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  cfg);	  NodeTraversal.traverse(compiler,    cfa,    t);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
194	[BUG]  [BUGGY]  t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
195	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  PredicATE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  PredicATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  PredicATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
196	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.SIDE_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
197	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
198	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  reachingUses));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  reachingUses));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  reachingUses));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
199	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  def));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  def));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  def));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
200	[BUG]  [BUGGY]  t.report(JSError.make(t,  c,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  c,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  c,  SIDE_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
201	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
202	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
203	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
204	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
205	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionAnalysis(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionAnalysis(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionAnalysis(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
206	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  -  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  -  1;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  -  1;	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
207	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  +  1;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  +  1;	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
208	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(numUseWithinUseCfgNode);	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
209	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  -  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  -  2;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  -  2;	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
210	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  *  2;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  *  2;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarCount()  *  2;	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
211	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
212	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(t.getScope());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
213	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  t.getScope());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlinedNewDependencies,  this);	  NodeTraversal.traverse(compiler,    t,    this,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  spreadingCandiates);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  spreadingCandiates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  spreadingCandiates);	  NodeTraversal.traverse(compiler,    t,    this,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
217	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  c);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  c);	  Throwables.throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
218	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  cfa);	  Throwables.throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
219	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  cfg);	  Throwables.throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
220	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getSourceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getSourceName());	  Throwables.throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
221	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getVersion());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getVersion());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  t.getVersion());	  Throwables.throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
222	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedException(t.getMessage());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedException(t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedException(t.getMessage());	  Throwables.throw    new    AssertionFailedError(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
223	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  t.getModule());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  t.getModule());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  t.getModule());	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
224	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  t.getMessage());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  t.getMessage());	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
225	[BUG]  [BUGGY]  Throwables.throwAssertionFailedException(t.getMessage());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throwAssertionFailedException(t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throwAssertionFailedException(t.getMessage());	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
226	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  c);	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c);  return;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c);  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c);  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  return;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa);  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa);  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope());  return;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope());  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getScope());  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode());  return;  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode());  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode());  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile());  return;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceFile());  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceFile());  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  return;  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this);  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
233	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
234	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
235	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  this);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
236	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  null);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
237	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  def);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
238	[BUG]  [BUGGY]  AssertionFailedError  cfg  =  t.getMessage();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  cfg  =  t.getMessage();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  cfg  =  t.getMessage();	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  candidates);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  candidate);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  def);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inline);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  inline);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  inline);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
245	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  cfa);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  cfa);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
246	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
247	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
248	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  varName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  varName);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
249	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  c);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
250	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  n);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
251	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  c);	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
252	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  numUseWithinCfgNode);	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
253	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  numUseWithinUseCfgNode);	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
254	[BUG]  [BUGGY]  cfa.initScope(t.getScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.initScope(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.initScope(t.getScope());	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
255	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  n);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  n);	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
256	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  true);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  true);	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
257	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
258	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  this);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
259	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n,  c);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
260	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  varName,  c);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  varName,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  varName,  c);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
261	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  null);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
262	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_ERROR);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_ERROR);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_ERROR);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  t.getScope());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  this);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  def);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructor());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getConstructor());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  candidates);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getScope(),  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getScope(),  candidates);	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentScope());  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentScope());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
270	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( " "));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( " "));	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
271	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  global  scope: ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  global  scope: ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Can  not  enter  global  scope: ");	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
272	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  SIDE_EFFECT_PREDICATE. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  SIDE_EFFECT_PREDICATE. ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Can  not  enter  SIDE_EFFECT_PREDICATE. ");	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
273	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  SIDE_EFFECT_PREDICATE: ");  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  SIDE_EFFECT_PREDICATE: ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Can  not  enter  SIDE_EFFECT_PREDICATE: ");	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
274	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Failed  to  enter  scope: ");  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Failed  to  enter  scope: ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Failed  to  enter  scope: ");	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
275	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode  +  1);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
276	[BUG]  [BUGGY]  Throwables.checkState(numUseWithinUseCfgNode,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(numUseWithinUseCfgNode,  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(numUseWithinUseCfgNode,  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
277	[BUG]  [BUGGY]  Throwables.checkState(numUseWithinUseCfgNode.inGlobalScope(),  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(numUseWithinUseCfgNode.inGlobalScope(),  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(numUseWithinUseCfgNode.inGlobalScope(),  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
278	[BUG]  [BUGGY]  Throwables.checkState(cfa.inGlobalScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(cfa.inGlobalScope(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(cfa.inGlobalScope(),  numUseWithinUseCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
279	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope(),  numUseWithinUseCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
280	[BUG]  [BUGGY]  Throwables.checkState(n.inGlobalScope(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(n.inGlobalScope(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(n.inGlobalScope(),  numUseWithinUseCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
281	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode  *  2);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode  *  2);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode  *  2);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
282	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    numUseWithinCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
283	[BUG]  [BUGGY]  t.report(JSError.make(t,  MISSING_EFFECT_PREDICATE,  numUseWithinCfgNode));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  MISSING_EFFECT_PREDICATE,  numUseWithinCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  MISSING_EFFECT_PREDICATE,  numUseWithinCfgNode));	  t.report(JSError.make(t,    numUseWithinCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
284	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  numUseWithinUseCfgNode));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
285	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  def));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  def));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  def));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
286	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
287	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  sourceName));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  sourceName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  sourceName));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
288	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  null));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  null));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  null));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
289	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  name));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  name));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  name));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
290	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  numUseWithinCfgNode));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
291	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getName()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getName()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getName()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
292	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getName()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getName()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getName()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
293	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getName());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").equals(t.getScope().getName());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
294	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "+t.getScope().getName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "+t.getScope().getName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "+t.getScope().getName());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this,  candidates);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this,  candidate);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  this,  def);	  NodeTraversal.traverse(compiler,    c,    this);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
298	[BUG]  [BUGGY]  cfa.enterGlobalScope(t,  c);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(t,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t,  c);	  cfa.enterGlobalScope(t);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
299	[BUG]  [BUGGY]  cfa.enterGlobalScope(t,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(t,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t,  numUseWithinUseCfgNode);	  cfa.enterGlobalScope(t);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
300	[BUG]  [BUGGY]  cfa.enterGlobalScope(t,  def);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(t,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t,  def);	  cfa.enterGlobalScope(t);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
301	[BUG]  [BUGGY]  cfa.enterGlobalScope(t,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(t,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t,  numUseWithinCfgNode);	  cfa.enterGlobalScope(t);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  true);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  true);	  NodeTraversal.traverse(compiler,    cfa,    spreadingUses);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  t.inGlobalScope());	  NodeTraversal.traverse(compiler,    cfa,    spreadingUses);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  spreadingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  spreadingUses);	  NodeTraversal.traverse(compiler,    cfa,    spreadingUses);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingUses,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingUses,  null);	  NodeTraversal.traverse(compiler,    cfa,    spreadingUses);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
306	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
307	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  MISSING_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  MISSING_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  MISSING_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
308	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
309	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  this);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
310	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  NON_GLOBAL_EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
311	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  null);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
312	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName()  +  1;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarName()  +  1;	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
313	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVar(varName);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVar(varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVar(varName);	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
314	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarName(null);	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
315	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarName(n);	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
316	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarType();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarType();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarType();	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
317	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarName(false);	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  ||!t.inGlobalScope());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isFunctionDeclaration(t.getScope()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.isExpressionNode(t.getScope().getVarCount()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!TestUtil.isFunctionDeclaration(t.getScope()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope();	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
324	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "));	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
325	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ",  t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ",  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ",  t.getScope());	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
326	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ")  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ")  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ")	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
327	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "),  t);	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode(),  this);	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode(),  def);	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode(),  false);	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  c);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode(),  c);	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  true);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCurrentNode(),  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCurrentNode(),  true);	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c.getCurrentNode());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c.getCurrentNode());	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
334	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentNode()  +  1;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentNode()  +  1;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentNode()  +  1;	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
335	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().inGlobalScope();	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
336	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getNextNode();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getNextNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getNextNode();	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
337	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentNode(n);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentNode(n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentNode(n);	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
338	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentNodeIndex();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentNodeIndex();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentNodeIndex();	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
339	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getVarCount();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getVarCount();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getVarCount();	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
340	[BUG]  [BUGGY]  cfa.enterScope(t,  c);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t,  c);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
341	[BUG]  [BUGGY]  cfa.enterScope(t,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t,  numUseWithinUseCfgNode);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
342	[BUG]  [BUGGY]  cfa.enterScope(t,  def);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t,  def);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
343	[BUG]  [BUGGY]  cfa.initScope(t);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.initScope(t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.initScope(t);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
344	[BUG]  [BUGGY]  cfa.enterScope(t,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t,  numUseWithinCfgNode);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
345	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.inGlobalScope());	  Throwables.checkState(t.inGlobalScope()    +    1);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  candidates);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  candidate);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  candidate);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  cfa);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  c);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  c);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  this);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference(),  this);	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getReferenceName());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getReferenceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getReferenceName());	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference(),  def);	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getSourceReference());  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getSourceReference());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  t.getSourceReference());	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
355	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference(),  cfa);	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  false);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceReference(),  false);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceReference(),  false);	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
357	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  &&  t.inGlobalDependencies());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  &&  t.inGlobalDependencies());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  &&  t.inGlobalDependencies());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
358	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies(),  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies(),  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies(),  inlinedNewDependencies);	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
359	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  +  1);	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
360	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalDependencies());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalDependencies());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalDependencies());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
361	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  ||  numUseWithinUseCfgNode());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  ||  numUseWithinUseCfgNode());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  ||  numUseWithinUseCfgNode());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
362	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  c.inGlobalDependencies());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  c.inGlobalDependencies());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  c.inGlobalDependencies());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidate,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  cfa);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidates,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidature,  cfa);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidature,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidature,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Candidate.class,  candidate);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  Candidate.class,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  Candidate.class,  candidate);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  cfg);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidate,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidate,  cfg);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.candidate);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.candidate);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
369	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  escaped.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  escaped.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  to  be  escaped.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
370	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  removed.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  removed.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  to  be  removed.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
371	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  visible.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  visible.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  visible.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
372	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  illegal  start  of  expression.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  illegal  start  of  expression.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  illegal  start  of  expression.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
373	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  available.  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  available.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  available.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
374	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  on  the  same  line.  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  on  the  same  line.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  on  the  same  line.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
375	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  varName.equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  varName.equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "  +  varName.equals(t.getScope()));	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
376	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ").equals(t.getScope()));	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
377	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").equals(t.getScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").equals(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ").equals(t.getScope());	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
378	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  t.getScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "),  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "),  t.getScope());	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
379	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
380	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  PredicATE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  PredicATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  PredicATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
381	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  def));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  def));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  def));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
382	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  predicate));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  predicate));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  predicate));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  cfg);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  cfg);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  def,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  cfgNode);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  def,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  def,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  reachingDef);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
389	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  n);	  throw    new    AssertionFailedError(t.getMessage(),    n);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
390	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  SIDE_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    n);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
391	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  MISSING_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  MISSING_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n,  MISSING_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    n);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
392	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n,  this);	  throw    new    AssertionFailedError(t.getMessage(),    n);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  def,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  def,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  def,  reachingDef);	  NodeTraversal.traverse(compiler,    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
396	[BUG]  [BUGGY]  Context.report(JSError.make(t,  c,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  c,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  c,  SIDE_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
397	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
398	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
399	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
400	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinUseCfgNode));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
401	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode,  numUseWithinUseCfgNode));  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinUseCfgNode,  numUseWithinUseCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinUseCfgNode,  numUseWithinUseCfgNode));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
402	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
403	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
404	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
405	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  scope: "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  scope: "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( "Invalid  scope: "  +  t.getScope().getVarCount());	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
406	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Missing  scope: "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( "Missing  scope: "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( "Missing  scope: "  +  t.getScope().getVarCount());	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
407	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
408	[BUG]  [BUGGY]  inlineGlobalScope(cfa.getScope(),  t);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(cfa.getScope(),  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(cfa.getScope(),  t);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
409	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  numUseWithinCfgNode);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
410	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  numUseWithinUseCfgNode);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
411	[BUG]  [BUGGY]  cfa.inlineGlobalScope(t.getScope(),  cfa);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.inlineGlobalScope(t.getScope(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.inlineGlobalScope(t.getScope(),  cfa);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
412	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  def);  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  def);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
413	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  true);  [CE]  illegal  start  of  expression  [FE]                                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  true);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  true);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
414	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " "  +  varName.equals(t.getScope().getVarCount()));	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
415	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  scope: "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( "Missing  scope: "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( "Missing  scope: "  +  t.getScope().getVarCount());	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
416	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Missing  function: "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( "Missing  function: "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( "Missing  function: "  +  t.getScope().getVarCount());	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
417	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " "  +  t.getScope().getVarCount());	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
418	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
419	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
420	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " ").equals(t.getScope()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  cfa);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlinedNewDependencies,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlinedNewDependencies,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    cfa,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
424	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  cfa);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  cfa);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
425	[BUG]  [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
426	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
427	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  varName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  varName);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
428	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  c);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  c);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
429	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  n);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
430	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  def);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineCfgNode,  cfa);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  inlineCfgNode,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  inlineCfgNode,  cfa);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  def);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  candidate);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  candidate);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  candidates);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
436	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNode()  +  1;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNode()  +  1;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentNode()  +  1;	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
437	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().inGlobalScope();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
438	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getFunctionDeclaration();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getFunctionDeclaration();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getFunctionDeclaration();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
439	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNode(n);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNode(n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentNode(n);	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
440	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNodeIndex();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNodeIndex();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentNodeIndex();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
441	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getVarCount();  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getVarCount();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getVarCount();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  t,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    this,    t);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  t);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c,  t);	  NodeTraversal.traverse(compiler,    this,    t);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  t,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    this,    t);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  def);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  t,  def);	  NodeTraversal.traverse(compiler,    this,    t);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
446	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getCurrentToken();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getCurrentToken();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getCurrentToken();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
447	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getScope().getMessage();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getScope().getMessage();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getScope().getMessage();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
448	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.inGlobalScope();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
449	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getCause();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getCause();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getCause();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
450	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getScope();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getScope();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
451	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getReturnCode();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getReturnCode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getReturnCode();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidates,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidates,  this);	  NodeTraversal.traverse(compiler,    t,    this,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidates,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
454	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidateSet,  this);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidateSet,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidateSet,  this);	  NodeTraversal.traverse(compiler,    t,    this,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
455	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  candidateNodes,  this,  candidates);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  candidateNodes,  this,  candidates);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  candidateNodes,  this,  candidates);	  NodeTraversal.traverse(compiler,    t,    this,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
456	[BUG]  [BUGGY]  cfa.enterGlobalScope(t.getScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t.getScope());	  cfa.enterGlobalScope();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
457	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  varName.equals(t.getScope()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
458	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(t.getScope());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
459	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  t.getScope());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
460	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "+t.getScope().getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "+t.getScope().getName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "+t.getScope().getName());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
461	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  +  1);	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
462	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  -  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  -  1);	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
463	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  c);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  c);	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
464	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getParent());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getParent());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getParent());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
465	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarName());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
466	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  +  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  +  2);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount()  +  2);	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
467	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarType());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarType());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarType());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
468	[BUG]  [BUGGY]  t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  varName));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  varName));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  SIDE_EFFECT_PREDICATE,  varName));	  t.report(JSError.make(t,    varName,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
469	[BUG]  [BUGGY]  t.report(JSError.make(t,  varName,  SIDE_EFFECT_PREDICATE,  reachingUses));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  varName,  SIDE_EFFECT_PREDICATE,  reachingUses));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  varName,  SIDE_EFFECT_PREDICATE,  reachingUses));	  t.report(JSError.make(t,    varName,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
470	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " ",  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  UnsupportedOperationException( " ",  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  UnsupportedOperationException( " ",  t.getScope());	  throw    new    UnsupportedOperationException(   "   "),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
471	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " "  +  varName,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  UnsupportedOperationException( " "  +  varName,  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  UnsupportedOperationException( " "  +  varName,  t.getScope());	  throw    new    UnsupportedOperationException(   "   "),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
472	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getVarCount());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getVarCount());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
473	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getParent());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getParent());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getParent());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
474	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getName());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
475	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  cfa.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  cfa.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  cfa.getScope());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
476	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getParent());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getParent());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getParent());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
477	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  this);	  NodeTraversal.traverse(compiler,    t,    this,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  def,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  def,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  def,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    this,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
480	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  reachingUses);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
481	[BUG]  [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  reachingUses);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
482	[BUG]  [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
483	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode  +  1,  cfa);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
484	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope()  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope()  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope()  +  1);	  Throwables.checkState(t.inGlobalScope()    ||!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
485	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||!t.inGlobalScope();	  Throwables.checkState(t.inGlobalScope()    ||!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
487	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineNewDependencies,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlineNewDependencies,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  spreadingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  spreadingUses);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
489	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  SIDE_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
490	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  NON_GLOBAL_EXPECTED);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa,  NON_GLOBAL_EXPECTED);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa,  NON_GLOBAL_EXPECTED);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
491	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
492	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.mayHaveSideEffects(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
493	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
494	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()));	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
495	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getSourceFile());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getSourceFile());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  t.getSourceFile());	  NodeTraversal.traverse(compiler,    t.getSourceFile());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
496	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  numUseWithinCfgNode);	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
497	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  cfa);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  cfa);	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
498	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  cfg);	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
499	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  numUseWithinUseCfgNode);	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
500	[BUG]  [BUGGY]  throw  new  AssertionFailedException( " ");  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException( " ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException( " ");	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
501	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  t.getScope());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getCompiler());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getCompiler());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getCompiler());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSource());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSource());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSource());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
504	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope(),  t.getScope().getVarCount());	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  SIDE_EFFECT_PREDICATE);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  MISSING_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  MISSING_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  MISSING_EFFECT_PREDICATE);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
507	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicates.  <  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicates.  <  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  Predicates.  <  SIDE_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
508	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  reachingDef));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  reachingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE,  reachingDef));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
509	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.SECONDS_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.SECONDS_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.SECONDS_PREDICATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
510	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.UNKNOWN));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.UNKNOWN));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  Predicate.UNKNOWN));	  t.report(JSError.make(t,    numUseWithinCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineNewDependencies,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  spreadingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  spreadingUses);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    this,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  this,  def);	  NodeTraversal.traverse(compiler,    t,    this,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  def,  this,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  def,  this,  t);	  NodeTraversal.traverse(compiler,    t,    this,    def);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
516	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  reachingUses);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
517	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  def);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
518	[BUG]  [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  reachingUses);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
519	[BUG]  [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
520	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1,  cfa);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode  +  1,  cfa);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
521	[BUG]  [BUGGY]  inlineGlobalScope(cfg,  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(cfg,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(cfg,  t);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
522	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfa,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa,  reachingUses);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
523	[BUG]  [BUGGY]  cfg.enterScope(t,  inlineGlobalScope);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfg.enterScope(t,  inlineGlobalScope);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfg.enterScope(t,  inlineGlobalScope);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
524	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfa,  spreadingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa,  spreadingUses);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
525	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfa,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfa,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfa,  reachingDef);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
526	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  t.getScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope(),  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope(),  t.getScope());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
527	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentVarNode();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentVarNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentVarNode();	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
528	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentIndex();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentIndex();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentIndex();	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
529	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ",  numUseWithinUseCfgNode);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineGlobalDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineGlobalDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineGlobalDependencies);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.inlineCfgNode);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  spreadingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  spreadingUses);	  NodeTraversal.traverse(compiler,    cfa,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
533	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfa,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfa,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfa,  SIDE_EFFECT_PREDICATE));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
534	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachingDef));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachingDef));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
535	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachingUses));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachingUses));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachingUses));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
536	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  DEF_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  DEF_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  DEF_PREDICATE));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
537	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  NON_GLOBAL_DEPRECATED));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  NON_GLOBAL_DEPRECATED));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  NON_GLOBAL_DEPRECATED));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
538	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  NON_GLOBAL_DEFINE_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  NON_GLOBAL_DEFINE_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  NON_GLOBAL_DEFINE_PREDICATE));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
539	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinCfgNode,  SIDE_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
540	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
541	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinCfgNode));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
542	[BUG]  [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode,  NON_GLOBAL_NAME));  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  numUseWithinCfgNode,  NON_GLOBAL_NAME));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  numUseWithinCfgNode,  NON_GLOBAL_NAME));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
543	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
544	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
545	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  NON_GLOBAL_EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  NON_GLOBAL_EXPR_RESULT);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  NON_GLOBAL_EXPR_RESULT);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
546	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  t.inGlobalScope());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
547	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getNameNode());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getNameNode());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getNameNode());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
548	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVars());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVars());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVars());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
549	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachingDef));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachingDef));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
550	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachingUses));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachingUses));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachingUses));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
551	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  MISSING_VARIABLES_TO_ANALYZE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  MISSING_VARIABLES_TO_ANALYZE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  MISSING_VARIABLES_TO_ANALYZE));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
552	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_DEFINE_PREDICATE));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
553	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  DEF_VARIABLES_TO_ANALYZE));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  DEF_VARIABLES_TO_ANALYZE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  DEF_VARIABLES_TO_ANALYZE));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
554	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  NON_GLOBAL_DEPRECATED));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
555	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( "MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( "MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
556	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "MAX_VARIABLES_TO_ANALYZE  equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( "MAX_VARIABLES_TO_ANALYZE  equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( "MAX_VARIABLES_TO_ANALYZE  equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
557	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " "  +  t.getScope().getVarCount());	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
558	[BUG]  [BUGGY]  cfa.enterGlobalScope(t,  n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(t,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(t,  n);	  cfa.enterGlobalScope(t);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
559	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Cannot  enter  global  scope: "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Cannot  enter  global  scope: "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Cannot  enter  global  scope: "  +  t.getScope());	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
560	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  global  scope. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Can  not  enter  global  scope. ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Can  not  enter  global  scope. ");	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GlobalAnalysis());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  GlobalAnalysis());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  GlobalAnalysis());	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
562	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  TokenTraversal());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  TokenTraversal());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  TokenTraversal());	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
563	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  reachingUses);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
564	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  reachingDef);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
565	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName)+  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName)+  1;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName)+  1;	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.descendingDependencies);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.descendingDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.descendingDependencies);	  NodeTraversal.traverse(compiler,    cfa,    def);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    this);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  this,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
569	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " "  +  t.getScope());	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
570	[BUG]  [BUGGY]  AssertionFailedError  cfg  =  new  AssertionFailedError(t.getMessage(),  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  cfg  =  new  AssertionFailedError(t.getMessage(),  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  cfg  =  new  AssertionFailedError(t.getMessage(),  t);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
571	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfa,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfa,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfa,  MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
572	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  PredicATE_MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  PredicATE_MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  PredicATE_MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
573	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE,  reachingDef));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE,  reachingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  MISSING_EFFECT_PREDICATE,  reachingDef));	  t.report(JSError.make(t,    numUseWithinCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
574	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.growingUses);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.growingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.growingUses);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
575	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.descendingUses);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.descendingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.descendingUses);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
577	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + ": "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + ": "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + ": "  +  t.getScope());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
578	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.toString());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
579	[BUG]  [BUGGY]  inlineGlobalScope(cfg.getScope(),  t);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(cfg.getScope(),  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(cfg.getScope(),  t);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
580	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  reachingUses);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
581	[BUG]  [BUGGY]  cfg.enterScope(t.getScope(),  inlineGlobalScope);  [CE]  illegal  start  of  expression  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfg.enterScope(t.getScope(),  inlineGlobalScope);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfg.enterScope(t.getScope(),  inlineGlobalScope);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
582	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  spreadingUses);  [CE]  illegal  start  of  expression  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  spreadingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  spreadingUses);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
583	[BUG]  [BUGGY]  inlineGlobalScope(cfg,  t.getScope());  [CE]  illegal  start  of  expression  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(cfg,  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(cfg,  t.getScope());	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
584	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  *  2);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  *  2);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()  *  2);	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
585	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inGlobalDependencies()));	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
586	[BUG]  [BUGGY]  AssertionFailedError  t  =  cfa.getMessage();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  cfa.getMessage();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  cfa.getMessage();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
587	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getCurrentNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getCurrentNode();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
588	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.toString());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  varName.toString());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
589	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").append(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").append(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ").append(t.getScope()));	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
590	[BUG]  [BUGGY]  new  UnsupportedOperationException( " "),  t.getScope());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  new  UnsupportedOperationException( " "),  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	new  UnsupportedOperationException( " "),  t.getScope());	  throw    new    UnsupportedOperationException(   "   "),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
591	[BUG]  [BUGGY]  throw  new  UnsupportedOperationException( " "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  UnsupportedOperationException( " "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  UnsupportedOperationException( " "  +  t.getScope());	  throw    new    UnsupportedOperationException(   "   "),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    cfg,    this);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
593	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  reachingUses));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  reachingUses));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  reachingUses));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
594	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  Predicates.  <  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  Predicates.  <  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  Predicates.  <  SIDE_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
595	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  Predicate.SECONDS_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  Predicate.SECONDS_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  Predicate.SECONDS_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
596	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " "  +  t.getScope());	  throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
597	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " ").equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " ").equals(t.getScope()));	  throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
598	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " ").equals(t.getScope().getVarCount()));	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
599	[BUG]  [BUGGY]  throw  new  IllegalStateException( "MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( "MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( "MAX_VARIABLES_TO_ANALYZE.equals(t.getScope().getVarCount()));	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
600	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentIndex();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentIndex();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentIndex();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
601	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentVarNode();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentVarNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentVarNode();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
602	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNodeDeclaration();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentNodeDeclaration();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentNodeDeclaration();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
603	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentDeclaration();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getCurrentDeclaration();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getCurrentDeclaration();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
604	[BUG]  [BUGGY]  Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(numUseWithinCfgNode.inGlobalScope(),  t);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
605	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  numUseWithinUseCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
606	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  5),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  5),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  5),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
607	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  4),  def);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  4),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  4),  def);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
608	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ",  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ",  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ",  t);	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
609	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( ", ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( ", ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( ", ");	  Throwables.throw    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
610	[BUG]  [BUGGY]  cfa.enterGlobalScope(n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterGlobalScope(n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterGlobalScope(n);	  cfa.enterGlobalScope();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
611	[BUG]  [BUGGY]  cfa.initialiseScope(t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.initialiseScope(t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.initialiseScope(t);	  cfa.enterGlobalScope();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
612	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
613	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ".);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
614	[BUG]  [BUGGY]  Throwables.wrap(new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.wrap(new  IllegalStateException( " "));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.wrap(new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
615	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( ", ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( ", ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
616	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
617	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  e.getMessage());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  e.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  e.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
618	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    def);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
619	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarDeclaration();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarDeclaration();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarDeclaration();	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
620	[BUG]  [BUGGY]  PredicatesAnalysis  c  =  t.getScope();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  PredicatesAnalysis  c  =  t.getScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	PredicatesAnalysis  c  =  t.getScope();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
621	[BUG]  [BUGGY]  Predicate  c  =  t.getCurrentNode();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getCurrentNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getCurrentNode();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
622	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t.getCurrentNode());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  t.getCurrentNode());	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
623	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getCurrentNode());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getCurrentNode());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  t.getCurrentNode());	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
624	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceName());	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
625	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  c);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
626	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c),  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  c),  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  c),  this);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
627	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
628	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  t,  inlineCfgNode);	  NodeTraversal.traverse(compiler,    this,    t);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
629	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + ": "  +  t.getScope().getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + ": "  +  t.getScope().getName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + ": "  +  t.getScope().getName());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
630	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(t,  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(t,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(t,  cfg);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
631	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(this,  cfa);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(this,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(this,  cfa);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
632	[BUG]  [BUGGY]  NodeUtil.copyCurrentScope(fa,  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScope(fa,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScope(fa,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
633	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t);  return;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  t);  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  t);  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
634	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  return;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  return;  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  t);  return;	  NodeTraversal.traverse(compiler,    t);    return;    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
635	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  SIDE_EFFECT_PREDICATE);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  SIDE_EFFECT_PREDICATE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  SIDE_EFFECT_PREDICATE);	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
636	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  t.getMessage());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  t.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  t.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
637	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa.getMessage());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfa.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfa.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getSourceReference());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t.getSourceReference());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  t.getSourceReference());	  NodeTraversal.traverse(compiler,    t.getSourceReference());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
640	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  spreadingUses,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  spreadingUses,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  spreadingUses,  reachingDef);	  NodeTraversal.traverse(compiler,    cfa,    spreadingUses);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
641	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  candidate);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  candidate);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
642	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "  +  t.getScope());	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
643	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  varName.toString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  varName.toString());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "  +  varName.toString());	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
644	[BUG]  [BUGGY]  Throwable  t  =  t.getCurrentDependencyToken();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.getCurrentDependencyToken();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.getCurrentDependencyToken();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  mappingNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  mappingNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  mappingNode);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
646	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!NodeUtil.mayHaveSideEffects(t.getScope()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
647	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isFunctionDeclaration(t.getScope()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
648	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&  NodeUtil.isExpressionNode(t.getScope()));	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
649	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  in  the  range.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  in  the  range.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  to  be  in  the  range.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
650	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  possible  to  escape.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  possible  to  escape.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  possible  to  escape.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
651	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  t.getScope().getVarCount()));	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
652	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  null);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  null);	  NodeTraversal.traverse(compiler,    cfa,    null);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
653	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(numUseWithinUseCfgNode,  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(numUseWithinUseCfgNode,  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(numUseWithinUseCfgNode,  t.getScope().getVarCount());	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
654	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarDepth();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarDepth();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarDepth();	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
655	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVars();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVars();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVars();	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
656	[BUG]  [BUGGY]  cfa.enterScope(t,  n);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t,  n);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t,  n);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
657	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  reachingUses,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    reachingUses);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
658	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  PredicATE_MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  PredicATE_MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  PredicATE_MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
659	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  DEF_MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  DEF_MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  DEF_MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
660	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineNewDependencies,  reachingUses);	  NodeTraversal.traverse(compiler,    cfa,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
661	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  :  t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  :  t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ")  :  t.inGlobalScope();	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
662	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  t.getSourceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ",  t.getSourceName());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
663	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  &&  t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  &&  t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ")  &&  t.inGlobalScope());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
664	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  scope: "  +  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  scope: "  +  t.getSourceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( "Missing  scope: "  +  t.getSourceName());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
665	[BUG]  [BUGGY]  cfg.enterGlobalScope(t);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfg.enterGlobalScope(t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfg.enterGlobalScope(t);	  cfa.enterGlobalScope(t);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
666	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(t.getScope().getVarCount()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(t.getScope().getVarCount()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " ").equals(t.getScope().getVarCount()));	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
667	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  cfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
668	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  e.getMessage());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  e.getMessage());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  e.getMessage(),  e.getMessage());	  throw    new    AssertionFailedError(t.getMessage(),    e.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
669	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getConstructor());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getConstructor());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getConstructor());	  Throwables.checkState(t.inGlobalScope(),    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
670	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").printStackTrace(t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( " ").printStackTrace(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( " ").printStackTrace(t.getScope());	  throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
671	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(t.getScope());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " ").equals(t.getScope());	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
672	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").printStackTrace(t.getScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalArgumentException( " ").printStackTrace(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalArgumentException( " ").printStackTrace(t.getScope());	  throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
673	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfg);	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
674	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  numUseWithinCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
675	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getMessage(),  cfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
676	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  t.getModule());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  t.getModule());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  t.getModule());	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
677	[BUG]  [BUGGY]  cfa.enterScope(t.getScope(),  def);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t.getScope(),  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t.getScope(),  def);	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
678	[BUG]  [BUGGY]  cfg.enterScope(t.getScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfg.enterScope(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfg.enterScope(t.getScope());	  cfa.enterScope(t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
679	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidates,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    this,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
680	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidates,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidates,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    candidates);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
681	[BUG]  [BUGGY]  Throwable  t  =  t.inGlobalScope();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwable  t  =  t.inGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwable  t  =  t.inGlobalScope();	  Throwable    t    =    t.getCurrentToken();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
682	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  numUseWithinUseCfgNode,  reachingUses);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
683	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  0);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  0);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
684	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  numUseWithinUseCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
685	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  reachingDef);	  NodeTraversal.traverse(compiler,    cfa,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
686	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  spreadingTree);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  spreadingTree);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlinedNewDependencies,  spreadingTree);	  NodeTraversal.traverse(compiler,    cfa,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
687	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlineGlobalScope);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  t,  inlineGlobalScope);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  t,  inlineGlobalScope);	  NodeTraversal.traverse(compiler,    this,    t);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
688	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.analyzer);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.analyzer);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.analyzer);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
689	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.node);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  this.node);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  this.node);	  NodeTraversal.traverse(compiler,    cfa,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
690	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  reachingDef));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  reachingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  SIDE_EFFECT_PREDICATE,  reachingDef));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
691	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
692	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  t.getSourceName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  t.getSourceName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ",  t.getSourceName());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
693	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  t.getSourceFile());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  t.getSourceFile());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ",  t.getSourceFile());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
694	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ".);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
695	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getTarget();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getTarget();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getTarget();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
696	[BUG]  [BUGGY]  AssertionFailedError  t  =  t.getCurrentScope();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  AssertionFailedError  t  =  t.getCurrentScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	AssertionFailedError  t  =  t.getCurrentScope();	  AssertionFailedError    t    =    t.getMessage();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
697	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachDef));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  reachDef));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
698	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  DEF_MOVED_VARIABLE));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  DEF_MOVED_VARIABLE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  DEF_MOVED_VARIABLE));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
699	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  callingDef));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  callingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE,  callingDef));	  t.report(JSError.make(t,    cfg,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
700	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  IllegalStateException( "Unknown  scope: "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  IllegalStateException( "Unknown  scope: "  +  t.getScope().getVarCount());	  throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
701	[BUG]  [BUGGY]  cfa.enterScope(t,  this);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfa.enterScope(t,  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfa.enterScope(t,  this);	  cfa.enterScope(t);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
702	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
703	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").println(t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").println(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").println(t.getScope());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
704	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + "  is  not  supported. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + "  is  not  supported. ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " "  +  varName.toString()  + "  is  not  supported. ");	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
705	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructorNode());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getConstructorNode());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getConstructorNode());	  NodeTraversal.traverse(compiler,    t.getCurrentNode());    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
706	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  100),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinCfgNode,  100),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinCfgNode,  100),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
707	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  4),  numUseWithinUseCfgNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  4),  numUseWithinUseCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  4),  numUseWithinUseCfgNode);	  t.report(JSError.make(t,    numUseWithinCfgNode,    4),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
708	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  useCfgNode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  useCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinUseCfgNode,  useCfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinUseCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
709	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfgNode);	  throw    new    AssertionFailedError(t.getMessage(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
710	[BUG]  [BUGGY]  Predicate  c  =  t.createGlobalScope();  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.createGlobalScope();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.createGlobalScope();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
711	[BUG]  [BUGGY]  Predicate  c  =  t.getDeclaration();  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getDeclaration();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getDeclaration();	  Predicate    c    =    t.getScope();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
712	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(t.getScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " ").printStackTrace(t.getScope());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
713	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.toString()  + ": "  +  t.getScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  varName.toString()  + ": "  +  t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  varName.toString()  + ": "  +  t.getScope());	  Throwables.throw    new    IllegalArgumentException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
714	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  MISSING_EFFECT_ERROR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  MISSING_EFFECT_ERROR);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n,  MISSING_EFFECT_ERROR);	  throw    new    AssertionFailedError(t.getMessage(),    n);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
715	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  n,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  n,  null);	  throw    new    AssertionFailedError(t.getMessage(),    n);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
716	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  inlineCfgNode,  def);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  inlineCfgNode,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  inlineCfgNode,  def);	  NodeTraversal.traverse(compiler,    cfg,    def);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
717	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  null);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  null);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
718	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVar(varName,  inlineCfgNode);	  DefineredVariableDef    reachingDef    =    t.getScope().getVar(varName);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
719	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachDef));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  reachDef));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
720	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  callingDef));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  callingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  callingDef));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
721	[BUG]  [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  DEF_METADATA));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  DEF_METADATA));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  n,  SIDE_EFFECT_PREDICATE,  DEF_METADATA));	  t.report(JSError.make(t,    n,    SIDE_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
722	[BUG]  [BUGGY]  NodeUtil.copyCurrentVars(cfg,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentVars(cfg,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentVars(cfg,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
723	[BUG]  [BUGGY]  NodeUtil.copyCurrentScopeAnalysis(cfg,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.copyCurrentScopeAnalysis(cfg,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.copyCurrentScopeAnalysis(cfg,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
724	[BUG]  [BUGGY]  NodeUtil.breakCurrentScope(cfa,  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeUtil.breakCurrentScope(cfa,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeUtil.breakCurrentScope(cfa,  t);	  NodeUtil.copyCurrentScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
725	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  scope: "  +  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( "Missing  scope: "  +  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( "Missing  scope: "  +  t.getScope().getVarCount());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
726	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope().getVarCount());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getVarCount()));    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
727	[BUG]  [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE,  reachingDef));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE,  reachingDef));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  numUseWithinUseCfgNode,  MISSING_EFFECT_PREDICATE,  reachingDef));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
728	[BUG]  [BUGGY]  t.report(JSError.make(t,  cfgNode,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t.report(JSError.make(t,  cfgNode,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t.report(JSError.make(t,  cfgNode,  MISSING_EFFECT_PREDICATE));	  t.report(JSError.make(t,    numUseWithinUseCfgNode,    MISSING_EFFECT_PREDICATE));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
729	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  cfa);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  cfa);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  n,  cfa);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
730	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfgNode,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfgNode,  t);	  NodeTraversal.traverse(compiler,    n,    t);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
731	[BUG]  [BUGGY]  Context.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  cfg,  SIDE_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
732	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  n,  MISSING_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
733	[BUG]  [BUGGY]  Context.report(JSError.make(t,  cfa,  SIDE_EFFECT_PREDICATE));  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Context.report(JSError.make(t,  cfa,  SIDE_EFFECT_PREDICATE));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Context.report(JSError.make(t,  cfa,  SIDE_EFFECT_PREDICATE));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
734	[BUG]  [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount(0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  reachingDef  =  t.getScope().getVarCount(0);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  reachingDef  =  t.getScope().getVarCount(0);	  DefineredVariableDef    reachingDef    =    t.getScope().getVarCount();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
735	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlineCfgNode,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    this,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
736	[BUG]  [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
737	[BUG]  [BUGGY]  Throwables.checkState(!t.inInlineGlobalScope());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(!t.inInlineGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(!t.inInlineGlobalScope());	  Throwables.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
738	[BUG]  [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedException(t.getMessage(),  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedException(t.getMessage(),  t);	  throw    new    AssertionFailedException(t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
739	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlinedNewDependencies,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
740	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  inlinedNewDependencies,  reachingDef);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
741	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  inlineNewDependencies);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  inlineNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def,  inlineNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    inlineNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
742	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inInlinedDependencies());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inInlinedDependencies());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inInlinedDependencies());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
743	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inInlinedNewDependencies());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  t.inInlinedNewDependencies());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  t.inInlinedNewDependencies());	  Throwables.checkState(t.inGlobalScope()    ||    t.inGlobalDependencies());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
744	[BUG]  [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  escaped. "  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother.  All  global  variables  are  likely  to  be  escaped. "  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother.  All  global  variables  are  likely  to  be  escaped. "	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
745	[BUG]  [BUGGY]  //  Don't  even  brother!  All  global  variables  are  likely  escaped.  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brother!  All  global  variables  are  likely  escaped.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brother!  All  global  variables  are  likely  escaped.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
746	[BUG]  [BUGGY]  //  Don't  even  brothers.  All  global  variables  are  likely  escaped.  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  //  Don't  even  brothers.  All  global  variables  are  likely  escaped.  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	//  Don't  even  brothers.  All  global  variables  are  likely  escaped.	  //    Don't    even    brother.    All    global    variables    are    likely    escaped.    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  this,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg,  this,  reachingUses);	  NodeTraversal.traverse(compiler,    cfg,    this);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
748	[BUG]  [BUGGY]  t  =  new  UnsupportedOperationException( "Cannot  enter  global  scope  for  path: ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  t  =  new  UnsupportedOperationException( "Cannot  enter  global  scope  for  path: ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	t  =  new  UnsupportedOperationException( "Cannot  enter  global  scope  for  path: ");	  t    =    new    UnsupportedOperationException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
749	[BUG]  [BUGGY]  cfg.enterScope(t);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfg.enterScope(t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfg.enterScope(t);	  cfa.enterGlobalScope();    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
750	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getFunctionDeclaration(t.getScope());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getFunctionDeclaration(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getFunctionDeclaration(t.getScope());	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
751	[BUG]  [BUGGY]  Predicate  cfa  =  t.getScope().getNativeObjectNode();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  cfa  =  t.getScope().getNativeObjectNode();  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  cfa  =  t.getScope().getNativeObjectNode();	  Predicate    cfa    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
752	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfg);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfg);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
753	[BUG]  [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  cfg);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t.getScope(),  cfa,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t.getScope(),  cfa,  cfg);	  inlineGlobalScope(t.getScope(),    cfa);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
754	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  varName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  varName);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
755	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  NON_GLOBAL_EXPECTED);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  cfg,  NON_GLOBAL_EXPECTED);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  cfg,  NON_GLOBAL_EXPECTED);	  throw    new    AssertionFailedError(t.getMessage(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
756	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineGlobalScope);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineGlobalScope);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineGlobalScope);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
757	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineConfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineConfgNode,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineConfgNode,  reachingDef);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
758	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  reachingDef);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  reachingDef);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineCfgNode,  reachingDef);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
759	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineGlobalFileNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  inlineGlobalFileNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  inlineGlobalFileNode);	  NodeTraversal.traverse(compiler,    cfa,    inlineCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
760	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  Action(),  this);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  Action(),  this);	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
761	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  ActionChangeEvent());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfa,  new  ActionChangeEvent());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfa,  new  ActionChangeEvent());	  NodeTraversal.traverse(compiler,    cfa,    new    Action());    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
762	[BUG]  [BUGGY]  ControlFlowGraph  <  Node>  cfa  =  t.getScope().traverse(compiler,  c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  ControlFlowGraph  <  Node>  cfa  =  t.getScope().traverse(compiler,  c);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	ControlFlowGraph  <  Node>  cfa  =  t.getScope().traverse(compiler,  c);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
763	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  cfg);	  NodeTraversal.traverse(compiler,    c);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
764	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getDependentVarCount());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getDependentVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getDependentVarCount());	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
765	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getInitialValue());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  t.getScope().getInitialValue());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  t.getScope().getInitialValue());	  Throwables.checkState(t.inGlobalScope(),    t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
766	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  varName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  varName);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
767	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_EXPECTED);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_EXPECTED);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  MISSING_EFFECT_EXPECTED);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
768	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  NON_GLOBAL_EXPECTED);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  c,  NON_GLOBAL_EXPECTED);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  c,  NON_GLOBAL_EXPECTED);	  throw    new    AssertionFailedError(t.getMessage(),    c);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
769	[BUG]  [BUGGY]  Predicate  c  =  t.getScope().getCurrentNodeAt(0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Predicate  c  =  t.getScope().getCurrentNodeAt(0);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Predicate  c  =  t.getScope().getCurrentNodeAt(0);	  Predicate    c    =    t.getScope().getCurrentNode();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
770	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope()  &&!t.inGlobalScope());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
771	[BUG]  [BUGGY]  Preconditions.checkState(!t.inGlobalScope(),  t.getScope().getVarCount());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkState(!t.inGlobalScope(),  t.getScope().getVarCount());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkState(!t.inGlobalScope(),  t.getScope().getVarCount());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
772	[BUG]  [BUGGY]  Preconditions.checkArgument(!t.inGlobalScope());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Preconditions.checkArgument(!t.inGlobalScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Preconditions.checkArgument(!t.inGlobalScope());	  Preconditions.checkState(!t.inGlobalScope());    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
773	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceMap());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t.getSourceMap());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t.getSourceMap());	  NodeTraversal.traverse(compiler,    t.getScope());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
774	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  cfg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  numUseWithinCfgNode,  cfg);	  throw    new    AssertionFailedError(t.getMessage(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
775	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineGlobalDependencies);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  inlineGlobalDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  inlineGlobalDependencies);	  NodeTraversal.traverse(compiler,    t,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
776	[BUG]  [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_MESSAGE);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_MESSAGE);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	throw  new  AssertionFailedError(t.getMessage(),  t.getModule(),  MISSING_EFFECT_MESSAGE);	  throw    new    AssertionFailedError(t.getMessage(),    t.getModule());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
777	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").printStackTrace(t.getScope());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " ").printStackTrace(t.getScope());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " ").printStackTrace(t.getScope());	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
778	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  varName.toString()  + "  is  not  supported. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException( " "  +  varName.toString()  + "  is  not  supported. ");  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException( " "  +  varName.toString()  + "  is  not  supported. ");	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
779	[BUG]  [BUGGY]  Throwables.throw  new  UnsupportedOperationException(varName.equals(t.getScope()));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  UnsupportedOperationException(varName.equals(t.getScope()));  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  UnsupportedOperationException(varName.equals(t.getScope()));	  Throwables.throw    new    UnsupportedOperationException(   "   ".equals(t.getScope()));    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
780	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfgNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfgNode);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
781	[BUG]  [BUGGY]  inlineGlobalScope(t,  cfg,  def);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  inlineGlobalScope(t,  cfg,  def);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	inlineGlobalScope(t,  cfg,  def);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
782	[BUG]  [BUGGY]  cfg.inlineGlobalScope(t,  t);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  cfg.inlineGlobalScope(t,  t);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	cfg.inlineGlobalScope(t,  t);	  inlineGlobalScope(t,    cfa);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
783	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getFunctionDeclaration());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getFunctionDeclaration());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getFunctionDeclaration());	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
784	[BUG]  [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  cfgNode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  cfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  cfa  =  new  DefineredVariableDef(t.getScope().getVarCount(),  cfgNode);	  DefineredVariableDef    cfa    =    new    DefineredVariableDef(t.getScope().getVarCount());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
785	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  reachingUses);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this,  candidate,  reachingUses);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  this,  candidate,  reachingUses);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
786	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  candidate);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  candidate);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def,  candidate);	  NodeTraversal.traverse(compiler,    t,    this,    candidate);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
787	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope().getName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope().getName());  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.throw  new  IllegalStateException( " ").printStackTrace(t.getScope().getName());	  Throwables.throw    new    IllegalStateException(   "   ".equals(t.getScope().getName()));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
788	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  cfg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  cfg);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  this,  cfg);	  NodeTraversal.traverse(compiler,    this);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
789	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(varName);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().getVarName(varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().getVarName(varName);	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
790	[BUG]  [BUGGY]  DefineredVariableDef  varName  =  t.getScope().findVarName(varName);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  DefineredVariableDef  varName  =  t.getScope().findVarName(varName);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	DefineredVariableDef  varName  =  t.getScope().findVarName(varName);	  DefineredVariableDef    varName    =    t.getScope().getVarName();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
791	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
792	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  this,  inlinedNewDependencies);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  NodeTraversal.traverse(compiler,  t,  def,  this,  inlinedNewDependencies);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	NodeTraversal.traverse(compiler,  t,  def,  this,  inlinedNewDependencies);	  NodeTraversal.traverse(compiler,    t,    this,    inlinedNewDependencies);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
793	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  numUseWithinCfgNode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope()  ||  numUseWithinCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope()  ||  numUseWithinCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
794	[BUG]  [BUGGY]  Throwables.checkState(t.inGlobalScope(),  inlineCfgNode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  void  enterScope(NodeTraversal  t)  {  if  (t.inGlobalScope())  {      [BUGGY]  Throwables.checkState(t.inGlobalScope(),  inlineCfgNode);  [BUGGY]      }  if  (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE  <  t.getScope().getVarCount())  {  return;  }  ControlFlowAnalysis  cfa  =  new  ControlFlowAnalysis(compiler,  false,  true);  [CLASS]  FlowSensitiveInlineVariables  1  GatherCandiates  1  Candidate  1  2  3  4  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Candidate  c  Set  inlinedNewDependencies  NodeTraversal  t  Node  c  def  n  use  useCfgNode  Definition  defMetadata  MaybeReachingVariableUse  reachingUses  MustBeReachingVariableDef  reachingDef  String  varName  int  numUseWithinUseCfgNode  Predicate  SIDE_EFFECT_PREDICATE  AbstractCompiler  compiler  ControlFlowAnalysis  cfa  boolean  ControlFlowGraph  cfg  List  candidates  	projects/Closure3/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java	0.2013468165642073	128	129	3	replace	Throwables.checkState(t.inGlobalScope(),  inlineCfgNode);	  Throwables.checkState(t.inGlobalScope(),    numUseWithinCfgNode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
