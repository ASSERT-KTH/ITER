projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closeEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112rehashEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112close();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.closeEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZip();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLength();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getInflater();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullSize();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullLength();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112inflater.close();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.close();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112rehashCode();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closed=true;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112inflater.closeEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){getNextZipEntry();}else{returncurrent;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){getNextZipEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){getNextZipEntry();}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipEntry();}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.closeZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closeZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112startNewZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getFileName();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.initZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.getZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeArchiveEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeArchiveEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeArchiveEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.current();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readBytesOfEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getInstance();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeArchiveEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileName();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFH_LEN();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.close();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeInputStream();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setNextZipEntry(null);}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextZipEntry();}catch(Exceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullLength()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullLength()*2;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullLength()*4;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{rehashEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){try{rehashEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.removeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(ioe);}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=current.getZipEncoding();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{ZipEncodingentryEncoding=ZipEncoding.getInstance();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getInstance(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getEntry(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getInstance(source);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{getNextZipEntry();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry(),current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.addZipEntry(newZipArchiveEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry(0));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEncoding();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.close();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{open();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.close();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.close();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{init();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwAsIOException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().interrupt();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwInternal();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwIOException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112explodeZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112îndoZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,null,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(inflater,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(entryEncoding,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,null,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setContextClassLoader(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setContextClassLoader(getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setContextClassLoader(this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwUnsupportedOperationException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler<ZipArchiveEntry>inf=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleMissingException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler<ZipArchiveEntry>inputStream=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(entryEncoding,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(entryEncoding,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(entryEncoding,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(entryEncoding,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getCrcEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=CRC32Utilities.getCrcEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=zipEncoding.getCrcEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=zipEncoding.getCrcEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112inflater.closeZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinflater=current.getInflater();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112inflater.closeEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.closeEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(false);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEntry();}catch(Exceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,inf);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(inflater,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this.inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this.entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this,entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.removeZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{rehashEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.removeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,entryEncoding,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{getNextZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(Exceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{rehashEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(Exceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current==null){try{getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,this.entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,entryEncoding,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,fileName);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){exitZipEntry(current);}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){exitZipEntry(current);}else{thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){exitZipEntry(current);}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){exitZipEntry(current);}else{returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112enterZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,open,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,open,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,open,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setEntry(null);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{closeArchiveEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeArchiveEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getValue());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.encode(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getMethod());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.close();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Entry<ZipArchiveEntry>entry=currentEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Entry<ZipArchiveEntry>exitZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Entry<ZipArchiveEntry>entry=entry.getValue();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEncoding();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setCurrentInternal();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(inf);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(inf,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(this.inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry(inf));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(inflater,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipDirectory(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closeZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openFileDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(false);}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(null,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(null,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(newZipArchiveEntry(current,LFH_LEN));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(newZipArchiveEntry(current,null));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.removeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,-1,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(-1,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getInputStream();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getOutputFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=currentEntry.getInflater();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getInputFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getInput();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(this.entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=zipEncoding.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(this.entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(inputStream);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.current();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.zipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.currentTimeMillis();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.currentTarget();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.zipEncoding;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{initEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurposeFlag();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCrc();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initFile();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeArchiveEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.deleteZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,this,entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{currentDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112attempt{currentDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(EOFExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipPathEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipFiles();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipFileEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEncoding();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(Exceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.openZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getNextEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZip(ioe);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZip(null);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.close();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZip(inflater);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLowerCase();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileNameLen();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileName()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileNameLength();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLongValue();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current+1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{closeDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Entry<ZipArchiveEntry>entry=exitZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112||(current!=null&&current.length()>0)||(current==null&&current.length()>0)){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112||(current==null&&current.length()>0)||(current!=null&&current.length()>0)){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112||(current!=null&&current.length>0)||(current==null&&current.length>0)){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112||(current!=null&&current.length()>0)||(current==null&&current.length()>0)){getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112||(current==null&&current.length()>0)||(current!=null&&current.length()>0)){getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.close();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{open();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.close();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.close();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipDirectory();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipDirectory();}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipDirectory();}else{thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipDirectory();}else{returncurrent;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitZipDirectory();}else{in.close();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextZipEntry(),current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextZipEntry(),true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextZipEntry(),null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getCurrentZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextZipEntry()+1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeInputStream();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeDirectory();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextZipEntry().getValue();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getCurrentZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextZipEntry(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=this.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{getNextEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFile();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){openZipArchiveEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closeZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){openZipArchiveEntry();}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){openZipArchiveEntry();}else{thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){openZipArchiveEntry();}else{getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipArchiveEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getEntryEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getZipEncoding(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getZipEncoding(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getZipEncoding(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=zipEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current==null){try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112While(current!=null){try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{openEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{initZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.initZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipEntry(current);}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112initZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,bytesReadFromStream);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this.fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,fileNameLen+1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getNextZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.openZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.current.closeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(crc);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingzipEncoding=ZipEncodingUtilities.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZIPEncoding=ZipEncodingUtilities.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.initZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.initZipEntry(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.initZipEntry(-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(null,null,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112OpenZipEntry<?>current=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(this,current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112OpenZipEntry<?>current=getNextZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEncoding();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZipEncoding();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipEntry(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipEntry(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getValue();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readBytesOfEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ReadBytesOfEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.fileNameLen();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.readFully();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen(current);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.readFully(fileNameLen());}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,close,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(inflater!=null){try{inflater.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(inflater!=null){try{current.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(Exceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.removeEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(Exceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current+1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=zipEncoding.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{startNewZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{startNewZipEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{startNewZipEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){startNewZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{startNewZipEntry();}catch(IOExceptione){thrownewRuntimeException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getBytes();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getInputStream();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getBuffer();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getPath();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getFileName()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZIPEncoding=ZipEncodingUtilities.getCrcEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipEntry(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{getNextZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openDirectoryEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openFiles();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getCurposeFlag();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setNextZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setNextEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setNextZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setNextZipEntry(null,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeZipEntry();}catch(IOExceptione){thrownewRuntimeException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler<ZipArchiveEntry>getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setContext(getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{rehashEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.removeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(ioe);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent!=null?null:current.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent==null?null:current.getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipEntry(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipEntry(true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112pending||(current==null&&current.getValue()!=null)){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112pending||(current!=null&&current.getValue()==null)){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112pending||(current==null&&current.getValue()==null)){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112pending||(current==null&&current.getLength()>0)){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112pending||(current==null&&current.getLength()>0)){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112pending||(current==null&&current.getValue()!=null)){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.flush();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.closeEntry(inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.closeEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.reset();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen()-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen()+LFH_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen()+2;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getPurposeFlag();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{rehashEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(Exceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLength()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLength()*2;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLength()-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLength()*4;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLength()+2;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,0L);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,0,current.length);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLongSize();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullSize()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLeastFullSize();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLowerBound();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeArchiveEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingzipEncoding=current.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncoding.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getCurrentZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.openZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getNextEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.close();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurposeFlag();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initFile();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCrc();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurpose();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipEntry();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{closeArchiveEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeArchiveEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=zipEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=entryEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=zipEncoding.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=this.entryEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncoding.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncoding.getInstance(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{open();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.close();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{init();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closed=false;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112shutting=true;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closed=null;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112shutting=false;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112close=false;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully(true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully(lengthOfLastRead);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFully();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,open,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,open,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{currentDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{currentDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(EOFExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{init();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{open();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{in.close();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current==null){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112While(current!=null){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{openEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112inflater.flush();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,0L);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,0,current.length);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.reset();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{rehashEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(null);}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashEntry();}catch(Exceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getEntryEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipEncoding(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipEncoding(false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZip();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){rehashCode();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){rehashCode();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112thrownewIllegalStateException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){rehashCode();}else{thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){rehashCode();}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112thrownewIllegalArgumentException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.initZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipEntry(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initFileEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{getNextEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){try{getNextEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{getNextEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{getNextEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFH_LEN()+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFH_LONG();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getLeastFH_LEN();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{close();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.close();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{open();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getCrc();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZip();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipFile(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(entryEncoding,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNext();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getZip();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipArchiveEntry.getNextZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initArchiveEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{entryEncoding.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.close();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncoding.current();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(newZipArchiveEntry());}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFH_LEN(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{openDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readFully(current);}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closeZipFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipDirectory(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getNextZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112startNewZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.close();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close(current);}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,in);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{openDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.deleteZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFileEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextArchiveEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFile();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.deleteZipEntry(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurrentDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initSource();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurrentEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipArchiveEntry(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getNextZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getCurrentZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getNextArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.deleteZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(current){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112wired||current==null){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112wired||(current==null)){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(currentEntry.getValue()){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipEntry(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getNextZipFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,this.useUnicodeExtraFields);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinf=current.getFileInputStream();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(sourceStart);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,open);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getInstance();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{ZipEncodingcurrent=ZipEncoding.getInstance();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipEncoding.getInstance();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.getNextZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.close();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextZipFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{source();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(Exceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextArchiveEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(currentEntry.getValue());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{openDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurrentDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCurrentEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{closureEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.inflater.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextArchiveEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFile();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFileEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleMalformedException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Statestate=getState();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Statestate=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleMissingSource(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(null,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler(current.getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112[Delete]
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextArchiveEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFileEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{entryEncoding.closeEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.close();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(current){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readUnicodeExtraFields(current){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readUnicodeExtraFields();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returngetNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(current.getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Closed=false;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112shut=false;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileLength();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileName().length;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.close();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getInputStream();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Guvernant<ZipArchiveEntry>current=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getCurrentZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=currentEntry.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinflater=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readBytesOfEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readBytesOfEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readBytesOfEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){exitFileEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(current){exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Entry<ZipArchiveEntry>entry=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullPurposeFlag();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFullCharIndex();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readFully(current);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{rehashContext();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Entry<ZipArchiveEntry>=null){exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initCentralDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipArchiveEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closure();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{init();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextFile();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getNextDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen=current.getFileNameLen()+bytesReadFromStream;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully(inputStream);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully(source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.readFully(length);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtils.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,0,currentLength);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(this.current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readFully(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.deleteZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipPath();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initSource();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setNextZipEntry(newZipArchiveEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.deleteZipEntry(-1,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112handleUnicodeExtraFields();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){rehashCode();}else{thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getZipEncoding(current,source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readFully(current);}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current+1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{openDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{entryEncoding.closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.close();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=EntryEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null){try{closureEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this.useUnicodeExtraFields);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112readFully(currentEntry.getName());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current,-1);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncoding.encode(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,open,fileNameLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.closeEntry();}catch(EOFExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry(getNextZipEntry()));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextDirectory());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNumberOfLinks());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtil.getZipEncoding(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEncoding(entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEncoding(zipEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFile();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,closed);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,false);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{currentDirectory();}catch(Exceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.close();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding.closeEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(Exceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getBytesReadFromStream();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getBytesRead();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112startOpenZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112startNewZipEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=current.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112OpenZipEntry<K,V>current=currentEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112closeZipEntry(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setContextClassLoader(currentClassLoader);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Thread.currentThread().setContextClassLoader(getCurrentThreadContext());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextArchiveEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFileEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipArchiveEntry.getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closure();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{close(current);}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{init();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getZipEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getCurrentZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextZipEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.rehashEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=getNextZipEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent;}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.release();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setLength(0);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.close(int);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.getFileNameLen();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen(source);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen();}catch(Exceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipArchiveEntry.getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipFile();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipDirectory();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipVersion();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initArchiveEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=ZipEncodingUtilities.getCrcEncoding(current,close);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getHeaderLength();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setDirectory(null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleZipEntry(newFileInputStream("UTF-8"));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwZipEncodingException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleZipEntry(inputStream,ZipEncoding.UTF8);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwZipFailedError("Currententrynotfound:"+source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112getNextZipEntry(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112parent==null||current.getValue()==null){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112parent==null||current.getValue()==null){getNextZipEntry();}else{returncurrent;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112parent==null){getNextZipEntry();}else{returncurrent;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112parent==null||current.getValue()==ZipEncoding.UTF8){getNextZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112parent==null||current.getValue()==ZipEncoding.UTF8){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112parent==null){getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(entryEncoding);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null||hasDataDescriptor){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null||hasEFS){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){returnthis;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null){returnnewZipArchiveEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.initZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.encode(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEncoding(zipEncoding);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.initZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipFileEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current=getNextZipArchiveEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(current,this.entryEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.currentDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{startDirectory();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112cearcă{getNextZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleZipEntry(inputStream,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.handleZipEntry(inputStream);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112cearcă{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112cearcă{closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112cearcă{closeEntry();}catch(Exceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,openDirectory);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextInflater();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=currentEntry.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(getNextArchiveEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.addZipEntry(getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.initZipEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getInstance(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getFileDirectory(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCurrentSegment();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipArchiveEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextFileEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.getNextEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.getNextZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.encode(current);}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null||hasEFS){exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null||hasDataDescriptor){exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112cearcă{exitZipEntry();}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getDirectory();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptione){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipArchiveEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipDirectory();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.initZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipFileEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{initZipLong();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler(current,getNextZipEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwAsZipException("");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=this.zipEncoding.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{readBytesOfEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,null);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112exitZipEntry(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this.extraLen);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=currentEntry.getInstance();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwAsZipError("Currententrynotfound:"+LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwAsZipError("Currententrynotfound:"+source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwAsZipError("Currententryhasbeendeprecated.");
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getBase64();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112byte[]buf=current.getInfo();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112cearcă{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current!=null){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null||hasDataDescriptor){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112if(current==null||hasEFS){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipZipEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipDirectoryEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.inflater.closeEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.initZipEntry();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(current,null,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112fileNameLen-=current.getFileNameLen();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.currentDirectory();}catch(IOExceptionioe){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=currentEntry.getZipEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipLong();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.encode(current);}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.getNextZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeEntry();}catch(EOFExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{getNextEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipArchiveEntry.getNextZipEntry();}catch(IOExceptionioe){thrownewIllegalArgumentException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.releaseEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.releaseEntry(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getNextZipEntry(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipArchiveEntry.getNextZipEntry();}catch(IOExceptionioe){thrownewIllegalStateException("");}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,this.inputStream);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null&&current.length>0){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null&&hasDataDescriptor){try{closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112aughtExceptionHandler.throwAsZipFailedError("Currententrynotfound:"+source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112current.setZipEntry(newZipArchiveEntry());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getZipEncoding(inflater,current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getZipEncoding(current,inflater,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileLenient();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112intLFH_LEN=current.getFileLen();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=getEntryEncoding();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{returncurrent.getZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setNextZipEntry(inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=currentEntry.getEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(zipEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(this.zipEncoding);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtilities.getCrcEncoding(current,inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current=ZipArchiveEntry.getNextZipEntry();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(current,true);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(current,this);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrent=ZipEncodingUtilities.getCrcEncoding(current,source);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.encode(current);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.closeZipEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.delete(source);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.enable(ZipArchiveEntry.USE_UNIcodeExtraFields);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(null,null,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry(null,null));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.encode(current);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding.getNextZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(current!=null&&current.length>0){try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112while(ioe!=null){try{closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getURL());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getName());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getChars());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getPath());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncoding.encode(current.getPrettyPrinter());
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=current.getZipLongEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(entryEncoding);}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{current.setZipEntry(newZipArchiveEntry());}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingcurrentEncoding=ZipEncodingUtilities.getCrcEncoding(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112Inflaterinflater=getInflater();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112zipEncoding=ZipEncodingUtils.getZipEncoding(current,LFH_LEN);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112openZipEntry(newFile(current,null));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.inflater.closeEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.closeEntry();}catch(IOExceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.initZipEntry();}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeEntry();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeArchiveEntry();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{closeDirectory();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getInstance();}catch(IOExceptionioe){throwioe;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{inflater.close();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{zipEncoding=ZipEncoding.getInstance();}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(inputStream);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.addZipEntry(inflater);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.inflater.closeEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112inflater.releaseEntry(current);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112this.current.setZipEntry(newZipArchiveEntry(1));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen++;}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen(inflater);}catch(IOExceptionioe){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{fileNameLen();}catch(Exceptione){returnnull;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returncurrent.getZipFileEntry();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112startNewZip();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112ZipEncodingentryEncoding=current.getZipLong();
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112try{this.readFully(current);}catch(IOExceptione){returnnull;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java112returnnull;
