projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=WORD;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding==hasEFS){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=hasEFS){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=null){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding==null){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LFH_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=SHORT-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=TIME_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=HORD;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lf
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off)
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding!=hasEFS){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=hasEFS){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147current.setMethod(ZipShort.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding!=hasEFS&&current.setMethod(ZipShort.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding==hasEFS){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=hasEFS){off+=WORD;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=WORD;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147Offset-=SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=SHORT+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=LFH_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LH_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LFH_LEN+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding==null){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding!=null){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=null){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding==null){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=null){off+=WORD;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding==hasEFS){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(!hasEFS){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding==hasEFS&&current.setMethod(ZipShort.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=TIME_LEN+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=TIME_LEN-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=HORD-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=HORD+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147current.setMethod(ZipLong.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147intlengthOfLastRead=ZipShort.getValue(lfh,off);current.setLength(lengthOfLastRead);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147intlengthOfLastRead=ZipShort.getValue(lfh,off);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147current.setSize(ZipLong.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147current.setFileName(ZipLong.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147current.setFileName(ZipShort.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lf
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=WORD;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147||entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off)
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=WORD-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LFH_LEN-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=SHORT-WORD;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST_LONG;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST_SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST_FIRST;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147Offset+=SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147Offsets.getLength(lfh)+SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=SHORT=LFH_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=null){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding==null){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8)){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=FH_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=SHORT-2;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST_LEN-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=SHORT/1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LFH_LEN*SHORT;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(current!=null){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147finalZipEncodingentryEncoding=hasEFS?ZipEncodingHelper.UTF8_ZIP_ENCODING:entryEncoding;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=HORIZONTAL;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=LAST_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST_LEN+1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147current.setSize(ZipShort.getValue(lfh,off));
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=H-1;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LONG;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147intlengthOfLastRead=ZipShort.getValue(lfh,off);current.setFileName(lengthOfLastRead);
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(hasEFS){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(hasEFS){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147Off<SHORT||hasEFS?current.setMethod(ZipShort.getValue(lfh,off)):entryEncoding;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)&&hasEFS){off+=WORD;}else{current.setMethod(ZipShort.getValue(lfh,off
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=ZipEncodingHelper.UTF8_ZIP_ENCODING){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off-=BYTE_LEN;
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=null){off+=SHORT;}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(hasEFS&&entryEncoding!=ZipEncodingHelper.UTF8_ZIP_ENCODING){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=hasEFS&&zipEncoding.equals(entryEncoding)){off+=SHORT;}else{current.setMethod(ZipShort.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8)){off+=WORD;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding.equals(ZipEncodingHelper.UTF8_ZIP_ENCODING)&&hasEFS){off+=WORD;}else{current.setMethod(ZipLong.getValue(lfh,off
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147if(entryEncoding!=ZipEncodingHelper.UTF8_ZIP_ENCODING){off+=SHORT;}else{current.setMethod(ZipLong.getValue(lfh,off));}
projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java147off+=LAST;
