bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	88	None	replace
2	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	88	None	replace
3	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	88	None	replace
4	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
5	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
6	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
7	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
8	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
9	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_NONE)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_NONE)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_NONE)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
10	[BUG]  [BUGGY]  Offset  -=  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  versionMadeBy;	  Offset    -=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	41	None	replace
11	[BUG]  [BUGGY]  Offset  -=  off;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  off;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  off;	  Offset    -=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	41	None	replace
12	[BUG]  [BUGGY]  Offset  -=  WORD  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  WORD  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  WORD  +  1;	  Offset    -=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	41	None	replace
13	[BUG]  [BUGGY]  Offset  -=  offsetInBuffer;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  offsetInBuffer;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  offsetInBuffer;	  Offset    -=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	41	None	replace
14	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  current;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
15	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
16	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
17	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
18	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
19	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
20	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
21	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
22	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
23	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
24	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	81	None	replace
25	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	81	None	replace
26	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	81	None	replace
27	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	108	None	replace
28	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.N	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	108	None	replace
29	[BUG]  [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    <    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	89	None	replace
30	[BUG]  [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;	  if(versionMadeBy    <    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	89	None	replace
31	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    <    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	89	None	replace
32	[BUG]  [BUGGY]  off  +=  ZipShort.getLongValue(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  ZipShort.getLongValue(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  ZipShort.getLongValue(versionMadeBy);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
33	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getLongValue(lfh);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getLongValue(lfh);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getLongValue(lfh);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
34	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getLongValue(lfh,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getLongValue(lfh,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getLongValue(lfh,  versionMadeBy);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
35	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getLongValue(versionMadeBy,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getLongValue(versionMadeBy,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getLongValue(versionMadeBy,  WORD);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
36	[BUG]  [BUGGY]  off  +=  ZipShort.getValue(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  ZipShort.getValue(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  ZipShort.getValue(versionMadeBy);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
37	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getLongValue(wORD,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getLongValue(wORD,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getLongValue(wORD,  versionMadeBy);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
38	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getIntValue(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getIntValue(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getIntValue(versionMadeBy);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
39	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  current.setPlatform(  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  current.setPlatform(  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  current.setPlatform(	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
40	[BUG]  [BUGGY]  off  -=  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  1;	  off    -=    2;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	42	None	replace
41	[BUG]  [BUGGY]  OFF  -=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  OFF  -=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	OFF  -=  WORD;	  off    -=    2;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	42	None	replace
42	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
43	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
44	[BUG]  [BUGGY]  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  versionMadeBy  =  ZipShort.getValue(lfh,  off);	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
45	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
46	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  WORD);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
47	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  off  +  WORD);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
48	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  -  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  -  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  off  -  WORD);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
49	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  offset);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  offset);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  offset);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
50	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  off  +  1);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
51	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  versionMadeBy);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
52	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
53	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
54	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
55	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
56	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
57	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  SHORT;	  Offsets.checkState(versionMadeBy    ==    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	67	None	replace
58	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  LFH_LEN;	  Offsets.checkState(versionMadeBy    ==    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	67	None	replace
59	[BUG]  [BUGGY]  Offsets.checkState(off  ==  ZipFile.BYTE_LEN);  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(off  ==  ZipFile.BYTE_LEN);  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(off  ==  ZipFile.BYTE_LEN);  off  +=  WORD;	  Offsets.checkState(versionMadeBy    ==    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	67	None	replace
60	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  2;	  Offsets.checkState(versionMadeBy    ==    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	67	None	replace
61	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	63	None	replace
62	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	63	None	replace
63	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	63	None	replace
64	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	48	None	replace
65	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	48	None	replace
66	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  1;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	48	None	replace
67	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
68	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_SHIFT);  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_SHIFT);  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_SHIFT);  off  +=  WORD;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
69	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
70	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
71	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  version;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  version;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  version;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
72	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
73	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
74	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipShort.LFH_LEN);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipShort.LFH_LEN);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipShort.LFH_LEN);	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
75	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
76	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipShort.BYTE_SHIFT)  &  ZipShort.LFH_LEN);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipShort.BYTE_SHIFT)  &  ZipShort.LFH_LEN);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipShort.BYTE_SHIFT)  &  ZipShort.LFH_LEN);	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
77	[BUG]  [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
78	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead  +  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
79	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setFileName(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setFileName(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setFileName(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
80	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  WORD);  current.setFileName(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  WORD);  current.setFileName(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  WORD);  current.setFileName(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
81	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	52	None	replace
82	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	52	None	replace
83	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    >=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	75	None	replace
84	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;	  if(versionMadeBy    >=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	75	None	replace
85	[BUG]  [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
86	[BUG]  [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
87	[BUG]  [BUGGY]  Offset  -=  VersionMadeBy.DEFAULT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  VersionMadeBy.DEFAULT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  VersionMadeBy.DEFAULT;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
88	[BUG]  [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
89	[BUG]  [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
90	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setPath(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setPath(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setPath(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
91	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead  +  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
92	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead  +  WORD);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
93	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setPath(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setPath(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setPath(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
94	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	57	None	replace
95	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	57	None	replace
96	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  1;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	57	None	replace
97	[BUG]  [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
98	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
99	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  WORD);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
100	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setLength(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setLength(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setLength(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
101	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(0);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(0);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(0);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
102	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy  >=  ZipFile.BYTE_LEN);  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy  >=  ZipFile.BYTE_LEN);  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy  >=  ZipFile.BYTE_LEN);  off  +=  WORD;	  Offsets.checkState(versionMadeBy!=    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	69	None	replace
103	[BUG]  [BUGGY]  Offsets.checkState(off!=  ZipFile.BYTE_LEN);  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(off!=  ZipFile.BYTE_LEN);  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(off!=  ZipFile.BYTE_LEN);  off  +=  WORD;	  Offsets.checkState(versionMadeBy!=    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	69	None	replace
104	[BUG]  [BUGGY]  off  +=  WORD  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  WORD  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  WORD  -  1;	  off    +=    versionMadeBy    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
105	[BUG]  [BUGGY]  off  +=  versionMadeBy  /  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  /  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  /  1;	  off    +=    versionMadeBy    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
106	[BUG]  [BUGGY]  off  +=  versionMadeBy  -  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  -  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  -  2;	  off    +=    versionMadeBy    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
107	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    -=    LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	1	None	replace
108	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }	  off    -=    LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	1	None	replace
109	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  return  current;  }	  off    -=    LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	1	None	replace
110	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    -=    LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	1	None	replace
111	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  -=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    -=    LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	1	None	replace
112	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }	  off    -=    LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	1	None	replace
113	[BUG]  [BUGGY]  off  +=  WORD  -  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  WORD  -  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  WORD  -  versionMadeBy;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
114	[BUG]  [BUGGY]  off  +=  versionMadeBy  /  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  /  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  /  WORD;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
115	[BUG]  [BUGGY]  off  +=  versionMadeBy  -  WORD  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  -  WORD  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  -  WORD  +  1;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
116	[BUG]  [BUGGY]  off  +=  lengthOfLastRead  -  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  lengthOfLastRead  -  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  lengthOfLastRead  -  WORD;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
117	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	13	None	replace
118	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  [Delete]  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  [Delete]  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  [Delete]  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	13	None	replace
119	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  |  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  |  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  |  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	13	None	replace
120	[BUG]  [BUGGY]  current.setPlatform((  VersionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  VersionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  VersionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	13	None	replace
121	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	29	None	replace
122	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	29	None	replace
123	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	29	None	replace
124	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_MASK)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_MASK)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_MASK)  {  off  +=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	55	None	replace
125	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	14	None	replace
126	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	14	None	replace
127	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	14	None	replace
128	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	14	None	replace
129	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
130	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
131	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
132	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
133	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
134	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
135	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
136	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	56	None	replace
137	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	56	None	replace
138	[BUG]  [BUGGY]  off  -=  lengthOfLastRead  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  lengthOfLastRead  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  lengthOfLastRead  +  1;	  off    -=    lengthOfLastRead;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	10	None	replace
139	[BUG]  [BUGGY]  off  -=  lengthOfLastRead  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  lengthOfLastRead  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  lengthOfLastRead  +  WORD;	  off    -=    lengthOfLastRead;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	10	None	replace
140	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
141	[BUG]  [BUGGY]  off  +=  VersionMadeBy.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.BYTE_SHIFT;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
142	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
143	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  LFH_LEN;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
144	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	43	None	replace
145	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  WORD);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
146	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  WORD);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
147	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
148	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  WORD);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
149	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  current);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  current);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  current);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
150	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  0);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  0);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  0);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
151	[BUG]  [BUGGY]  off  -=  JsonStringEncoder.getInstance().getLocalFileName(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  JsonStringEncoder.getInstance().getLocalFileName(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  JsonStringEncoder.getInstance().getLocalFileName(versionMadeBy);	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	32	None	replace
152	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  |  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  |  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  |  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >=    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	45	None	replace
153	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
154	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  &&  versionMadeBy  ==  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  &&  versionMadeBy  ==  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  &&  versionMadeBy  ==  ZipFile.BYTE_LEN;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
155	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LONG;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LONG;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LONG;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
156	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
157	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >  ZipFile.BYTE_LEN;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
158	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
159	[BUG]  [BUGGY]  off  +=  versionMadeBy.length  -  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.length  -  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.length  -  WORD;	  off    +=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	9	None	replace
160	[BUG]  [BUGGY]  off  +=  versionMadeBy.length  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.length  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.length  -  1;	  off    +=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	9	None	replace
161	[BUG]  [BUGGY]  off  +=  versionMadeBy.length  *  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.length  *  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.length  *  WORD;	  off    +=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	9	None	replace
162	[BUG]  [BUGGY]  off  +=  versionMadeBy.length  -  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.length  -  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.length  -  2;	  off    +=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	9	None	replace
163	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
164	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  WORD);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
165	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
166	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  WORD);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
167	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  offset);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  offset);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  offset);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
168	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  2);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  2);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  2);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
169	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	115	None	replace
170	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	115	None	replace
171	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	115	None	replace
172	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	115	None	replace
173	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	115	None	replace
174	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
175	[BUG]  [BUGGY]  final  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
176	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
177	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	2	None	replace
178	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	2	None	replace
179	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	2	None	replace
180	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >=  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >=  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off  >=  ZipFile.BYTE_LEN;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
181	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  &&  off  >  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  &&  off  >  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  &&  off  >  ZipFile.BYTE_LEN;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
182	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_SHIFT;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
183	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  ==  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  ==  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off  ==  ZipFile.BYTE_LEN;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
184	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_LONG;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_LONG;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_LONG;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
185	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_LEN  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_LEN  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off  >  ZipFile.BYTE_LEN  +  1;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
186	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off!=  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off!=  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off!=  ZipFile.BYTE_LEN;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
187	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetIn  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetIn  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetIn	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
188	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
189	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
190	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
191	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offset  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offset  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offset	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
192	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  new  ZipArchiveEntry();  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
193	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
194	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  new  ZipArchiveEntry();  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
195	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
196	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	53	None	replace
197	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	53	None	replace
198	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
199	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
200	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
201	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy  +  WORD);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy  +  WORD);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy  +  WORD);  }	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
202	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  return  current;  }	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
203	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy);  }	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
204	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK,  off);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK,  off);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK,  off);	  current.setPlatform((    versionMadeBy!=    ZipFile.BYTE_SHIFT)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	107	None	replace
205	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
206	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
207	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
208	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
209	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LONG)  {  off  +=  SHORT;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
210	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	116	None	replace
211	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	116	None	replace
212	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	4	None	replace
213	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  1);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
214	[BUG]  [BUGGY]  final  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
215	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
216	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
217	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	76	None	replace
218	[BUG]  [BUGGY]  off  +=  sig.lengthOfLastRead;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  sig.lengthOfLastRead;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  sig.lengthOfLastRead;	  off    +=    partesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	109	None	replace
219	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	33	None	replace
220	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	33	None	replace
221	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	33	None	replace
222	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	113	None	replace
223	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	113	None	replace
224	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	113	None	replace
225	[BUG]  [BUGGY]  off  -=  versionMadeBy  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy  +  1;	  off    -=    WORD    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	38	None	replace
226	[BUG]  [BUGGY]  off  -=  VersionMadeBy  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy  +  1;	  off    -=    WORD    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	38	None	replace
227	[BUG]  [BUGGY]  off  -=  WORD  +  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  WORD  +  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  WORD  +  2;	  off    -=    WORD    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	38	None	replace
228	[BUG]  [BUGGY]  off  -=  WORD  +  1L;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  WORD  +  1L;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  WORD  +  1L;	  off    -=    WORD    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	38	None	replace
229	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_NIBLET_MASK)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_NIBLET_MASK)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_NIBLET_MASK)  {  off  +=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	18	None	replace
230	[BUG]  [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
231	[BUG]  [BUGGY]  if(current!=  null)  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(current!=  null)  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(current!=  null)  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
232	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setInputStream(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setInputStream(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setInputStream(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
233	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead  +  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
234	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	65	None	replace
235	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  LFH_LEN;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	65	None	replace
236	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
237	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
238	[BUG]  [BUGGY]  off  -=  JsonStringEncoder.getInstance().quoteAsImpl(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  JsonStringEncoder.getInstance().quoteAsImpl(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  JsonStringEncoder.getInstance().quoteAsImpl(versionMadeBy);	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
239	[BUG]  [BUGGY]  off  -=  JsonStringEncoder.getInstance().encodeAsISOControl(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  JsonStringEncoder.getInstance().encodeAsISOControl(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  JsonStringEncoder.getInstance().encodeAsISOControl(versionMadeBy);	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
240	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
241	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
242	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
243	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	100	None	replace
244	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
245	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
246	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
247	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
248	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  VersionMadeBy;  }  else  {  current.setPlatform(versionMadeBy  +  WORD,  versionMadeBy);  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
249	[BUG]  [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.LFH_LEN  +  1;	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
250	[BUG]  [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  -  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  -  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.LFH_LEN  -  WORD;	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
251	[BUG]  [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.LFH_LEN  +  WORD;	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
252	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
253	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
254	[BUG]  [BUGGY]  off  -=  bytesReadFromStream;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  bytesReadFromStream;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  bytesReadFromStream;	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
255	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setPlatform(versionMadeBy);  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
256	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  return  current;  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
257	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  bytesReadFromStream;  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
258	[BUG]  [BUGGY]  off  +=  WORD  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  WORD  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  WORD  +  1;	  off    +=    lengthOfLastRead    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	11	None	replace
259	[BUG]  [BUGGY]  off  +=  lengthOfLastRead  +  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  lengthOfLastRead  +  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  lengthOfLastRead  +  2;	  off    +=    lengthOfLastRead    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	11	None	replace
260	[BUG]  [BUGGY]  off  +=  lengthOfLastRead  /  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  lengthOfLastRead  /  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  lengthOfLastRead  /  1;	  off    +=    lengthOfLastRead    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	11	None	replace
261	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	105	None	replace
262	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  ==  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  ==  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  ==  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	105	None	replace
263	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_SHIFT);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	105	None	replace
264	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    <    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	104	None	replace
265	[BUG]  [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy    <    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	104	None	replace
266	[BUG]  [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE	  if(versionMadeBy    <    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	104	None	replace
267	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
268	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
269	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  return  current;  }	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
270	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  return  current;  }	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
271	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
272	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  System.arraycopy(lfh,  off,  current,  0,  versionMadeBy,  offsetInBuffer);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  System.arraycopy(lfh,  off,  current,  0,  versionMadeBy,  offsetInBuffer);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  versionMadeBy;  }  else  {  System.arraycopy(lfh,  off,  current,  0,  versionMadeBy,  offsetInBuffer);  }	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
273	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  WORD);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
274	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  off  +  WORD);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
275	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  off  +  1);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
276	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  offset);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  offset);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  offset);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
277	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  off,  WORD);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
278	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  current);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  current);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  current);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
279	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	72	None	replace
280	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
281	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
282	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
283	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
284	[BUG]  [BUGGY]  off  -=  versionMadeBy.getValue();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.getValue();  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.getValue();	  off    -=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	103	None	replace
285	[BUG]  [BUGGY]  Offset  -=  versionMadeBy.Offset;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  versionMadeBy.Offset;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  versionMadeBy.Offset;	  off    -=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	103	None	replace
286	[BUG]  [BUGGY]  Offset  -=  VersionMadeBy.FUNCTION;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  VersionMadeBy.FUNCTION;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  VersionMadeBy.FUNCTION;	  off    -=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	103	None	replace
287	[BUG]  [BUGGY]  off  -=  versionMadeBy.FUNCTION;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.FUNCTION;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.FUNCTION;	  off    +=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	118	None	replace
288	[BUG]  [BUGGY]  off  +=  VersionMadeBy.FUNCTION  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.FUNCTION  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.FUNCTION  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);	  off    +=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	118	None	replace
289	[BUG]  [BUGGY]  off  +=  VersionMadeBy.FUNCTION  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.FUNCTION  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.FUNCTION  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT);	  off    +=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	118	None	replace
290	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_N)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_N)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_N)  {  off  +=  WORD;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	47	None	replace
291	[BUG]  [BUGGY]  int  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  WORD;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
292	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  int  off  +=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  int  off  +=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  int  off  +=  versionMadeBy;  }	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
293	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  int  off  +=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  int  off  +=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  int  off  +=  versionMadeBy;  }	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
294	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT  ||  versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT  ||  versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT  ||  versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	49	None	replace
295	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	44	None	replace
296	[BUG]  [BUGGY]  current.setPlatform(versionMadeBy  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform(versionMadeBy  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform(versionMadeBy  +  1);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
297	[BUG]  [BUGGY]  current.setBase(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setBase(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setBase(versionMadeBy);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
298	[BUG]  [BUGGY]  current.setSize(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setSize(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setSize(versionMadeBy);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
299	[BUG]  [BUGGY]  current.setPlatform(versionMadeBy  -  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform(versionMadeBy  -  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform(versionMadeBy  -  1);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
300	[BUG]  [BUGGY]  current.setRaw(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setRaw(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setRaw(versionMadeBy);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
301	[BUG]  [BUGGY]  current.setPath(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPath(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPath(versionMadeBy);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
302	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
303	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
304	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
305	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
306	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
307	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
308	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
309	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy!=  ZipFile.BYTE_SHIFT);  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy!=  ZipFile.BYTE_SHIFT);  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy!=  ZipFile.BYTE_SHIFT);  off  +=  WORD;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
310	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
311	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  version;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  version;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  version;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
312	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  +  1;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
313	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  -  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  -  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  -  WORD;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
314	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  +  WORD;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
315	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  -  1;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
316	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  *  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  *  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  *  WORD;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
317	[BUG]  [BUGGY]  off  +=  WORD  +  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  WORD  +  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  WORD  +  versionMadeBy;	  off    +=    versionMadeBy    +    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	95	None	replace
318	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  WORD  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  WORD  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  WORD  +  1;	  off    +=    versionMadeBy    +    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	95	None	replace
319	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  lengthOfLastRead;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  lengthOfLastRead;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  lengthOfLastRead;	  off    +=    versionMadeBy    +    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	95	None	replace
320	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  LFH_LEN;	  off    +=    versionMadeBy    +    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	95	None	replace
321	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  2;	  off    +=    versionMadeBy    +    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	95	None	replace
322	[BUG]  [BUGGY]  off  -=  versionMadeBy.LFH_LEN  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.LFH_LEN  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.LFH_LEN  +  1;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
323	[BUG]  [BUGGY]  off  -=  VersionMadeBy.LFH_LEN  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.LFH_LEN  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.LFH_LEN  +  1;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
324	[BUG]  [BUGGY]  off  -=  versionMadeBy.LFH_LEN  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.LFH_LEN  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.LFH_LEN  +  WORD;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
325	[BUG]  [BUGGY]  off  -=  VersionMadeBy.LFH_LEN  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.LFH_LEN  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.LFH_LEN  +  WORD;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
326	[BUG]  [BUGGY]  Offset  -=  VersionMadeBy.LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  VersionMadeBy.LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  VersionMadeBy.LFH_LEN;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
327	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_MASK)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_MASK)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_MASK)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	70	None	replace
328	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
329	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  nu  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  nu  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  nu	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
330	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
331	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
332	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
333	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
334	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  WORD);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
335	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  off  +  WORD);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
336	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  off  +  1);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
337	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  offset);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  offset);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  offset);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
338	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  off,  WORD);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
339	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  2);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  2);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  off  +  2);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
340	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	5	None	replace
341	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(lfh,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(lfh,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(lfh,  versionMadeBy);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
342	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(wORD,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(wORD,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(wORD,  versionMadeBy);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
343	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(lfh);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(lfh);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(lfh);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
344	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(versionMadeBy,  WORD);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
345	[BUG]  [BUGGY]  off  +=  ZipShort.getValue(lfh,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  ZipShort.getValue(lfh,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  ZipShort.getValue(lfh,  versionMadeBy);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
346	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(Long.MAX_VALUE);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(Long.MAX_VALUE);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(Long.MAX_VALUE);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
347	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	84	None	replace
348	[BUG]  [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	final  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
349	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  +  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
350	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  +  WORD);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  +  WORD);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  +  WORD);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
351	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setLocation(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setLocation(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  WORD);  current.setLocation(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
352	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMa  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMa  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMa	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
353	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
354	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
355	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
356	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMa  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMa  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMa	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
357	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	28	None	replace
358	[BUG]  [BUGGY]  off  -=  versionMadeBy  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy  -  1;	  off    +=    lengthOfLastRead    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	86	None	replace
359	[BUG]  [BUGGY]  off  +=  lengthOfLastRead  -  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  lengthOfLastRead  -  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  lengthOfLastRead  -  2;	  off    +=    lengthOfLastRead    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	86	None	replace
360	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	15	None	replace
361	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
362	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
363	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
364	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
365	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
366	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetIn  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetIn  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetIn	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
367	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
368	[BUG]  [BUGGY]  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
369	[BUG]  [BUGGY]  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  off  +=  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  off  +=  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  versionMadeBy  =  ZipShort.getValue(lfh,  off);  off  +=  versionMadeBy;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
370	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.BYTE_SHIFT);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)    &    ZipFile.BYTE_LEN);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	106	None	replace
371	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.BYTE_LEN);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.BYTE_LEN);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.BYTE_LEN);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)    &    ZipFile.BYTE_LEN);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	106	None	replace
372	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  1L;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  1L;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  1L;	  off    +=    versionMadeBy    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	98	None	replace
373	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  3;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  3;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  3;	  off    +=    versionMadeBy    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	98	None	replace
374	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT);	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
375	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
376	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	58	None	replace
377	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  +  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  +  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  +  1);	  current.setPlatform((    versionMadeBy!=    ZipFile.BYTE_SHIFT)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	107	None	replace
378	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK,  0);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK,  0);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK,  0);	  current.setPlatform((    versionMadeBy!=    ZipFile.BYTE_SHIFT)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	107	None	replace
379	[BUG]  [BUGGY]  current.setInputStream(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setInputStream(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setInputStream(versionMadeBy);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
380	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setInputStream(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setInputStream(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setInputStream(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
381	[BUG]  [BUGGY]  int  off  +=  lengthOfLastRead;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  lengthOfLastRead;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  lengthOfLastRead;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
382	[BUG]  [BUGGY]  int  off  -=  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  -=  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  -=  versionMadeBy;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
383	[BUG]  [BUGGY]  int  off  +=  versionMadeBy  -  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  versionMadeBy  -  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  versionMadeBy  -  WORD;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
384	[BUG]  [BUGGY]  int  off  +=  versionMadeBy  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  versionMadeBy  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  versionMadeBy  +  WORD;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
385	[BUG]  [BUGGY]  int  off  +=  BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  BYTE_SHIFT;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
386	[BUG]  [BUGGY]  int  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  LFH_LEN;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
387	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off)-  1;  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off)-  1;  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off)-  1;  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
388	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  2);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  2);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  2);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
389	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
390	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT);  off  +=  LFH_LEN;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
391	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
392	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
393	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	49	None	replace
394	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	49	None	replace
395	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	52	None	replace
396	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
397	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
398	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
399	[BUG]  [BUGGY]  off  -=  versionMadeBy  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy  +  WORD;	  off    -=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	37	None	replace
400	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	5	None	replace
401	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.BYTE_SHIFT);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)    &    ZipFile.BYTE_LEN);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	106	None	replace
402	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.BYTE_NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.BYTE_NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.BYTE_NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)    &    ZipFile.BYTE_LEN);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	106	None	replace
403	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	113	None	replace
404	[BUG]  [BUGGY]  Offset  -=  offset;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  offset;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  offset;	  Offset    -=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	41	None	replace
405	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  3);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off  +  3);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  off  +  3);	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
406	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	50	None	replace
407	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy!=  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy!=  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy!=  ZipFile.BYTE_LEN;	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
408	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >=  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >=  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >=  ZipFile.BYTE_LEN;	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
409	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHORT)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHORT)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHORT)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	47	None	replace
410	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	47	None	replace
411	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  +  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  +  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  +  2;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
412	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET	  if(versionMadeBy    <    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	104	None	replace
413	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN>  off  -=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN>  off  -=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN>  off  -=  SHORT;	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	32	None	replace
414	[BUG]  [BUGGY]  if(current!=  null)  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(current!=  null)  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(current!=  null)  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
415	[BUG]  [BUGGY]  off  -=  VersionMadeBy.MAX_VALUE;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.MAX_VALUE;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.MAX_VALUE;	  off    -=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	39	None	replace
416	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	72	None	replace
417	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  current);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  current);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(versionMadeBy,  current);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
418	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  0);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  0);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(versionMadeBy,  0);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
419	[BUG]  [BUGGY]  off  +=  bytesReadFromStream  -  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  bytesReadFromStream  -  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  bytesReadFromStream  -  WORD;	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
420	[BUG]  [BUGGY]  off  +=  bytesReadFromStream  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  bytesReadFromStream  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  bytesReadFromStream  -  1;	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
421	[BUG]  [BUGGY]  current.setLocale(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setLocale(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setLocale(versionMadeBy);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
422	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	108	None	replace
423	[BUG]  [BUGGY]  off  +=  versionMadeBy.length  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.length  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.length  +  1;	  off    +=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	9	None	replace
424	[BUG]  [BUGGY]  off  +=  versionMadeBy  +  4;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  +  4;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  +  4;	  off    +=    versionMadeBy    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	98	None	replace
425	[BUG]  [BUGGY]  if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
426	[BUG]  [BUGGY]  if(off!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
427	[BUG]  [BUGGY]  if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
428	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
429	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setFileName(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setFileName(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setFileName(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
430	[BUG]  [BUGGY]  ||  versionMadeBy  >>  ZipFile.BYTE_LEN)  {  off  +=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >>  ZipFile.BYTE_LEN)  {  off  +=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >>  ZipFile.BYTE_LEN)  {  off  +=  WORD;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	28	None	replace
431	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
432	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	61	None	replace
433	[BUG]  [BUGGY]  off  -=  8;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  8;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  8;	  off    -=    2;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	42	None	replace
434	[BUG]  [BUGGY]  off  -=  4;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  4;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  4;	  off    -=    2;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	42	None	replace
435	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
436	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
437	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT);	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
438	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  >=  ZipFile.BYTE_SHIFT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  >=  ZipFile.BYTE_SHIFT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  >=  ZipFile.BYTE_SHIFT;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
439	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  >=  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  >=  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy  >=  ZipFile.BYTE_SHIFT);	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
440	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN,  versionMadeBy)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN,  versionMadeBy)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN,  versionMadeBy)  {  off  +=  WORD;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	100	None	replace
441	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
442	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
443	[BUG]  [BUGGY]  off  +=  bytesReadFromStream  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  bytesReadFromStream  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  bytesReadFromStream  +  1;	  off    +=    lengthOfLastRead    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	11	None	replace
444	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	54	None	replace
445	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	54	None	replace
446	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	54	None	replace
447	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getLongValue(versionMadeBy,  0);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getLongValue(versionMadeBy,  0);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getLongValue(versionMadeBy,  0);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
448	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
449	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
450	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
451	[BUG]  [BUGGY]  off  -=  versionMadeBy  +  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy  +  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy  +  2;	  off    -=    WORD    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	38	None	replace
452	[BUG]  [BUGGY]  off  -=  versionMadeBy  +  8;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy  +  8;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy  +  8;	  off    -=    WORD    +    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	38	None	replace
453	[BUG]  [BUGGY]  ||  current!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  current!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  current!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	16	None	replace
454	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_SHIFT);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	105	None	replace
455	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >>  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >>  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  >>  ZipFile.BYTE_LEN;	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	102	None	replace
456	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  2);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  2);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  off  +  2);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
457	[BUG]  [BUGGY]  if(off  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(off    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	119	None	replace
458	[BUG]  [BUGGY]  if(off  <  =  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  <  =  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  <  =  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(off    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	119	None	replace
459	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
460	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
461	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN  +  1;	  Offset    <    ZipFile.BYTE_LEN    ||    versionMadeBy    ==    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	99	None	replace
462	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(versionMadeBy,  off);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(versionMadeBy,  off);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(versionMadeBy,  off);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
463	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
464	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SIG)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
465	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
466	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_LONG)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_LONG)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_LONG)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
467	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FLOAT)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FLOAT)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FLOAT)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
468	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FOR)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FOR)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FOR)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
469	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipShort.LFH_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
470	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FLAG)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FLAG)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN  ||  versionMadeBy  ==  ZipShort.LFH_FLAG)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
471	[BUG]  [BUGGY]  off  -=  versionMadeBy.getLength();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.getLength();  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.getLength();	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
472	[BUG]  [BUGGY]  current.setPath((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPath((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPath((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	13	None	replace
473	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  1);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  1);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  1);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
474	[BUG]  [BUGGY]  off  -=  VersionMadeBy.DEFAULT  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.DEFAULT  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.DEFAULT  +  1;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
475	[BUG]  [BUGGY]  off  -=  VersionMadeBy.DEFAULT  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.DEFAULT  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.DEFAULT  +  WORD;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
476	[BUG]  [BUGGY]  off  +=  VersionMadeBy.DEFAULT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.DEFAULT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.DEFAULT;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
477	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_T_MASK)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_T_MASK)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_T_MASK)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	70	None	replace
478	[BUG]  [BUGGY]  off  -=  versionMadeBy.off;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.off;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.off;	  off    -=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	103	None	replace
479	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
480	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
481	[BUG]  [BUGGY]  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
482	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOf  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOf  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOf	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
483	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
484	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
485	[BUG]  [BUGGY]  off  +=  lengthOfLastRead  +  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  lengthOfLastRead  +  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  lengthOfLastRead  +  WORD;	  off    +=    versionMadeBy    +    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	95	None	replace
486	[BUG]  [BUGGY]  current.setLocation(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setLocation(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setLocation(versionMadeBy);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
487	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setLocation(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setLocation(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setLocation(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
488	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  -  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  -  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead  -  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
489	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  current);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  current);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  current);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
490	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	48	None	replace
491	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
492	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  &&  versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  LFH_LEN;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
493	[BUG]  [BUGGY]  off  +=  VersionMadeBy  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy  -  1;	  off    +=    lengthOfLastRead    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	86	None	replace
494	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
495	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipShort.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipShort.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipShort.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
496	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
497	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipShort.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipShort.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipShort.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
498	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
499	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_LEN  ||  off  >  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_LEN  ||  off  >  versionMadeBy;	  Offset    <    ZipFile.BYTE_LEN    ||    off    >    ZipFile.BYTE_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	101	None	replace
500	[BUG]  [BUGGY]  off  +=  versionMadeBy.getLength();  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.getLength();  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.getLength();	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
501	[BUG]  [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.LFH_LEN  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.LFH_LEN  -  1;	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
502	[BUG]  [BUGGY]  off  +=  versionMadeBy.LFH_LEN  +  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.LFH_LEN  +  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.LFH_LEN  +  1;	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
503	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy!=  ZipFile.BYTE_LEN);  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy!=  ZipFile.BYTE_LEN);  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy!=  ZipFile.BYTE_LEN);  off  +=  SHORT;	  Offsets.checkState(versionMadeBy!=    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	69	None	replace
504	[BUG]  [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	65	None	replace
505	[BUG]  [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  >=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
506	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHORT)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SHORT)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SHORT)  {  off  +=  SHORT;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
507	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
508	[BUG]  [BUGGY]  (versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  (versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	(versionMadeBy  >=  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	76	None	replace
509	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
510	[BUG]  [BUGGY]  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
511	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
512	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
513	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	88	None	replace
514	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setLength(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setLength(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1);  current.setLength(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
515	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  -  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  -  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  -  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
516	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LITERAL)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LITERAL)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LITERAL)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
517	[BUG]  [BUGGY]  off  +=  versionMadeBy  -  1L;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  -  1L;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  -  1L;	  off    +=    versionMadeBy    -    1;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	97	None	replace
518	[BUG]  [BUGGY]  off  +=  versionMadeBy  -  10;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  -  10;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  -  10;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
519	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  }	  Offset    <    SHORT    ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	116	None	replace
520	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
521	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
522	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
523	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	35	None	replace
524	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	105	None	replace
525	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
526	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	73	None	replace
527	[BUG]  [BUGGY]  Offset  -=  lengthOfLastRead;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  -=  lengthOfLastRead;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  -=  lengthOfLastRead;	  Offset    -=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	41	None	replace
528	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SECONDS)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_SECONDS)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_SECONDS)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	70	None	replace
529	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	2	None	replace
530	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  off  +=  offsetInBuffer;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    off    +=    offsetInBuffer;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	60	None	replace
531	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	15	None	replace
532	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  2;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	65	None	replace
533	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  1;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  1;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  1;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	65	None	replace
534	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  BYTE_SHIFT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  BYTE_SHIFT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  BYTE_SHIFT;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	65	None	replace
535	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	14	None	replace
536	[BUG]  [BUGGY]  if(off  <  SHORT)  {  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  <  SHORT)  {  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  <  SHORT)  {  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy    <    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	104	None	replace
537	[BUG]  [BUGGY]  if(off  <  SHORT)  {  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  <  SHORT)  {  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  <  SHORT)  {  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile	  if(versionMadeBy    <    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	104	None	replace
538	[BUG]  [BUGGY]  off  +=  versionMadeBy.length  *  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.length  *  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.length  *  2;	  off    +=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	9	None	replace
539	[BUG]  [BUGGY]  if(off  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    <    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	89	None	replace
540	[BUG]  [BUGGY]  current.setDelimiter(versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setDelimiter(versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setDelimiter(versionMadeBy);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
541	[BUG]  [BUGGY]  current.setInputStream(inputStream);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setInputStream(inputStream);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setInputStream(inputStream);	  current.setPlatform(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	74	None	replace
542	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
543	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	66	None	replace
544	[BUG]  [BUGGY]  if(off!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	4	None	replace
545	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
546	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN;	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	36	None	replace
547	[BUG]  [BUGGY]  Offset  <  SHORT  ||  off  >=  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  off  >=  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  off  >=  ZipFile.BYTE_LEN;	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
548	[BUG]  [BUGGY]  if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  >=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  if(off!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	120	None	replace
549	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LAST)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LAST)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LAST)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	47	None	replace
550	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  2);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  2);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  off  +  2);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
551	[BUG]  [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  1,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  fileNameLen  =  ZipShort.getValue(lfh,  off  +  1,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	fileNameLen  =  ZipShort.getValue(lfh,  off  +  1,  versionMadeBy);	  fileNameLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	79	None	replace
552	[BUG]  [BUGGY]  int  off  +=  versionMadeBy.LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  versionMadeBy.LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  versionMadeBy.LFH_LEN;	  off    +=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	8	None	replace
553	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  -  1);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
554	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  2);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  2);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off  +  2);	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
555	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off)-  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off)-  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off)-  WORD;	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	24	None	replace
556	[BUG]  [BUGGY]  long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setPath(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
557	[BUG]  [BUGGY]  current.setPath(ZipShort.getValue(lfh,  off));  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPath(ZipShort.getValue(lfh,  off));  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPath(ZipShort.getValue(lfh,  off));	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
558	[BUG]  [BUGGY]  current.setPath(zipShort.getValue(lfh,  off));  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPath(zipShort.getValue(lfh,  off));  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPath(zipShort.getValue(lfh,  off));	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setPath(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	25	None	replace
559	[BUG]  [BUGGY]  if(off!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off!=  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	84	None	replace
560	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)	  if(versionMadeBy    >=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MAS    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	87	None	replace
561	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  File.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  File.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)&  File.NIBLET_MASK);	  current.setPlatform((    versionMadeBy!=    ZipFile.BYTE_SHIFT)    &    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	107	None	replace
562	[BUG]  [BUGGY]  if(off  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  ==  ZipShort.LFH_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
563	[BUG]  [BUGGY]  if(off  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  ==  ZipShort.LFH_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipShort.LFH_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	34	None	replace
564	[BUG]  [BUGGY]  long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setFileName(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
565	[BUG]  [BUGGY]  current.setFileName(ZipShort.getValue(lfh,  off);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setFileName(ZipShort.getValue(lfh,  off);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setFileName(ZipShort.getValue(lfh,  off);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setFileName(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	80	None	replace
566	[BUG]  [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  >  ZipShort.NIBLET_MASK;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  >  ZipShort.NIBLET_MASK;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.DEFAULT  ||  versionMadeBy  >  ZipShort.NIBLET_MASK;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
567	[BUG]  [BUGGY]  off  -=  versionMadeBy.DEFAULT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.DEFAULT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.DEFAULT;	  off    -=    VersionMadeBy.DEFAULT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	78	None	replace
568	[BUG]  [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	64	None	replace
569	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	52	None	replace
570	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN;	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	92	None	replace
571	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  |  off  +=  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  |  off  +=  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  |  off  +=  versionMadeBy;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	59	None	replace
572	[BUG]  [BUGGY]  off  +=  VersionMadeBy.FUNCTION  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.FUNCTION  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.FUNCTION  -  1;	  off    +=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	118	None	replace
573	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(sig.equals(ZipLong.LFH_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(sig.equals(ZipLong.LFH_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
574	[BUG]  [BUGGY]  if(sig.equals(ZipLong.BYTE_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(sig.equals(ZipLong.BYTE_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(sig.equals(ZipLong.BYTE_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
575	[BUG]  [BUGGY]  if(sig.equals(ZipLong.FOR))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(sig.equals(ZipLong.FOR))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(sig.equals(ZipLong.FOR))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setInputStream(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setInputStream(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	23	None	replace
576	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	5	None	replace
577	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MAS  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MAS  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MAS	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	71	None	replace
578	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  =  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  =  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  =  WORD;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	44	None	replace
579	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  VersionMadeBy;  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
580	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  +=  VersionMadeBy;  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
581	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  VersionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  VersionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.NIBLET_MASK)  {  off  +=  VersionMadeBy;  }	  off    +=    VersionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	7	None	replace
582	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1,  versionMadeBy);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1,  versionMadeBy);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  +  1,  versionMadeBy);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
583	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  1);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  1);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off  -  1);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	20	None	replace
584	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.BYTE_SHIFT);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.BYTE_SHIFT);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >=  ZipFile.BYTE_LEN)&  ZipFile.BYTE_SHIFT);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)    &    ZipFile.BYTE_LEN);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	106	None	replace
585	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  3);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off  +  3);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  off  +  3);	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
586	[BUG]  [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off)-  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfh  =  ZipShort.getValue(lfh,  off)-  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfh  =  ZipShort.getValue(lfh,  off)-  WORD;	  int    lfh    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	26	None	replace
587	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	102	None	replace
588	[BUG]  [BUGGY]  off  -=  versionMadeBy.intValue;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.intValue;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.intValue;	  off    -=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	103	None	replace
589	[BUG]  [BUGGY]  off  +=  versionMadeBy.FUNCTION;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy.FUNCTION;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy.FUNCTION;	  off    -=    VersionMadeBy.FUNCTION;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	103	None	replace
590	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LONG)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	56	None	replace
591	[BUG]  [BUGGY]  off  -=  versionMadeBy.LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.LFH_LEN;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
592	[BUG]  [BUGGY]  off  -=  VersionMadeBy.LFH_LEN  -  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  VersionMadeBy.LFH_LEN  -  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  VersionMadeBy.LFH_LEN  -  1;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
593	[BUG]  [BUGGY]  off  -=  versionMadeBy.LFH_LEN  +  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.LFH_LEN  +  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.LFH_LEN  +  2;	  off    -=    VersionMadeBy.LFH_LEN;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	77	None	replace
594	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
595	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  >  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  >  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  >  ZipFile.NIBLET_MASK)  {  off  +=  LFH_LEN;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
596	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.NIBLET_MASK;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.NIBLET_MASK;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.BYTE_SHIFT  ||  Offset  <  ZipFile.NIBLET_MASK;	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	3	None	replace
597	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	17	None	replace
598	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  SHORT;  }  else  {  current.setPlatform((  versionMadeBy!=  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	17	None	replace
599	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LEN)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
600	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.N  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.N  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_LONG)&  ZipFile.N	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
601	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_LEN)&    ZipFile.N    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	19	None	replace
602	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	83	None	replace
603	[BUG]  [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off)-  WORD;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lfhLen  =  ZipShort.getValue(lfh,  off)-  WORD;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lfhLen  =  ZipShort.getValue(lfh,  off)-  WORD;	  int    lfhLen    =    ZipShort.getValue(lfh,    off);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	21	None	replace
604	[BUG]  [BUGGY]  off  +=  versionMadeBy  -  ZipShort.LFH_LEN;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  -  ZipShort.LFH_LEN;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  -  ZipShort.LFH_LEN;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
605	[BUG]  [BUGGY]  off  +=  versionMadeBy  -  ZipShort.MAX_VALUE;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  versionMadeBy  -  ZipShort.MAX_VALUE;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  versionMadeBy  -  ZipShort.MAX_VALUE;	  off    +=    versionMadeBy    -    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	96	None	replace
606	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_TOP)  {  off  +=  SHORT;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_TOP)  {  off  +=  SHORT;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_TOP)  {  off  +=  SHORT;	  ||    versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    SHORT;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	46	None	replace
607	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
608	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  null;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    null;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	112	None	replace
609	[BUG]  [BUGGY]  if(off  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
610	[BUG]  [BUGGY]  if(off  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(off  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(off  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	31	None	replace
611	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  current.setInputStream(inputStream);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    current.setInputStream(inputStream);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	110	None	replace
612	[BUG]  [BUGGY]  off  -=  versionMadeBy.length  *  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  -=  versionMadeBy.length  *  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  -=  versionMadeBy.length  *  2;	  off    -=    versionMadeBy.length;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	40	None	replace
613	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
614	[BUG]  [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  if(versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  SHORT;  }	  int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	68	None	replace
615	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  ZipShort.NONE);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  ZipShort.NONE);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(versionMadeBy,  ZipShort.NONE);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
616	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  ZipShort.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getValue(versionMadeBy,  ZipShort.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getValue(versionMadeBy,  ZipShort.NIBLET_MASK);	  off    +=    VersionMadeBy.getValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	82	None	replace
617	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  fileNameLen  +=  versionMadeBy;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  fileNameLen  +=  versionMadeBy;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  fileNameLen  +=  versionMadeBy;  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
618	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  return  new  ZipArchiveEntry();  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
619	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
620	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setInputStream(inputStream);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setInputStream(inputStream);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipShort.LFH_LEN)  {  off  +=  bytesReadFromStream;  }  else  {  current.setInputStream(inputStream);  }	  off    +=    bytesReadFromStream;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	12	None	replace
621	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	32	None	replace
622	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	32	None	replace
623	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	32	None	replace
624	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	32	None	replace
625	[BUG]  [BUGGY]  off  +=  VersionMadeBy.getLongValue(versionMadeBy,  ZipShort.NONE);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  off  +=  VersionMadeBy.getLongValue(versionMadeBy,  ZipShort.NONE);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	off  +=  VersionMadeBy.getLongValue(versionMadeBy,  ZipShort.NONE);	  off    +=    VersionMadeBy.getLongValue(versionMadeBy);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	85	None	replace
626	[BUG]  [BUGGY]  Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
627	[BUG]  [BUGGY]  Offset  <  SHORT  &&  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  SHORT  &&  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  SHORT  &&  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	91	None	replace
628	[BUG]  [BUGGY]  long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	long  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
629	[BUG]  [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  2);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  2);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLength(lengthOfLastRead  +  2);	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLength(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	22	None	replace
630	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	81	None	replace
631	[BUG]  [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy!=  ZipFile.BYTE_SHIFT)  {  off  +=  WORD;  }  else  {  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK	  if(versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    }    else    {    current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	108	None	replace
632	[BUG]  [BUGGY]  int  off  =  WORD  +  versionMadeBy;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                  AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  =  WORD  +  versionMadeBy;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  =  WORD  +  versionMadeBy;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
633	[BUG]  [BUGGY]  int  off  +=  lfh.length;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  int  off  +=  lfh.length;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	int  off  +=  lfh.length;	  int    off    +=    versionMadeBy;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	114	None	replace
634	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT  ||  versionMadeBy  >  ZipFile.NIBLET_MASK)  {  off  +=  WORD;  }  else  {  current.setPlatform(versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    WORD;    }    else    {    current.setPlatform(versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	49	None	replace
635	[BUG]  [BUGGY]  if(sig.equals(ZipLong.LFH_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(sig.equals(ZipLong.LFH_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(sig.equals(ZipLong.LFH_LEN))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
636	[BUG]  [BUGGY]  if(sig.equals(ZipLong.FOR))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(sig.equals(ZipLong.FOR))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(sig.equals(ZipLong.FOR))  {  int  lengthOfLastRead  =  ZipShort.getValue(lfh,  off);  current.setLocation(lengthOfLastRead);  }	  int    lengthOfLastRead    =    ZipShort.getValue(lfh,    off);    current.setLocation(lengthOfLastRead);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	117	None	replace
637	[BUG]  [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  2;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  2;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy!=  ZipFile.BYTE_LEN)  {  off  +=  2;	  ||    versionMadeBy!=    ZipFile.BYTE_LEN)    {    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	57	None	replace
638	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  fileNameLen,  versionMadeBy,  lengthOfLastRead);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    fileNameLen,    versionMadeBy,    lengthOfLastRead);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	94	None	replace
639	[BUG]  [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT?  versionMadeBy  :  ZipFile.NIBLET_MASK;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                            AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT?  versionMadeBy  :  ZipFile.NIBLET_MASK;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offset  <  ZipFile.BYTE_SHIFT  ||  off  >  ZipFile.BYTE_SHIFT?  versionMadeBy  :  ZipFile.NIBLET_MASK;	  if(versionMadeBy!=    ZipFile.BYTE_SHIFT)    {    off    +=    LFH_LEN;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	6	None	replace
640	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  WORD;  }  else  {  return  new  ZipArchiveEntry();  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    return    new    ZipArchiveEntry();    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	93	None	replace
641	[BUG]  [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                    AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
642	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  System.arraycopy(current,  0,  inf,  versionMadeBy,  0,  versionMadeBy);  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    System.arraycopy(current,    0,    inf,    versionMadeBy,    0,    versionMadeBy);    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	90	None	replace
643	[BUG]  [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  1;  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  1;  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	Offsets.checkState(versionMadeBy  ==  ZipFile.BYTE_LEN);  off  +=  1;	  Offsets.checkState(versionMadeBy    ==    ZipFile.BYTE_LEN);    off    +=    WORD;    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	67	None	replace
644	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                      AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
645	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
646	[BUG]  [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                          AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  ==  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  ==  ZipFile.BYTE_LEN  ||  versionMadeBy  ==  ZipFile.BYTE_LEN)  {  off  -=  SHORT;  }  else  {  int  offsetInBuffer  =  ZipShort.getValue(lfh,  off);  return	  if(versionMadeBy    ==    ZipFile.BYTE_LEN)    {    off    -=    SHORT;    }    else    {    int    offsetInBuffer    =    ZipShort.getValue(lfh,    off);    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	111	None	replace
647	[BUG]  [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]                        AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	if(versionMadeBy  <  ZipFile.BYTE_SHIFT)  {  off  +=  versionMadeBy;  }  else  {  return  current;  }	  if(versionMadeBy    ==    ZipFile.BYTE_SHIFT)    {    off    +=    versionMadeBy;    }    else    {    return    current;    }    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	62	None	replace
648	[BUG]  [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  zipFile.NIBLET_MASK);  [CE]  static  import  declarations  are  not  supported  in  -source  1.4  [FE]              AssertionFailedError      [CONTEXT]      return  null;  }  if  (!sig.equals(ZipLong.LFH_SIG))  {  return  null;  }  int  off  =  WORD;  current  =  new  ZipArchiveEntry();  int  versionMadeBy  =  ZipShort.getValue(lfh,  off);      [BUGGY]  current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  zipFile.NIBLET_MASK);  [BUGGY]      current.setPlatform((versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  ZipFile.NIBLET_MASK);  final  int  generalPurposeFlag  =  ZipShort.getValue(lfh,  off);  final  boolean  hasEFS  =  (generalPurposeFlag  &  ZipArchiveOutputStream.EFS_FLAG)  !=  0;  final  ZipEncoding  entryEncoding  =  hasEFS  ?  ZipEncodingHelper.UTF8_ZIP_ENCODING  :  zipEncoding;  hasDataDescriptor  =  (generalPurposeFlag  &  8)  !=  0;  [CLASS]  ZipArchiveInputStream  [METHOD]  getNextZipEntry  [RETURN_TYPE]  ZipArchiveEntry  [VARIABLES]  byte[]  buf  extraData  fileName  lfh  ZipLong  sig  boolean  closed  hasDataDescriptor  hasEFS  hitCentralDirectory  useUnicodeExtraFields  ZipEncoding  entryEncoding  zipEncoding  CRC32  crc  InputStream  in  inputStream  EOFException  e  ZipArchiveEntry  current  Inflater  inf  int  LFH_LEN  SHORT  WORD  bytesReadFromStream  extraLen  fileNameLen  generalPurposeFlag  lengthOfLastRead  off  offsetInBuffer  readBytesOfEntry  versionMadeBy  long  time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	current.setPlatform((  versionMadeBy  >>  ZipFile.BYTE_SHIFT)  &  zipFile.NIBLET_MASK);	  current.setPlatform((    versionMadeBy    >>    ZipFile.BYTE_SHIFT)&    ZipFile.NIBLET_MASK);    	non-compiled	[CE]  static  import  declarations  are  not  supported  in  -source  1.4	13	None	replace
