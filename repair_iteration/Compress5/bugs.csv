bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] boolean useUnicodeExtraFields) { [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, [BUGGY] boolean useUnicodeExtraFields) { [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	101	101	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, [BUGGY] [BUGGY] boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	101	101	1	add	
3	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final InputStream in; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	61	61	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final InputStream in; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	61	61	1	add	
5	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final Inflater inf = new Inflater(true); [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	62	62	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final Inflater inf = new Inflater(true); [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	62	62	1	add	
7	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final CRC32 crc = new CRC32(); [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	64	64	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final CRC32 crc = new CRC32(); [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	64	64	1	add	
9	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE]; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	66	66	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE]; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	66	66	1	add	
11	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private ZipArchiveEntry current = null; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	67	67	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private ZipArchiveEntry current = null; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	67	67	1	add	
13	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private ZipArchiveEntry current = null; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	68	68	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private ZipArchiveEntry current = null; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	68	68	1	add	
15	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean closed = false; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	69	69	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean closed = false; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	69	69	1	add	
17	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean hitCentralDirectory = false; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	70	70	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private boolean hitCentralDirectory = false; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	70	70	1	add	
19	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private int readBytesOfEntry = 0, offsetInBuffer = 0; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	71	71	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private int readBytesOfEntry = 0, offsetInBuffer = 0; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	71	71	1	add	
21	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private int bytesReadFromStream = 0; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	72	72	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private int bytesReadFromStream = 0; [CLASS] ZipArchiveInputStream  [VARIABLES] 	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	72	72	1	add	
23	[BUG] [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	102	102	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { [BUGGY] [BUGGY] zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	102	102	1	add	
25	[BUG] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	103	103	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); [BUGGY] [BUGGY] this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	103	103	1	add	
27	[BUG] [BUGGY] in = new PushbackInputStream(inputStream, buf.length); [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] in = new PushbackInputStream(inputStream, buf.length); [BUGGY] } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	104	104	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; [BUGGY] [BUGGY] in = new PushbackInputStream(inputStream, buf.length); } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	104	104	1	add	
29	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); [BUGGY] } [BUGGY]  [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	105	105	1	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) { zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); [BUGGY] [BUGGY] } [CLASS] ZipArchiveInputStream [METHOD] <init> [RETURN_TYPE] String,boolean)  InputStream inputStream String encoding boolean useUnicodeExtraFields [VARIABLES] byte[] buf boolean closed hasDataDescriptor hitCentralDirectory useUnicodeExtraFields ZipEncoding zipEncoding CRC32 crc InputStream in inputStream ZipArchiveEntry current Inflater inf String encoding int LFH_LEN SHORT WORD bytesReadFromStream lengthOfLastRead offsetInBuffer readBytesOfEntry  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	105	105	1	add	
31	[BUG] [BUGGY] if (closed || hitCentralDirectory) { [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { [BUGGY] if (closed || hitCentralDirectory) { [BUGGY] return null; } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	108	108	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { [BUGGY] [BUGGY] if (closed || hitCentralDirectory) { return null; } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	108	108	1	add	
33	[BUG] [BUGGY] if (current != null) { [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } [BUGGY] if (current != null) { [BUGGY] closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	111	111	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } [BUGGY] [BUGGY] if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	111	111	1	add	
35	[BUG] [BUGGY] closeEntry(); [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { [BUGGY] closeEntry(); [BUGGY] } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	112	112	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { [BUGGY] [BUGGY] closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	112	112	1	add	
37	[BUG] [BUGGY] byte[] lfh = new byte[LFH_LEN]; [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { closeEntry(); } [BUGGY] byte[] lfh = new byte[LFH_LEN]; [BUGGY] try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	114	114	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { closeEntry(); } [BUGGY] [BUGGY] byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	114	114	1	add	
39	[BUG] [BUGGY] readFully(lfh); [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { [BUGGY] readFully(lfh); [BUGGY] } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	116	116	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { [BUGGY] [BUGGY] readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	116	116	1	add	
41	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] return null; } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; [BUGGY] } [BUGGY] ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	119	119	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; [BUGGY] [BUGGY] } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	119	119	1	add	
43	[BUG] [BUGGY] ZipLong sig = new ZipLong(lfh); [FE] AssertionFailedError [CONTEXT] } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } [BUGGY] ZipLong sig = new ZipLong(lfh); [BUGGY] if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	120	120	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } [BUGGY] [BUGGY] ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	120	120	1	add	
45	[BUG] [BUGGY] if (sig.equals(ZipLong.CFH_SIG)) { [FE] AssertionFailedError [CONTEXT] if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); [BUGGY] if (sig.equals(ZipLong.CFH_SIG)) { [BUGGY] hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry();  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	121	121	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (current != null) { closeEntry(); } byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); [BUGGY] [BUGGY] if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry();  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	121	121	1	add	
47	[BUG] [BUGGY] if (!sig.equals(ZipLong.LFH_SIG)) { [FE] AssertionFailedError [CONTEXT] try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } [BUGGY] if (!sig.equals(ZipLong.LFH_SIG)) { [BUGGY] return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	125	125	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } [BUGGY] [BUGGY] if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	125	125	1	add	
49	[BUG] [BUGGY] int off = WORD; [FE] AssertionFailedError [CONTEXT] } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } [BUGGY] int off = WORD; [BUGGY] current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	129	129	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } [BUGGY] [BUGGY] int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	129	129	1	add	
51	[BUG] [BUGGY] current = new ZipArchiveEntry(); [FE] AssertionFailedError [CONTEXT] ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; [BUGGY] current = new ZipArchiveEntry(); [BUGGY]  int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	130	130	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; [BUGGY] [BUGGY] current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	130	130	1	add	
53	[BUG] [BUGGY] int versionMadeBy = ZipShort.getValue(lfh, off); [FE] AssertionFailedError [CONTEXT] hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); [BUGGY] int versionMadeBy = ZipShort.getValue(lfh, off); [BUGGY] off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	132	132	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] hitCentralDirectory = true; return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); [BUGGY] [BUGGY] int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	132	132	1	add	
55	[BUG] [BUGGY] off += SHORT; [FE] AssertionFailedError [CONTEXT] return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); [BUGGY] off += SHORT; [BUGGY] current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); [BUGGY] [BUGGY] off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	133	133	1	add	
57	[BUG] [BUGGY] current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)  & ZipFile.NIBLET_MASK); [FE] AssertionFailedError [CONTEXT] } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; [BUGGY] current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)       & ZipFile.NIBLET_MASK); [BUGGY] & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	134	135	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; [BUGGY] [BUGGY] current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)       & ZipFile.NIBLET_MASK); & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	134	135	1	add	
59	[BUG] [BUGGY] final int generalPurposeFlag = ZipShort.getValue(lfh, off); [FE] AssertionFailedError [CONTEXT] } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); [BUGGY] final int generalPurposeFlag = ZipShort.getValue(lfh, off); [BUGGY] final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	137	137	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); [BUGGY] [BUGGY] final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	137	137	1	add	
61	[BUG] [BUGGY] final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; [FE] AssertionFailedError [CONTEXT] int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); [BUGGY] final boolean hasEFS =   (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; [BUGGY] (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	138	139	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); [BUGGY] [BUGGY] final boolean hasEFS =   (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	138	139	1	add	
63	[BUG] [BUGGY] final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; [FE] AssertionFailedError [CONTEXT] current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; [BUGGY] final ZipEncoding entryEncoding =   hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; [BUGGY] hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	140	141	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; [BUGGY] [BUGGY] final ZipEncoding entryEncoding =   hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	140	141	1	add	
65	[BUG] [BUGGY] hasDataDescriptor = (generalPurposeFlag & 8) != 0; [FE] AssertionFailedError [CONTEXT] int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; [BUGGY] hasDataDescriptor = (generalPurposeFlag & 8) != 0; [BUGGY]  off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	142	142	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; [BUGGY] [BUGGY] hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	142	142	1	add	
67	[BUG] [BUGGY] off += SHORT; [FE] AssertionFailedError [CONTEXT] current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; [BUGGY] off += SHORT; [BUGGY]  current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	144	144	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; [BUGGY] [BUGGY] off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	144	144	1	add	
69	[BUG] [BUGGY] current.setMethod(ZipShort.getValue(lfh, off)); [FE] AssertionFailedError [CONTEXT] final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; [BUGGY] current.setMethod(ZipShort.getValue(lfh, off)); [BUGGY] off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	146	146	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; [BUGGY] [BUGGY] current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	146	146	1	add	
71	[BUG] [BUGGY] off += SHORT; [FE] AssertionFailedError [CONTEXT] final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); [BUGGY] off += SHORT; [BUGGY]  long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	147	147	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); [BUGGY] [BUGGY] off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	147	147	1	add	
73	[BUG] [BUGGY] long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); [FE] AssertionFailedError [CONTEXT] (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; [BUGGY] long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); [BUGGY] current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	149	149	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; [BUGGY] [BUGGY] long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD;  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	149	149	1	add	
75	[BUG] [BUGGY] current.setTime(time); [FE] AssertionFailedError [CONTEXT] final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); [BUGGY] current.setTime(time); [BUGGY] off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	150	150	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); [BUGGY] [BUGGY] current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	150	150	1	add	
77	[BUG] [BUGGY] off += WORD; [FE] AssertionFailedError [CONTEXT] hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); [BUGGY] off += WORD; [BUGGY]  if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	151	151	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); [BUGGY] [BUGGY] off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	151	151	1	add	
79	[BUG] [BUGGY] if (!hasDataDescriptor) { [FE] AssertionFailedError [CONTEXT] off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; [BUGGY] if (!hasDataDescriptor) { [BUGGY] current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	153	153	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; [BUGGY] [BUGGY] if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	153	153	1	add	
81	[BUG] [BUGGY] current.setCrc(ZipLong.getValue(lfh, off)); [FE] AssertionFailedError [CONTEXT] off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { [BUGGY] current.setCrc(ZipLong.getValue(lfh, off)); [BUGGY] off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	154	154	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { [BUGGY] [BUGGY] current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	154	154	1	add	
83	[BUG] [BUGGY] off += WORD; [FE] AssertionFailedError [CONTEXT] current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); [BUGGY] off += WORD; [BUGGY]  current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; }  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	155	155	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); [BUGGY] [BUGGY] off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; }  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	155	155	1	add	
85	[BUG] [BUGGY] current.setCompressedSize(ZipLong.getValue(lfh, off)); [FE] AssertionFailedError [CONTEXT] off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; [BUGGY] current.setCompressedSize(ZipLong.getValue(lfh, off)); [BUGGY] off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off);  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	157	157	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; [BUGGY] [BUGGY] current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off);  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	157	157	1	add	
87	[BUG] [BUGGY] off += WORD; [FE] AssertionFailedError [CONTEXT] long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); [BUGGY] off += WORD; [BUGGY]  current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	158	158	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); [BUGGY] [BUGGY] off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	158	158	1	add	
89	[BUG] [BUGGY] current.setSize(ZipLong.getValue(lfh, off)); [FE] AssertionFailedError [CONTEXT] current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; [BUGGY] current.setSize(ZipLong.getValue(lfh, off)); [BUGGY] off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; int extraLen = ZipShort.getValue(lfh, off); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	160	160	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; [BUGGY] [BUGGY] current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; int extraLen = ZipShort.getValue(lfh, off); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	160	160	1	add	
91	[BUG] [BUGGY] off += WORD; [FE] AssertionFailedError [CONTEXT] if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); [BUGGY] off += WORD; [BUGGY] } else { off += 3 * WORD; } [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	161	161	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); [BUGGY] [BUGGY] off += WORD; } else { off += 3 * WORD; } [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	161	161	1	add	
93	[BUG] [BUGGY] int fileNameLen = ZipShort.getValue(lfh, off); [FE] AssertionFailedError [CONTEXT] current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } [BUGGY] int fileNameLen = ZipShort.getValue(lfh, off); [BUGGY]  off += SHORT; int extraLen = ZipShort.getValue(lfh, off); off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName));  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	166	166	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } [BUGGY] [BUGGY] int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; int extraLen = ZipShort.getValue(lfh, off); off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName));  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	166	166	1	add	
95	[BUG] [BUGGY] off += SHORT; [FE] AssertionFailedError [CONTEXT] off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); [BUGGY] off += SHORT; [BUGGY]  int extraLen = ZipShort.getValue(lfh, off); off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName)); byte[] extraData = new byte[extraLen]; readFully(extraData); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	168	168	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); [BUGGY] [BUGGY] off += SHORT; int extraLen = ZipShort.getValue(lfh, off); off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName)); byte[] extraData = new byte[extraLen]; readFully(extraData); [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	168	168	1	add	
97	[BUG] [BUGGY] int extraLen = ZipShort.getValue(lfh, off); [FE] AssertionFailedError [CONTEXT] current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; [BUGGY] int extraLen = ZipShort.getValue(lfh, off); [BUGGY] off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName)); byte[] extraData = new byte[extraLen]; readFully(extraData); current.setExtra(extraData);  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	170	170	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] current.setSize(ZipLong.getValue(lfh, off)); off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; [BUGGY] [BUGGY] int extraLen = ZipShort.getValue(lfh, off); off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName)); byte[] extraData = new byte[extraLen]; readFully(extraData); current.setExtra(extraData);  [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	170	170	1	add	
99	[BUG] [BUGGY] off += SHORT; [FE] AssertionFailedError [CONTEXT] off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; int extraLen = ZipShort.getValue(lfh, off); [BUGGY] off += SHORT; [BUGGY]  byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName)); byte[] extraData = new byte[extraLen]; readFully(extraData); current.setExtra(extraData); if (!hasEFS && useUnicodeExtraFields) { [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	171	171	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] off += WORD; } else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; int extraLen = ZipShort.getValue(lfh, off); [BUGGY] [BUGGY] off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName)); byte[] extraData = new byte[extraLen]; readFully(extraData); current.setExtra(extraData); if (!hasEFS && useUnicodeExtraFields) { [CLASS] ZipArchiveInputStream [METHOD] getNextZipEntry [RETURN_TYPE] ZipArchiveEntry  [VARIABLES] byte[] buf extraData fileName lfh ZipLong sig boolean closed hasDataDescriptor hasEFS hitCentralDirectory useUnicodeExtraFields ZipEncoding entryEncoding zipEncoding CRC32 crc InputStream in inputStream EOFException e ZipArchiveEntry current Inflater inf int LFH_LEN SHORT WORD bytesReadFromStream extraLen fileNameLen generalPurposeFlag lengthOfLastRead off offsetInBuffer readBytesOfEntry versionMadeBy long time  	projects/Compress5/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java	1.0	171	171	1	add	
