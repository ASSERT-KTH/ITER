bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  lineno.getAbsolutePosition());	  int    charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
2	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getLineno());	  int    charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
3	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getCharno());	  int    charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
4	[BUG]  [BUGGY]  charno  =  position2charno(irNode,  lineno.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode,  lineno.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode,  lineno.getAbsolutePosition());	  int    charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition()  +  1);	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
6	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno  +  1);	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
7	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition()  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition()  +  1);	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
8	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition())+  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition())+  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition())+  1;	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
9	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition()  +  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition()  +  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition()  +  2);	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
10	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getAbsolutePosition()  +  1);	  int    charno    =    position2charno(lineno,    node.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
11	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getAbsolutePosition()  +  1);	  int    charno    =    position2charno(lineno,    node.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
12	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getAbsolutePosition()  +  1);	  int    charno    =    position2charno(lineno,    node.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
13	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getLineno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getLineno());	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
14	[BUG]  [BUGGY]  charno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  node.getLineno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  node.getLineno();	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
15	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getLineno());	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
16	[BUG]  [BUGGY]  charno  =  position2charno(node.getLineno(),  lineno);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getLineno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getLineno(),  lineno);	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
17	[BUG]  [BUGGY]  charno  =  position2charno(node.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getCharno());	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
18	[BUG]  [BUGGY]  irNode  =  position2charno(node.getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode  =  position2charno(node.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode  =  position2charno(node.getLineno());	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
19	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOrientation(),  lineno);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOrientation(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOrientation(),  lineno);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
20	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
21	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
22	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation(),  node);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
23	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
24	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  0);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
25	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLastChild());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLastChild());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLastChild());	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
26	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  charno  =  node.getCharno();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  node.getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  node.getCharno();	  int    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  int  charno  =  node.getCharno()  +  1;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getCharno()  +  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getCharno()  +  1;	  int    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  Integer  charno  =  node.getCharno();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  node.getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  node.getCharno();	  int    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
30	[BUG]  [BUGGY]  double  charno  =  node.getCharno();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  double  charno  =  node.getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	double  charno  =  node.getCharno();	  int    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  *  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition()  *  1);	  int    charno    =    position2charno(node.getAbsolutePosition()    *    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
32	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  /  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  /  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition()  /  1);	  int    charno    =    position2charno(node.getAbsolutePosition()    *    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
33	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition()  *  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition()  *  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition()  *  1);	  int    charno    =    position2charno(node.getAbsolutePosition()    *    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
34	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  *  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  *  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  *  1);	  int    charno    =    position2charno(node.getAbsolutePosition()    *    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
35	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition()  *  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition()  *  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getAbsolutePosition()  *  1);	  int    charno    =    position2charno(node.getAbsolutePosition()    *    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
36	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getCharno(),  lineno);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getCharno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getCharno(),  lineno);	  int    charno    =    position2charno(irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getLength());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getLength());	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getLength());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  lineno.getLength());	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getLength());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getLength());	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
40	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getLength()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getLength()  -  1);	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
41	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getLength()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getLength()  -  1);	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getLength());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getLength());	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
43	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLength()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLength()  -  1);	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
44	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getLength());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getLength());	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
45	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLength(),  lineno);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLength(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLength(),  lineno);	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
46	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getString());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getString());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getString());	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
47	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  +  1);	  int    charno    =    position2charno(irNode.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
48	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition())+  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition())+  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition())+  1;	  int    charno    =    position2charno(irNode.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
49	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  +  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  +  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition()  +  2);	  int    charno    =    position2charno(irNode.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
50	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  2);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  2);	  charno    =    position2charno(lineno.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
51	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  1);	  charno    =    position2charno(lineno.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
52	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  3);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  3);	  charno    =    position2charno(lineno.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
53	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  4);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  4);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  4);	  charno    =    position2charno(lineno.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
54	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  1);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  1);	  charno    =    position2charno(lineno.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
55	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  0);	  charno    =    position2charno(lineno.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
56	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  node.getCharno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  node.getCharno());	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
57	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  node.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  lineno,  node.getCharno());	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
58	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  lineno);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  lineno);	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
59	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  0);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  0);	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
60	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLineno(),  node.getCharno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLineno(),  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLineno(),  node.getCharno());	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
61	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno()  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  node.getCharno()  +  1);	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
62	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  0);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
63	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  1);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
64	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  3);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  3);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
65	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  2);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
66	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  4);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  4);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  4);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
67	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  0);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
68	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  0);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
69	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOrientation(),  -1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOrientation(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOrientation(),  -1);	  int    charno    =    position2charno(node.getOrientation(),    -1);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
70	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  -1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation(),  -1);	  int    charno    =    position2charno(node.getOrientation(),    -1);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
71	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  0);	  int    charno    =    position2charno(node.getOrientation(),    -1);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
72	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  2);	  int    charno    =    position2charno(node.getOrientation(),    -1);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
73	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  -1,  lineno);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  -1,  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  -1,  lineno);	  int    charno    =    position2charno(node.getOrientation(),    -1);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
74	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLength(),  lineno);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLength(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLength(),  lineno);	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLength(),  node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLength(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLength(),  node);	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
76	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
77	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength(),  lineno,  irNode);	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
78	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  irNode.setLineno(lineno  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno  +  1);	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
80	[BUG]  [BUGGY]  irNode.setLineno(lineno,  charno);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno,  charno);	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
81	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  0);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
82	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  1);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
83	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  2);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
84	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLineno(),  0);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLineno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLineno(),  0);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
85	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLineno(),  0);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
86	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  3);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  3);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
87	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode,  irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  irNode,  irNode);	  charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
88	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getLineno());	  charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
89	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getCharno());	  charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
90	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  0);	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
91	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
92	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
93	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode);	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
94	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  -1);	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
95	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  1);	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
96	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOperatorPosition(),  lineno);	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
97	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getOperatorPosition());	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getOperatorPosition());	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
99	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition()  -  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOperatorPosition()  -  1);	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
100	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition()  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOperatorPosition()  +  1);	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
101	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition()  +  lineno);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition()  +  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOperatorPosition()  +  lineno);	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
102	[BUG]  [BUGGY]  irNode.setLineno(lineno.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
103	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
104	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
105	[BUG]  [BUGGY]  irNode.setCharno(lineno.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(lineno.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(lineno.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
106	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLineno(),  lineno);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLineno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLineno(),  lineno);	  charno    =    position2charno(irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
107	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getLineno());	  charno    =    position2charno(irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getFirstChild().getLineno());	  charno    =    position2charno(irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLineno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLineno()  -  1);	  charno    =    position2charno(irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
110	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  1);	  int    charno    =    position2charno(node.getOperatorPosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
111	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  2);	  int    charno    =    position2charno(node.getOperatorPosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
112	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  3);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  3);	  int    charno    =    position2charno(node.getOperatorPosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
113	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition(),  1);	  int    charno    =    position2charno(node.getOperatorPosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
114	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  4);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  4);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  4);	  int    charno    =    position2charno(node.getOperatorPosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
115	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getAbsolutePosition()  -  1);	  int    charno    =    position2charno(node,    node.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
116	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno,  node.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno,  node.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno,  node.getAbsolutePosition()  -  1);	  int    charno    =    position2charno(node,    node.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
117	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getAbsolutePosition()  -  1);	  int    charno    =    position2charno(node,    node.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
118	[BUG]  [BUGGY]  int  charno  =  position2charno(position2charno(node.getAbsolutePosition()));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(position2charno(node.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(position2charno(node.getAbsolutePosition()));	  int    charno    =    position2charno(node.getAbsolutePosition()    +    2);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
119	[BUG]  [BUGGY]  int  charno  =  position2charno(Node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(Node.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(Node.getAbsolutePosition());	  int    charno    =    position2charno(node.getAbsolutePosition()    +    2);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
120	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  lineno);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  lineno);	  int    charno    =    position2charno(node.getLineno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
121	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getLineno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
122	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  irNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  irNode);	  int    charno    =    position2charno(node.getLineno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
123	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  node);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLineno(),  node);	  int    charno    =    position2charno(node.getLineno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
124	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
125	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
126	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
127	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  0);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
128	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  node.getCharno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  node.getCharno());	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
130	[BUG]  [BUGGY]  int  charno  =  node.getLineno()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLineno()  +  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLineno()  +  1;	  int    charno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  int  charno  =  node.getLineno()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLineno()  -  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLineno()  -  1;	  int    charno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
132	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation(),  0);	  int    charno    =    position2charno(lineno.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
133	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getOrientation());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getOrientation());	  int    charno    =    position2charno(lineno.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
134	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation(),  irNode);	  int    charno    =    position2charno(lineno.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
135	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  +  1);	  int    charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
136	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  lineno  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  lineno  +  1);	  int    charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
137	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
138	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  lineno);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
139	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
140	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  null);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  null);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
141	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getAbsolutePosition(),  lineno);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
142	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
143	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getLineno());	  int    charno    =    position2charno(lineno,    node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
144	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  irNode.getLineno());	  int    charno    =    position2charno(lineno,    node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
145	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getLineno());	  int    charno    =    position2charno(lineno,    node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
146	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getCharno());	  int    charno    =    position2charno(lineno,    node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
147	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getLineno(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getLineno(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getLineno(),  irNode.getCharno());	  int    charno    =    position2charno(lineno,    node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
148	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno.getLineno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno.getLineno());	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
149	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
150	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno.getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno.getLineno());	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
151	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getLineno(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getLineno(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getLineno(),  irNode.getCharno());	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
152	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  node.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  node.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  node.getLineno());	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
153	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  lineno);	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
154	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode);	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
155	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
156	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
157	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  node);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition(),  node);	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
158	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  0);	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
159	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLength()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLength()  -  1);	  int    charno    =    position2charno(lineno.getLength());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
160	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getLength());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getLength());	  int    charno    =    position2charno(lineno.getLength());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
161	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLength(),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLength(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLength(),  0);	  int    charno    =    position2charno(lineno.getLength());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
162	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLength()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLength()  +  1);	  int    charno    =    position2charno(lineno.getLength());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
163	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  -  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
164	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition()  -  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
165	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  lineno.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  lineno.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  lineno.getAbsolutePosition()  -  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
166	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getAbsolutePosition()  -  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
167	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
168	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  lineno.getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  lineno.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  lineno.getCharno());	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
169	[BUG]  [BUGGY]  int  charno  =  node.getLineno(),  irNode.getCharno();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLineno(),  irNode.getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLineno(),  irNode.getCharno();	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
170	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getOperatorPosition());	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
171	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getOperatorPosition());	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
172	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getOperatorPosition()  -  1);	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
173	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getOperatorPosition(),  irNode);	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
174	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOperatorPosition(),  irNode);	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
175	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLength()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLength()  +  1);	  int    charno    =    position2charno(node.getLength()    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
176	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLength()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLength()  -  1);	  int    charno    =    position2charno(node.getLength()    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
177	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
178	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getCharno(),  lineno);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getCharno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getCharno(),  lineno);	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
179	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  node);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getCharno(),  node);	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
180	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  lineno,  irNode);	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
181	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  2);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
182	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  3);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  3);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
183	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  4);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  4);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  4);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
184	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition())+  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition())+  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition())+  1;	  int    charno    =    position2charno(node.getAbsolutePosition())+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
185	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())+  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())+  2;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition())+  2;	  int    charno    =    position2charno(node.getAbsolutePosition())+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
186	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition())+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition())+  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getAbsolutePosition())+  1;	  int    charno    =    position2charno(node.getAbsolutePosition())+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
187	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())/  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())/  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition())/  1;	  int    charno    =    position2charno(node.getAbsolutePosition())+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
188	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())+  3;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())+  3;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition())+  3;	  int    charno    =    position2charno(node.getAbsolutePosition())+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
189	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
190	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(irNode.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
191	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  lineno);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(irNode.getLastChild().getLineno(),  lineno);	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
192	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
193	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
194	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  0);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
195	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
196	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getChildCount());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getChildCount());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getChildCount());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
197	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  -1);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
198	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOrientation(),  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOrientation(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOrientation(),  1);	  int    charno    =    position2charno(node.getOrientation(),    1);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
199	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation(),  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation(),  1);	  int    charno    =    position2charno(node.getOrientation(),    1);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
200	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  3);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  3);	  int    charno    =    position2charno(node.getOrientation(),    1);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
201	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  4);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  4);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  4);	  int    charno    =    position2charno(node.getOrientation(),    1);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
202	[BUG]  [BUGGY]  irNode.setString(sourceName);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setString(sourceName);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setString(sourceName);	  irNode.setString(sourceString);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
203	[BUG]  [BUGGY]  irNode.setSourceName(sourceString);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setSourceName(sourceString);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setSourceName(sourceString);	  irNode.setString(sourceString);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
204	[BUG]  [BUGGY]  irNode.setString(lineno);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setString(lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setString(lineno);	  irNode.setString(sourceString);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
205	[BUG]  [BUGGY]  irNode.setSourceString(sourceString);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setSourceString(sourceString);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setSourceString(sourceString);	  irNode.setString(sourceString);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
206	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOrientation()  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOrientation()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOrientation()  -  1);	  int    charno    =    position2charno(node.getOrientation()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
207	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation()  -  1);	  int    charno    =    position2charno(node.getOrientation()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
208	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOrientation()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOrientation()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOrientation()  -  1);	  int    charno    =    position2charno(node.getOrientation()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
209	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOrientation()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOrientation()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOrientation()  -  1);	  int    charno    =    position2charno(node.getOrientation()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
210	[BUG]  [BUGGY]  int  charno  =  position2charno(labelNode.getOrientation()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(labelNode.getOrientation()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(labelNode.getOrientation()  -  1);	  int    charno    =    position2charno(node.getOrientation()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
211	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  +  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
212	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition()  +  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
213	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  lineno.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  lineno.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  lineno.getAbsolutePosition()  +  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
214	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getAbsolutePosition()  +  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
215	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition()  *  1);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition()  *  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition()  *  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
216	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
217	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
218	[BUG]  [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
219	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
220	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOrientation(),  lineno);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOrientation(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOrientation(),  lineno);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
221	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno,  irNode);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
222	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getOrientation(),  node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getOrientation(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getOrientation(),  node);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
223	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getCharno());	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
224	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno,  0);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
225	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno,  irNode.getLineno());	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
226	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno()  -  1);	  int    charno    =    position2charno(node.getLineno()    -    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
227	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getLineno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getLineno()  -  1);	  int    charno    =    position2charno(node.getLineno()    -    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
228	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLineno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLineno()  -  1);	  int    charno    =    position2charno(node.getLineno()    -    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
229	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getString());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getString());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getString());	  int    charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
230	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getCharno());	  int    charno    =    position2charno(lineno,    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
231	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getCharno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getCharno());	  int    charno    =    position2charno(lineno,    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
232	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  lineno.getCharno());	  int    charno    =    position2charno(lineno,    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
233	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getOrientation());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getOrientation());	  int    charno    =    position2charno(lineno,    node.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
234	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getOrientation());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getOrientation());	  int    charno    =    position2charno(lineno,    node.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
235	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getOrientation());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  lineno.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  lineno.getOrientation());	  int    charno    =    position2charno(lineno,    node.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
236	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getOrientation());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getOrientation());	  int    charno    =    position2charno(lineno,    node.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
237	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno,  irNode.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno,  irNode.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno,  irNode.getAbsolutePosition());	  int    charno    =    position2charno(node,    lineno.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
238	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno,  node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno,  node.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno,  node.getAbsolutePosition());	  int    charno    =    position2charno(node,    lineno.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
239	[BUG]  [BUGGY]  charno  =  position2charno(node,  lineno,  irNode.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node,  lineno,  irNode.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node,  lineno,  irNode.getAbsolutePosition());	  int    charno    =    position2charno(node,    lineno.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
240	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOrientation()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOrientation()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOrientation()  +  1);	  int    charno    =    position2charno(node.getOrientation()    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
241	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOrientation()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOrientation()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOrientation()  +  1);	  int    charno    =    position2charno(node.getOrientation()    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
242	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation());	  int    charno    =    position2charno(node.getOrientation()    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
243	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation())+  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation())+  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation())+  1;	  int    charno    =    position2charno(node.getOrientation()    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
244	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getLineno();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild().getLineno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild().getLineno();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
245	[BUG]  [BUGGY]  Node  charno  =  node.getLastChild().getCharno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getLastChild().getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getLastChild().getCharno();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
246	[BUG]  [BUGGY]  Node  charno  =  irNode.getFirstChild().getCharno();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  irNode.getFirstChild().getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  irNode.getFirstChild().getCharno();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
247	[BUG]  [BUGGY]  Node  charno  =  lineno.getFirstChild().getCharno();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  lineno.getFirstChild().getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  lineno.getFirstChild().getCharno();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
248	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getString();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild().getString();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild().getString();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
249	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getInitialCharno();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild().getInitialCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild().getInitialCharno();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
250	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition()  -  1);	  int    charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
251	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getOperatorPosition());	  int    charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
252	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  -  1);	  int    charno    =    position2charno(irNode.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
253	[BUG]  [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	node.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
254	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
255	[BUG]  [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
256	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  else  {  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  else  {  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  else  {	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
257	[BUG]  [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  else  {  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  else  {  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  else  {	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
258	[BUG]  [BUGGY]  int  charno  =  node.getLength()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLength()  -  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLength()  -  1;	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
259	[BUG]  [BUGGY]  int  charno  =  node.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLength()  +  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLength()  +  1;	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
260	[BUG]  [BUGGY]  int  charno  =  node.getLength()  -  lineno;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLength()  -  lineno;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLength()  -  lineno;	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
261	[BUG]  [BUGGY]  int  charno  =  node.getLowerCase();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLowerCase();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLowerCase();	  int    charno    =    node.getOrientation();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
262	[BUG]  [BUGGY]  int  charno  =  node.getOrientation()  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getOrientation()  +  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getOrientation()  +  1;	  int    charno    =    node.getOrientation();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
263	[BUG]  [BUGGY]  charno  =  node.getOrientation();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  node.getOrientation();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  node.getOrientation();	  int    charno    =    node.getOrientation();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
264	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition()  -  1);	  int    charno    =    position2charno(node.getOperatorPosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
265	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition()  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOperatorPosition()  -  1);	  int    charno    =    position2charno(node.getOperatorPosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
266	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getLineno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
267	[BUG]  [BUGGY]  double  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  double  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	double  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getLineno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
268	[BUG]  [BUGGY]  irNode.setCharno(Lineno.toString(lineno));  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(Lineno.toString(lineno));  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(Lineno.toString(lineno));	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
269	[BUG]  [BUGGY]  irNode.setCharno(Lineno.valueOf(lineno));  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(Lineno.valueOf(lineno));  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(Lineno.valueOf(lineno));	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
270	[BUG]  [BUGGY]  Node  charno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getLineno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getLineno();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
271	[BUG]  [BUGGY]  Node  charno  =  lineno.getCharno();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  lineno.getCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  lineno.getCharno();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
272	[BUG]  [BUGGY]  Node  charno  =  node.getAstRootNode();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getAstRootNode();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getAstRootNode();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
273	[BUG]  [BUGGY]  Node  charno  =  node.getInitialCharno();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getInitialCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getInitialCharno();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
274	[BUG]  [BUGGY]  Node  charno  =  node.getCharno()  +  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getCharno()  +  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getCharno()  +  1;	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
275	[BUG]  [BUGGY]  Node  charno  =  node.getAstRoot();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getAstRoot();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getAstRoot();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
276	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLineno(),  irNode.getCharno());	  int    charno    =    position2charno(lineno.getLineno());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
277	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  irNode.getLastChild());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  irNode.getLastChild());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLineno(),  irNode.getLastChild());	  int    charno    =    position2charno(lineno.getLineno());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
278	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
279	[BUG]  [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  ==  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  ==  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
280	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
281	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
282	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode);	  charno    =    position2charno(lineno);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
283	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  0);	  charno    =    position2charno(lineno);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
284	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  -1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  -1);	  charno    =    position2charno(lineno);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
285	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getCharno());	  charno    =    position2charno(lineno);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
286	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getCharno()  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getCharno()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getCharno()  +  1);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
287	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getLineno()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  irNode.getLineno()  +  1);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
288	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  lineno);	  int    charno    =    position2charno(irNode,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
289	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  lineno,  node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  lineno,  node.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  lineno,  node.getAbsolutePosition());	  int    charno    =    position2charno(irNode,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
290	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  irNode.getAbsolutePosition());	  int    charno    =    position2charno(irNode,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
291	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getCharno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getCharno());	  charno    =    position2charno(irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
292	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getFirstChild().getCharno());	  charno    =    position2charno(irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
293	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getOrientation());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getOrientation());	  charno    =    position2charno(irNode.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
294	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getOrientation());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getOrientation());	  charno    =    position2charno(irNode.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
295	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOrientation()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOrientation()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOrientation()  +  1);	  charno    =    position2charno(irNode.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
296	[BUG]  [BUGGY]  charno  =  lineno  +  position2charno(irNode.getOrientation());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  lineno  +  position2charno(irNode.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  lineno  +  position2charno(irNode.getOrientation());	  charno    =    position2charno(irNode.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
297	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  lineno);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
298	[BUG]  [BUGGY]  irNode.setCharno(lineno  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(lineno  +  1);	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
299	[BUG]  [BUGGY]  irNode.setCharno(lineno,  charno);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(lineno,  charno);	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
300	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getLineno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getLineno());	  int    charno    =    position2charno(node,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
301	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getCharno(),  irNode.getLineno());	  int    charno    =    position2charno(lineno.getCharno());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
302	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getCharno(),  0);	  int    charno    =    position2charno(lineno.getCharno());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
303	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getAbsolutePosition(),  lineno);	  charno    =    position2charno(lineno.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
304	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  lineno,  irNode);	  charno    =    position2charno(lineno.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
305	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  -1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  -1);	  charno    =    position2charno(lineno.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
306	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getPosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getPosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getPosition(),  lineno);	  int    charno    =    position2charno(irNode.getPosition());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
307	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getPosition()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getPosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getPosition()  -  1);	  int    charno    =    position2charno(irNode.getPosition());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
308	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getPosition());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getPosition());	  int    charno    =    position2charno(irNode.getPosition());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
309	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getPosition()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getPosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getPosition()  +  1);	  int    charno    =    position2charno(irNode.getPosition());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
310	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getPosition());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getPosition());	  int    charno    =    position2charno(irNode.getPosition());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
311	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  0);	  int    charno    =    position2charno(node.getOperatorPosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
312	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition(),  0);	  int    charno    =    position2charno(node.getOperatorPosition(),    0);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
313	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  node);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
314	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition(),  node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getOperatorPosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getOperatorPosition(),  node);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
315	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  null);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  null);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
316	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode.getOperatorPosition(),  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode.getOperatorPosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode.getOperatorPosition(),  node);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
317	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition(),  irNode);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
318	[BUG]  [BUGGY]  charno  =  position2charno(irNode,  node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode,  node.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode,  node.getAbsolutePosition());	  charno    =    position2charno(lineno,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
319	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getCharno());	  charno    =    position2charno(lineno,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
320	[BUG]  [BUGGY]  charno  =  position2charno(node,  lineno.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node,  lineno.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node,  lineno.getAbsolutePosition());	  charno    =    position2charno(lineno,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
321	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getAbsolutePosition(),  irNode);	  charno    =    position2charno(lineno,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
322	[BUG]  [BUGGY]  charno  =  position2charno(node.getAbsolutePosition(),  lineno);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getAbsolutePosition(),  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getAbsolutePosition(),  lineno);	  charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
323	[BUG]  [BUGGY]  charno  =  position2charno(node.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getAbsolutePosition()  -  1);	  charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
324	[BUG]  [BUGGY]  charno  =  position2charno(node.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getAbsolutePosition()  +  1);	  charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
325	[BUG]  [BUGGY]  charno  =  position2charno(labelNode.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(labelNode.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(labelNode.getAbsolutePosition());	  charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
326	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  irNode);	  charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
327	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getPosition());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getPosition());	  charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
328	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  irNode.getAbsolutePosition()  -  1);	  int    charno    =    position2charno(lineno.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
329	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
330	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  node.getCharno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  node.getCharno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
331	[BUG]  [BUGGY]  double  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  double  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	double  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getCharno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
332	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition()  +  2);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition()  +  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition()  +  2);	  charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
333	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode.getCharno());	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
334	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  irNode);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
335	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  irNode);	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
336	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  lineno,  0);	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
337	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  lineno,  irNode.getCharno());	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
338	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())+  4;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition())+  4;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition())+  4;	  int    charno    =    position2charno(node.getAbsolutePosition())+    1;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
339	[BUG]  [BUGGY]  Integer  charno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  node.getLineno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  node.getLineno();	  int    charno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
340	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno()  +  1);	  int    charno    =    position2charno(node.getLineno()    -    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
341	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno()  -  1);	  int    charno    =    position2charno(node.getLineno()    -    1);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
342	[BUG]  [BUGGY]  charno  =  position2charno(node.getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getLineno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getLineno()  -  1);	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
343	[BUG]  [BUGGY]  charno  =  position2charno(node.getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getLineno()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getLineno()  +  1);	  charno    =    position2charno(node.getLineno());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
344	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getCharno(),  0);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getCharno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getCharno(),  0);	  int    charno    =    position2charno(lineno,    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
345	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getPosition());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getPosition());	  int    charno    =    position2charno(irNode.getPosition());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
346	[BUG]  [BUGGY]  irNode.setLineno(lineno,  irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno,  irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno,  irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
347	[BUG]  [BUGGY]  irNode.setLineno(lineno,  node.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno,  node.getFirstChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno,  node.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
348	[BUG]  [BUGGY]  charno  =  position2charno(lineno  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno  +  1);	  charno    =    position2charno(lineno);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
349	[BUG]  [BUGGY]  charno  =  position2charno(position2charno(node.getAbsolutePosition()));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(position2charno(node.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(position2charno(node.getAbsolutePosition()));	  charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
350	[BUG]  [BUGGY]  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
351	[BUG]  [BUGGY]  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node,  irNode.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node,  irNode.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
352	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  charno);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  charno);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
353	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno,  -1);	  int    charno    =    position2charno(node.getOperatorPosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
354	[BUG]  [BUGGY]  irNode.setCharno(sourceString);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(sourceString);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(sourceString);	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
355	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getCharno(),  -1);	  int    charno    =    position2charno(lineno.getCharno());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
356	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  irNode.getLastChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getCharno(),  irNode.getLastChild());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getCharno(),  irNode.getLastChild());	  int    charno    =    position2charno(lineno.getCharno());    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
357	[BUG]  [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  -1)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
358	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
359	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getOperatorPosition());	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
360	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getOperatorPosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getOperatorPosition()  +  1);	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
361	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition()  -  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition()  -  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition()  -  2);	  int    charno    =    position2charno(node.getOperatorPosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
362	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  -  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition()  -  2);	  int    charno    =    position2charno(irNode.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
363	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition())-  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition())-  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition())-  1;	  int    charno    =    position2charno(irNode.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
364	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno  +  1);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
365	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno,  -1);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
366	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition()  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition()  -  1  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition()  -  1  +  1);	  charno    =    position2charno(lineno.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
367	[BUG]  [BUGGY]  int  charno  =  node.getOrientation()  +  lineno;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getOrientation()  +  lineno;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getOrientation()  +  lineno;	  int    charno    =    node.getOrientation();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
368	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  irNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  irNode);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
369	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  -1);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
370	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOrientation(),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOrientation(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOrientation(),  0);	  int    charno    =    position2charno(lineno,    node.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
371	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOrientation(),  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOrientation(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOrientation(),  irNode);	  int    charno    =    position2charno(lineno,    node.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
372	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getCharno()  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild().getCharno()  +  1;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild().getCharno()  +  1;	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
373	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getInitializingCharno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild().getInitializingCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild().getInitializingCharno();	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
374	[BUG]  [BUGGY]  irNode.setLineno(lineno  }  );  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno  }  );  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno  }  );	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
375	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLastChild());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLastChild());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLastChild());	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
376	[BUG]  [BUGGY]  Node  charno  =  node.getCharno()  +  lineno;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getCharno()  +  lineno;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getCharno()  +  lineno;	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
377	[BUG]  [BUGGY]  Node  charno  =  node.getInitializingCharno();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getInitializingCharno();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getInitializingCharno();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
378	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLastChild());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLastChild());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLastChild());	  int    charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
379	[BUG]  [BUGGY]  int  charno  =  node.getCharno()  +  lineno;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getCharno()  +  lineno;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getCharno()  +  lineno;	  int    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
380	[BUG]  [BUGGY]  int  charno  =  position2charno(position2charno(irNode.getOperatorPosition(),  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(position2charno(irNode.getOperatorPosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(position2charno(irNode.getOperatorPosition(),  node);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
381	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  -1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  -1);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
382	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  +  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  +  2);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
383	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  node  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  node  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  node  +  1);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
384	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  +  3);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  +  3);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno  +  3);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
385	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  irNode);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
386	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  -1);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
387	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  *  2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  *  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition()  *  2);	  int    charno    =    position2charno(node.getAbsolutePosition()    *    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
388	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  lineno,  irNode);	  int    charno    =    position2charno(node.getLineno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
389	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  lineno,  0);	  int    charno    =    position2charno(node.getLineno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
390	[BUG]  [BUGGY]  charno  =  position2charno(node.getLength());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getLength());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getLength());	  int    charno    =    position2charno(node.getLength()    +    1);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
391	[BUG]  [BUGGY]  if(charno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
392	[BUG]  [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
393	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
394	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  -  1,  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition()  -  1,  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition()  -  1,  1);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
395	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition()  *  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition()  *  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition()  *  1);	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
396	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  node.getCharno()  -  1);	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
397	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  irNode);	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
398	[BUG]  [BUGGY]  int  charno  =  position2charno(position2charno(node.getOrientation())-  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(position2charno(node.getOrientation())-  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(position2charno(node.getOrientation())-  1);	  int    charno    =    position2charno(node.getOrientation()    -    1);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
399	[BUG]  [BUGGY]  int  charno  =  node.getLength()  +  lineno;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLength()  +  lineno;  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLength()  +  lineno;	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
400	[BUG]  [BUGGY]  Integer  charno  =  node.getLength();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  node.getLength();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  node.getLength();	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
401	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  lineno.getLength()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  lineno.getLength()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  lineno.getLength()  -  1);	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
402	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  irNode.getCharno());	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
403	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode.getLineno(),  node.getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode.getLineno(),  node.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode.getLineno(),  node.getCharno());	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
404	[BUG]  [BUGGY]  double  charno  =  position2charno(node.getLineno(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  double  charno  =  position2charno(node.getLineno(),  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	double  charno  =  position2charno(node.getLineno(),  irNode.getCharno());	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
405	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition()  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition()  +  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition()  +  2);	  int    charno    =    position2charno(lineno.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
406	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  dataArea,  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  dataArea,  irNode.getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  dataArea,  irNode.getCharno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
407	[BUG]  [BUGGY]  irNode.setLineno(lineno.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(lineno.getLastChild().getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(lineno.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
408	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  lineno);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  +  lineno);	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
409	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  charno);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno,  charno);	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
410	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition(),  lineno  +  1);	  charno    =    position2charno(irNode.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
411	[BUG]  [BUGGY]  irNode.setString(sourceString,  lineno);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setString(sourceString,  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setString(sourceString,  lineno);	  irNode.setString(sourceString);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
412	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  0);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength(),  lineno,  0);	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
413	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno  +  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength(),  lineno  +  1);	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
414	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
415	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setCharno(lineno);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
416	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setSourceString(sourceString);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setSourceString(sourceString);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setSourceString(sourceString);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
417	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength()  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength()  -  1  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength()  -  1  +  1);	  int    charno    =    position2charno(node.getLength()    -    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
418	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  4);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  4);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  4);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
419	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  0);	  int    charno    =    position2charno(node.getLineno(),    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
420	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setCharno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
421	[BUG]  [BUGGY]  if(charno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno!=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
422	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  -1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLineno(),  node.getCharno(),  -1);	  int    charno    =    position2charno(node.getLineno(),    node.getCharno());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
423	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  node.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  node.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  node.getAbsolutePosition(),  0);	  int    charno    =    position2charno(node,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
424	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getLength()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getLength()  +  1);	  int    charno    =    position2charno(lineno,    node.getLength());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
425	[BUG]  [BUGGY]  Node  charno  =  node.getAstRoot(Node.SOURCENAME_PROP);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getAstRoot(Node.SOURCENAME_PROP);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getAstRoot(Node.SOURCENAME_PROP);	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
426	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild();	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
427	[BUG]  [BUGGY]  Node  charno  =  node.getAstRoot(Compiler.this);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getAstRoot(Compiler.this);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getAstRoot(Compiler.this);	  Node    charno    =    node.getCharno();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
428	[BUG]  [BUGGY]  int  charno  =  position2charno(position2charno(node.getOperatorPosition())+  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(position2charno(node.getOperatorPosition())+  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(position2charno(node.getOperatorPosition())+  1);	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
429	[BUG]  [BUGGY]  charno  =  position2charno(node.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOperatorPosition());	  int    charno    =    position2charno(node.getOperatorPosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
430	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  charno);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  charno);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
431	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOperatorPosition(),  lineno  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOperatorPosition(),  lineno  -  1);	  int    charno    =    position2charno(node.getOperatorPosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
432	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getLength(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getLength(),  lineno,  -1);	  int    charno    =    position2charno(node.getLength(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
433	[BUG]  [BUGGY]  int  charno  =  position2charno(position2charno(node.getOrientation())+  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(position2charno(node.getOrientation())+  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(position2charno(node.getOrientation())+  1);	  int    charno    =    position2charno(node.getOrientation()    +    1);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
434	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode,  irNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode,  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getAbsolutePosition(),  irNode,  irNode);	  int    charno    =    position2charno(lineno.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
435	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
436	[BUG]  [BUGGY]  if(lineno  >=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
437	[BUG]  [BUGGY]  if(lineno  ==  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  ==  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  ==  -1)  {  irNode.setCharno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
438	[BUG]  [BUGGY]  if(lineno  >=  -1)  {  irNode.setCharno(lineno);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  -1)  {  irNode.setCharno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  -1)  {  irNode.setCharno(lineno);  }	  irNode.setCharno(lineno);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
439	[BUG]  [BUGGY]  Integer  charno  =  node.getOrientation();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  node.getOrientation();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  node.getOrientation();	  int    charno    =    node.getOrientation();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
440	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  dataArea,  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  dataArea,  irNode.getLineno());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  dataArea,  irNode.getLineno());	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
441	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getLineno()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  irNode.getLineno()  -  1);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    irNode.getLineno());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
442	[BUG]  [BUGGY]  charno  =  position2charno(position2charno(irNode.getAbsolutePosition()));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(position2charno(irNode.getAbsolutePosition()));  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(position2charno(irNode.getAbsolutePosition()));	  charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
443	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getLength()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getLength()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getLength()  +  1);	  charno    =    position2charno(irNode.getLength());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
444	[BUG]  [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  charno);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno.getAbsolutePosition(),  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno.getAbsolutePosition(),  charno);	  charno    =    position2charno(lineno.getAbsolutePosition(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
445	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getAbsolutePosition(),  0);	  charno    =    position2charno(lineno,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
446	[BUG]  [BUGGY]  int  charno  =  node.getSourceName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getSourceName();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getSourceName();	  int    charno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
447	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  charno);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getOrientation(),  lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getOrientation(),  lineno,  charno);	  int    charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
448	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLength(),  -1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLength(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLength(),  -1);	  int    charno    =    position2charno(lineno.getLength());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
449	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  irNode.getAbsolutePosition(),  0);	  charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
450	[BUG]  [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
451	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
452	[BUG]  [BUGGY]  if(charno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getLastChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getLastChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
453	[BUG]  [BUGGY]  double  charno  =  position2charno(node,  node.getAbsolutePosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  double  charno  =  position2charno(node,  node.getAbsolutePosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	double  charno  =  position2charno(node,  node.getAbsolutePosition(),  irNode);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
454	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  node);	  int    charno    =    position2charno(node,    node.getAbsolutePosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
455	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
456	[BUG]  [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  -1)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  -1)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
457	[BUG]  [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno!=  -1)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno!=  -1)  {  irNode.setLineno(lineno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
458	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  }  else  {  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  }  else  {  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(lineno);  }  else  {  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
459	[BUG]  [BUGGY]  int  charno  =  node.getChildCount();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getChildCount();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getChildCount();	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
460	[BUG]  [BUGGY]  int  charno  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  node.getLastChild();  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  node.getLastChild();	  int    charno    =    node.getLength();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
461	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getLineno(),  null);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getLineno(),  null);	  int    charno    =    position2charno(node.getLineno(),    irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
462	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  -1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getAbsolutePosition(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getAbsolutePosition(),  -1);	  int    charno    =    position2charno(irNode.getAbsolutePosition(),    1);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
463	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getOperatorPosition());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getOperatorPosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getOperatorPosition());	  charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
464	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  -1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getOperatorPosition(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getOperatorPosition(),  -1);	  int    charno    =    position2charno(lineno.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
465	[BUG]  [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.setLineno(lineno);  }  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.setLineno(lineno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.setLineno(lineno);  }	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
466	[BUG]  [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno!=  -1)  {  irNode.setCharno(charno);  }	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
467	[BUG]  [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.removeChild(charno);  }  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.removeChild(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.removeChild(charno);  }	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
468	[BUG]  [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.setSourceString(sourceString);  }  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.setSourceString(sourceString);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno!=  -1)  {  irNode.setCharno(charno);  }  else  {  irNode.setSourceString(sourceString);  }	  irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
469	[BUG]  [BUGGY]  if(lineno  >  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
470	[BUG]  [BUGGY]  if(lineno  >=  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  >=  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  >=  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
471	[BUG]  [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
472	[BUG]  [BUGGY]  if(lineno  <  0  ||  lineno  >  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(lineno  <  0  ||  lineno  >  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(lineno  <  0  ||  lineno  >  0)  {  irNode.setLineno(lineno);  irNode.setCharno(charno);  }	  irNode.setLineno(lineno);    irNode.setCharno(charno);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
473	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  lineno);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  lineno);	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
474	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  irNode.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  irNode.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  irNode.getAbsolutePosition());	  int    charno    =    position2charno(lineno,    irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
475	[BUG]  [BUGGY]  if(charno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  if(charno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	if(charno  ==  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }	  irNode.setLineno(irNode.getFirstChild().getLineno());    irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
476	[BUG]  [BUGGY]  charno  =  position2charno(lineno,  node.getOrientation());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(lineno,  node.getOrientation());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(lineno,  node.getOrientation());	  charno    =    position2charno(irNode.getOrientation());    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
477	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  -1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  -1);	  int    charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
478	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  dataArea);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode.getOperatorPosition(),  dataArea);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode.getOperatorPosition(),  dataArea);	  int    charno    =    position2charno(irNode.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
479	[BUG]  [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(irNode.getAbsolutePosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(irNode.getAbsolutePosition()  +  1);	  int    charno    =    position2charno(irNode.getAbsolutePosition()    +    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
480	[BUG]  [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node,  irNode.getAbsolutePosition()  -  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node,  irNode.getAbsolutePosition()  -  1);	  int    charno    =    position2charno(node,    node.getAbsolutePosition()    -    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
481	[BUG]  [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  charno);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(node.getOrientation(),  lineno,  charno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(node.getOrientation(),  lineno,  charno);	  charno    =    position2charno(node.getOrientation(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
482	[BUG]  [BUGGY]  Integer  charno  =  position2charno(node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Integer  charno  =  position2charno(node.getAbsolutePosition());  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Integer  charno  =  position2charno(node.getAbsolutePosition());	  int    charno    =    position2charno(node.getAbsolutePosition()    +    2);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
483	[BUG]  [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(irNode,  node.getAbsolutePosition(),  0);	  int    charno    =    position2charno(irNode,    node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
484	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  -1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno.getLineno(),  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno.getLineno(),  -1);	  int    charno    =    position2charno(lineno.getLineno());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
485	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  charno  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  charno  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  lineno,  charno  +  1);	  int    charno    =    position2charno(node.getAbsolutePosition(),    lineno    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
486	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  -1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(node.getCharno(),  lineno,  -1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(node.getCharno(),  lineno,  -1);	  int    charno    =    position2charno(node.getCharno(),    lineno);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
487	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition()  +  1);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOperatorPosition()  +  1);	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
488	[BUG]  [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition(),  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  int  charno  =  position2charno(lineno,  node.getOperatorPosition(),  0);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	int  charno  =  position2charno(lineno,  node.getOperatorPosition(),  0);	  int    charno    =    position2charno(lineno,    node.getOperatorPosition());    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
489	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  +  lineno);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  +  lineno);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition()  +  lineno);	  charno    =    position2charno(irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
490	[BUG]  [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  +  2);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  charno  =  position2charno(irNode.getAbsolutePosition()  +  2);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	charno  =  position2charno(irNode.getAbsolutePosition()  +  2);	  charno    =    position2charno(irNode.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
491	[BUG]  [BUGGY]  Node  charno  =  node.getFirstChild().getAstRoot(Node.SOURCENAME_PROP);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  Node  charno  =  node.getFirstChild().getAstRoot(Node.SOURCENAME_PROP);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	Node  charno  =  node.getFirstChild().getAstRoot(Node.SOURCENAME_PROP);	  Node    charno    =    node.getFirstChild().getCharno();    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
492	[BUG]  [BUGGY]  double  charno  =  position2charno(node.getOperatorPosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {    int  lineno  =  node.getLineno();  irNode.setLineno(lineno);      [BUGGY]  double  charno  =  position2charno(node.getOperatorPosition(),  irNode);  [BUGGY]      irNode.setCharno(charno);  }  }  return  irNode;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	223	223	1	replace	double  charno  =  position2charno(node.getOperatorPosition(),  irNode);	  int    charno    =    position2charno(node.getOperatorPosition(),    irNode);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
