bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  fileLevelJsDocBuilder,  jsDocInfo);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  fileOverviewInfo,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  fileOverviewInfo,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  fileOverviewInfo,  jsDocInfo);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  fileOverviewInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  fileOverviewInfo);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo,  fileOverviewInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo,  fileOverviewInfo);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  fileLevelJsDocBuilder);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  fileLevelJsDocBuilder);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.getSourceName());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.getSourceName());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo.getSourceName());	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  sourceString,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  sourceString,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  sourceString,  jsDocInfo);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  Node  irNode  =  jsDocInfo.transform(node);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  jsDocInfo.transform(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  jsDocInfo.transform(node);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  Node  irNode  =  node.transform(jsDocInfo.getSourceName());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(jsDocInfo.getSourceName());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(jsDocInfo.getSourceName());	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  Node  irNode  =  node.transform(jsDocInfo,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(jsDocInfo,  fileOverviewInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(jsDocInfo,  fileOverviewInfo);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  Node  irNode  =  node.transform(sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(sourceString);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(sourceString);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  Node  irNode  =  node.transform(jsDocInfo,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(jsDocInfo,  fileLevelJsDocBuilder);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(jsDocInfo,  fileLevelJsDocBuilder);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  Node  irNode  =  node.transform(sourceString,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(sourceString,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(sourceString,  jsDocInfo);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  Node  irNode  =  transformToken(node,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformToken(node,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformToken(node,  jsDocInfo);	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  Node  irNode  =  transformToken(jsDocInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformToken(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformToken(jsDocInfo);	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transformToken();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transformToken();	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transformToken(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transformToken(jsDocInfo);	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  Node  irNode  =  transformToken(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformToken(node,  fileLevelJsDocBuilder);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformToken(node,  fileLevelJsDocBuilder);	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node,  jsDocInfo);	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  Node  irNode  =  transformed(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node,  fileLevelJsDocBuilder);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node,  fileLevelJsDocBuilder);	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo.getCharno());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo.getCharno());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node,  jsDocInfo.getCharno());	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  jsDocInfo.setLineno(node.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  jsDocInfo.setLineno(node.getFirstChild().getLineno());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	jsDocInfo.setLineno(node.getFirstChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  irNode.setJSDocInfo(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  irNode.setJSDocInfo(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	irNode.setJSDocInfo(jsDocInfo);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  jsDocInfo.setLineno(node.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  jsDocInfo.setLineno(node.getLastChild().getLineno());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	jsDocInfo.setLineno(node.getLastChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  jsDocInfo.setSourceName(sourceString);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  jsDocInfo.setSourceName(sourceString);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	jsDocInfo.setSourceName(sourceString);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().transform(jsDocInfo);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getFirstChild().transform(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getFirstChild().transform(jsDocInfo);	  Node    irNode    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().transform(node);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getFirstChild().transform(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getFirstChild().transform(node);	  Node    irNode    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  Node  irNode  =  node.transform(jsDocInfo,  node);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(jsDocInfo,  node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(jsDocInfo,  node);	  Node    irNode    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  Node  irNode  =  node.transformAstNode(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transformAstNode(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transformAstNode(jsDocInfo);	  Node    irNode    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  Node  irNode  =  node.transform(node,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(node,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(node,  jsDocInfo);	  Node    irNode    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  Node  irNode  =  node.getParent();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getParent();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getParent();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getLastChild();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getLastChild();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  Node  irNode  =  node.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getNext()  +  1;  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getNext()  +  1;	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
36	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getImmediateParentNode();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  Node  irNode  =  node.getNext()  ||  jsDocInfo.getType()  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getNext()  ||  jsDocInfo.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getNext()  ||  jsDocInfo.getType()  ==  Token.EXPR_RESULT;	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  Node  irNode  =  node.translate(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.translate(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.translate(jsDocInfo);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
39	[BUG]  [BUGGY]  JSDocInfo  irNode  =  transform(node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  JSDocInfo  irNode  =  transform(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	JSDocInfo  irNode  =  transform(node);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
40	[BUG]  [BUGGY]  Node  irNode  =  transform(jsDocInfo,  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(jsDocInfo,  node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(jsDocInfo,  node);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformer(node,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformer(node,  jsDocInfo);	  Node    irNode    =    transformer(node);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  Node  irNode  =  node.transformTokens(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transformTokens(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transformTokens(jsDocInfo);	  Node    irNode    =    transformer(node);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  Node  irNode  =  transformer(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformer(node.getJSDocInfo());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformer(node.getJSDocInfo());	  Node    irNode    =    transformer(node);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  Node  irNode  =  transformToken(node.getFirstChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformToken(node.getFirstChild());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformToken(node.getFirstChild());	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  Node  irNode  =  transformed(node.getFirstChild());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node.getFirstChild());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node.getFirstChild());	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  Node  irNode  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getJSDocInfo();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getJSDocInfo();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
47	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformer(node,  fileLevelJsDocBuilder);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformer(node,  fileLevelJsDocBuilder);	  Node    irNode    =    transformer(node);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  Node  irNode  =  node.transform(transformTokenType(node));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(transformTokenType(node));  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(transformTokenType(node));	  Node    irNode    =    transformer(node);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo,  fileLevelJsDocBuilder);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo,  fileLevelJsDocBuilder);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  Node  irNode  =  node.transform(fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(fileLevelJsDocBuilder,  jsDocInfo);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  JsDocInfo  irNode  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  JsDocInfo  irNode  =  node.getJSDocInfo();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	JsDocInfo  irNode  =  node.getJSDocInfo();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  Node  irNode  =  node.removeFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.removeFirstChild();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.removeFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.getFirstChild().getNext();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.getFirstChild().getNext();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  Node  irNode  =(jsDocInfo!=  null)?  null  :  transform(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =(jsDocInfo!=  null)?  null  :  transform(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =(jsDocInfo!=  null)?  null  :  transform(jsDocInfo);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  Node  irNode  =(jsDocInfo  ==  null)?  null  :  transform(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =(jsDocInfo  ==  null)?  null  :  transform(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =(jsDocInfo  ==  null)?  null  :  transform(jsDocInfo);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  Node  irNode  =(jsDocInfo!=  null)?  node  :  transform(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =(jsDocInfo!=  null)?  node  :  transform(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =(jsDocInfo!=  null)?  node  :  transform(jsDocInfo);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getFirstChild());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node.getFirstChild());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node.getFirstChild());	  Node    irNode    =    transform(node);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
58	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.getParent());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.getParent());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo.getParent());	  Node    irNode    =    transform(node);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
59	[BUG]  [BUGGY]  Node  irNode  =  jsDocInfo.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  jsDocInfo.getNext();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  jsDocInfo.getNext();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
60	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node.getJSDocInfo());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node.getJSDocInfo());	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  Node  irNode  =  lookup(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  lookup(jsDocInfo);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  lookup(jsDocInfo);	  Node    irNode    =    transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  Node  irNode  =  jsDocInfo.transformToken(node);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  jsDocInfo.transformToken(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  jsDocInfo.transformToken(node);	  Node    irNode    =    transformToken(node);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  Node  irNode  =  jsDocInfo.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  jsDocInfo.getFirstChild();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  jsDocInfo.getFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  Node  irNode  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.cloneTree();  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.cloneTree();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	irNode.setLineno(jsDocInfo.getLineno());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  irNode.setLineno(node.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  irNode.setLineno(node.getFirstChild().getLineno());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	irNode.setLineno(node.getFirstChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  jsDocInfo.setLineno(node.getLastChild());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  jsDocInfo.setLineno(node.getLastChild());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	jsDocInfo.setLineno(node.getLastChild());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.cloneTree());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.cloneTree());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo.cloneTree());	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.sourceString);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.sourceString);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo.sourceString);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.sourceName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transform(node,  jsDocInfo.sourceName);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transform(node,  jsDocInfo.sourceName);	  Node    irNode    =    transform(node,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo.getParent());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo.getParent());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node,  jsDocInfo.getParent());	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
72	[BUG]  [BUGGY]  Node  irNode  =  transformed(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node.getJSDocInfo());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node.getJSDocInfo());	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
73	[BUG]  [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo.getLineno());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  transformed(node,  jsDocInfo.getLineno());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  transformed(node,  jsDocInfo.getLineno());	  Node    irNode    =    transformed(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
74	[BUG]  [BUGGY]  JSDocInfo  irNode  =  jsDocInfo.transform(node);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  JSDocInfo  irNode  =  jsDocInfo.transform(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	JSDocInfo  irNode  =  jsDocInfo.transform(node);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  Node  irNode  =  JSDocInfo.transform(node);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  JSDocInfo.transform(node);  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  JSDocInfo.transform(node);	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  Node  irNode  =  node.transform(jsDocInfo.cloneTree());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);    [BUGGY]  Node  irNode  =  node.transform(jsDocInfo.cloneTree());  [BUGGY]    if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	206	206	1	replace	Node  irNode  =  node.transform(jsDocInfo.cloneTree());	  Node    irNode    =    node.transform(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
