bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setCharno(irNode.getFirstChild().getCharno());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getFirstChild().getCharno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getLastChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  irNode.setJSDocInfo(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setJSDocInfo(jsDocInfo);  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setJSDocInfo(jsDocInfo);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getFirstChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setCharno(irNode.getLastChild().getCharno());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getLastChild().getCharno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getLineno());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getLastChild().getLineno());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
16	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
42	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.NAME)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.NAME)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  if(irNode  ==  null)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode  ==  null)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  irNode);  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  irNode);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setCharno(irNode.getLastChild().getString());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getLastChild().getString());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
65	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
70	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  irNode.removeChild(irNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.removeChild(irNode);  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.removeChild(irNode);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  irNode.setLineno(irNode.getLastChild().getString());  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getLastChild().getString());	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);    [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]    irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
