bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
2	[BUG]  [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
3	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.NAME)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
4	[BUG]  [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
5	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
6	[BUG]  [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
7	[BUG]  [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
8	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
9	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
10	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
11	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
12	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
13	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
14	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
15	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
16	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
17	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
18	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
19	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
20	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
21	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
22	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
23	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
24	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
25	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
26	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
27	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
28	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getFirstChild().getCharno());	  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  jsDocInfo.setCharno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setCharno(irNode.getFirstChild().getLineno());	  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
31	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
32	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
33	[BUG]  [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
34	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
37	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
38	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
39	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
40	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
41	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
42	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
43	[BUG]  [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
44	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.SCRIPT)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()!=  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()!=  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()!=  Token.SCRIPT)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
48	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
49	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
51	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(jsDocInfo.getFirstChild().getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(jsDocInfo.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
59	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
60	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
61	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getString());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getFirstChild().getString());	  irNode.setCharno(irNode.getFirstChild().getCharno());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
62	[BUG]  [BUGGY]  if(jsDocInfo  ==  null)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null)  {	  if(irNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
63	[BUG]  [BUGGY]  if(irNode!=  node  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  node  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  node  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
64	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.STRING)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
65	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()!=  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()!=  Token.STRING)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
66	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
67	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
68	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getLastChild().getLineno());	  irNode.setCharno(irNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
69	[BUG]  [BUGGY]  irNode.setString(irNode.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setString(irNode.getLastChild().getString());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setString(irNode.getLastChild().getString());	  irNode.setCharno(irNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
70	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
71	[BUG]  [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.NAME)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
72	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
73	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
74	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
75	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
76	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
77	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
78	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
79	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getFirstChild().getString());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
80	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
81	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
82	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
83	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
84	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
85	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
86	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
87	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(irNode.getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getLineno());	  irNode.setJSDocInfo(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
89	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
90	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
91	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
92	[BUG]  [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
93	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
94	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
95	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
96	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
97	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
98	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
99	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
100	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
101	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
102	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
103	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
104	[BUG]  [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
105	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getCharno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getLastChild().getCharno());	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
106	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getLineno(),  irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getLineno(),  irNode.getCharno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getLastChild().getLineno(),  irNode.getCharno());	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
107	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
108	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
109	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
110	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
111	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
112	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.NAME)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
113	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
114	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
115	[BUG]  [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
116	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||!irNode.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
117	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||!irNode.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
118	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||!irNode.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  jsDocInfo,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  jsDocInfo,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  jsDocInfo,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileOverviewInfo,  irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileOverviewInfo,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileOverviewInfo,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  node);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  node);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
125	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
126	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
127	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
128	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
129	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
130	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
131	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
132	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
133	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
134	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
135	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
136	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
137	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
138	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
139	[BUG]  [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
140	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
141	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
142	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
143	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
144	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
145	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
146	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
147	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
148	[BUG]  [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.STRING)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
149	[BUG]  [BUGGY]  irNode.addChildToBack(irNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.addChildToBack(irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.addChildToBack(irNode);	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
150	[BUG]  [BUGGY]  irNode.setChildreno(irNode.getFirstChild().getNext());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildreno(irNode.getFirstChild().getNext());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildreno(irNode.getFirstChild().getNext());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
151	[BUG]  [BUGGY]  irNode.setChildreno(irNode.getFirstChild().getString());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildreno(irNode.getFirstChild().getString());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildreno(irNode.getFirstChild().getString());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
152	[BUG]  [BUGGY]  irNode.addChildToFront(irNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.addChildToFront(irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.addChildToFront(irNode);	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
153	[BUG]  [BUGGY]  irNode.setChildreno(irNode.getFirstChild().getFirstChild().getNext());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildreno(irNode.getFirstChild().getFirstChild().getNext());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildreno(irNode.getFirstChild().getFirstChild().getNext());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
154	[BUG]  [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
155	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
156	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
157	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
158	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
159	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
160	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
161	[BUG]  [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
162	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  node,  fileLevelJsDocBuilder,  jsDocInfo);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  node);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  node);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  templateNode,  fileLevelJsDocBuilder,  jsDocInfo);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  sourceString);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  sourceString);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  sourceString);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  fileLevelJsDocBuilder,  jsDocInfo);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
168	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
169	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
170	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
171	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
172	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
173	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
174	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()!=  Token.BLOCK)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
175	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
176	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
177	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
178	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
179	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
180	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
181	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
182	[BUG]  [BUGGY]  if(irNode!=  node  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  node  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  node  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
183	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
184	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
185	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
186	[BUG]  [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
187	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
188	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
189	[BUG]  [BUGGY]  irNode.replaceChild(irNode,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.replaceChild(irNode,  jsDocInfo);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.replaceChild(irNode,  jsDocInfo);	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
190	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getLastChild());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getLastChild());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getLastChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
191	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getChildCount());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getChildCount());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getChildCount());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
192	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getLastChild());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getLastChild());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getFirstChild().getLastChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
193	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  sourceString,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  sourceString,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  sourceString,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString,  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
196	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
197	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.getType()!=  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  irNode.getType()!=  Token.FUNCTION)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
198	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
199	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||!irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
200	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString,  jsDocInfo);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  sourceString,  jsDocInfo);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  errorReporter);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  errorReporter);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  errorReporter);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
203	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
204	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
205	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
206	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
207	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  node.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  node.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  node.getType()  ==  Token.STRING)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
208	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(jsDocInfo.getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(jsDocInfo.getLineno());	  irNode.setJSDocInfo(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
209	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
210	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
211	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
212	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
213	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
214	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    &&    irNode.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
215	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  node.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  node.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  node.getType()  ==  Token.SCRIPT)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
216	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode  ==  null  &&  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode  ==  null  &&  irNode.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode  ==  null  &&  irNode.getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
217	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
218	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getFirstChild().getLineno()  +  1);	  jsDocInfo.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
219	[BUG]  [BUGGY]  if(irNode!=  node  &&  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  node  &&  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  node  &&  irNode.getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
220	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
221	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  node.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  node.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  node.getType()  ==  Token.NAME)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
222	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  ||  irNode.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||!irNode.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
223	[BUG]  [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setLineno(irNode.getLastChild().getLineno()  +  1);	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
224	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode  ==  null  &&  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode  ==  null  &&  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode  ==  null  &&  irNode.getType()  ==  Token.NAME)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
225	[BUG]  [BUGGY]  if(irNode!=  node  &&  irNode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  node  &&  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  node  &&  irNode.getType()  ==  Token.NAME)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
226	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.BLOCK  &&  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
227	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||!irNode.getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
228	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
229	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
230	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.STRING)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
231	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
232	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
233	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
234	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
235	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.hasChildren())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||!irNode.hasChildren())  {	  if(irNode    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
236	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.BLOCK    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
237	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||!irNode.hasChildren())  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||!irNode.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
238	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLastChild().getString()  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setCharno(irNode.getLastChild().getString()  +  1);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setCharno(irNode.getLastChild().getString()  +  1);	  irNode.setCharno(irNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
239	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.STRING  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
240	[BUG]  [BUGGY]  if(irNode!=  node  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  node  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  node  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode!=    null    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
241	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getFirstChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
242	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getNext());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getNext());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getFirstChild().getFirstChild().getNext());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
243	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getLastChild());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getLastChild());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getFirstChild().getFirstChild().getLastChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
244	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getFirstChild().getLastChild());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getFirstChild().getLastChild());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getFirstChild().getFirstChild().getFirstChild().getLastChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
245	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getFirstChild().getNext());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild().getFirstChild().getFirstChild().getNext());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setChildCount(irNode.getFirstChild().getFirstChild().getFirstChild().getNext());	  irNode.removeChild(irNode);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
246	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
247	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getLastChild().getType()  ==  Token.CATCH)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    ||    irNode.getFirstChild().getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
248	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
249	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  jsDocInfo!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  jsDocInfo!=  null)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  jsDocInfo!=  null)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
250	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.SCRIPT)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
251	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
252	[BUG]  [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  else  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  else  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  else  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }	  irNode.setJSDocInfo(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
253	[BUG]  [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }	  irNode.setJSDocInfo(jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  newBlock,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  newBlock,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  newBlock,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder,  irNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder,  irNode);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder,  irNode);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    irNode);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
256	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&!jsDocInfo.isSynthetic())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&!jsDocInfo.isSynthetic())  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&!jsDocInfo.isSynthetic())  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
257	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
258	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
259	[BUG]  [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild().  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild().  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild().	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
260	[BUG]  [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild().getLine  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild().getLine  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  }  else  {  irNode.setLineno(irNode.getFirstChild().getLine	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
261	[BUG]  [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.NAME)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.NAME)  {	  if(jsDocInfo    ==    null    &&    irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
262	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getLineno()  ==  -1)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
263	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
264	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
265	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
266	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
267	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.BLOCK)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
268	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||!irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||!irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||!irNode.getType()  ==  Token.BLOCK)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
269	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
270	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
271	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.STRING  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.STRING    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
272	[BUG]  [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
273	[BUG]  [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  &&  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getLastChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
274	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
275	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.FUNCTION    ||    irNode.getFirstChild().getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
276	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getString());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	irNode.setLineno(jsDocInfo.getLastChild().getString());	  irNode.setLineno(irNode.getLastChild().getString());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
277	[BUG]  [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode  ==  null  ||  jsDocInfo.getType()  ==  Token.VAR)  {	  if(jsDocInfo!=    null    ||    irNode.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  this);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  this);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  this);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  null);  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	NodeTraversal.traverse(compiler,  irNode,  fileLevelJsDocBuilder,  jsDocInfo,  null);	  NodeTraversal.traverse(compiler,    irNode,    fileLevelJsDocBuilder,    jsDocInfo);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
280	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
281	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
282	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.BLOCK)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
283	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getType()  ==  Token.CATCH)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.SCRIPT)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
284	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
285	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.CATCH)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
286	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
287	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.ASSIGN)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.BLOCK  ||  jsDocInfo.getType()  ==  Token.ASSIGN)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
288	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  ||  irNode.getType()!=  Token.STRING)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
289	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||!irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||!irNode.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||!irNode.getType()  ==  Token.STRING)  {	  if(jsDocInfo    ==    null    ||    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
290	[BUG]  [BUGGY]  if(jsDocInfo  ==  null  &&  irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo  ==  null  &&  irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo  ==  null  &&  irNode!=  null  &&  irNode.getType()  ==  Token.STRING)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
291	[BUG]  [BUGGY]  jsDocInfo.setCharno(irNode.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  jsDocInfo.setCharno(irNode.getLastChild().getLineno());  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	jsDocInfo.setCharno(irNode.getLastChild().getLineno());	  jsDocInfo.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
292	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
293	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  node.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  node.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  &&  node.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
294	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  ||  jsDocInfo.getType()  ==  Token.VAR)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.NAME  ||  jsDocInfo.getType()  ==  Token.VAR)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
295	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.SCRIPT  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
296	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.SCRIPT    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
297	[BUG]  [BUGGY]  if(jsDocInfo!=  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(jsDocInfo!=  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(jsDocInfo!=  null  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
298	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
299	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getLastChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
300	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.VAR  &&  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
301	[BUG]  [BUGGY]  if(irNode!=  node  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  node  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  node  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode    ==    null    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
302	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.FUNCTION)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
303	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.CATCH)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.CATCH)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.CATCH)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
304	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.SCRIPT)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
305	[BUG]  [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.ASSIGN)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.ASSIGN)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  jsDocInfo.getType()  ==  Token.STRING  ||  jsDocInfo.getType()  ==  Token.ASSIGN)  {	  if(irNode!=    null    &&    jsDocInfo.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
306	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {  JSDocInfo  jsDocInfo  =  handleJsDoc(node);  Node  irNode  =  justTransform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {  if  (irNode.getLineno()  ==  -1)  {  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	207	207	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.NAME  ||  jsDocInfo.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(jsDocInfo!=    null    &&    irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
