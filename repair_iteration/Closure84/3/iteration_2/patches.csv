bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Node(parent,  type).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  type).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  type).clonePropsFrom(child1);	  return    new    Node(child1,    type).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
2	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).clonePropsFrom(parent);	  return    new    Node(child1,    type).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
3	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(parent,  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePropsFrom(parent,  child1);	  return    new    Node(child1,    type).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
4	[BUG]  [BUGGY]  return  newNode(type,  child1,  parent);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(type,  child1,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(type,  child1,  parent);	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
5	[BUG]  [BUGGY]  return  newNode(type,  child1,  null,  false);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(type,  child1,  null,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(type,  child1,  null,  false);	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
6	[BUG]  [BUGGY]  return  newNode(child1,  type,  null);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(child1,  type,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(child1,  type,  null);	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
7	[BUG]  [BUGGY]  return  newNode(type,  child1,  this);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(type,  child1,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(type,  child1,  this);	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
8	[BUG]  [BUGGY]  return  newNode(type,  child1,  null,  config);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(type,  child1,  null,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(type,  child1,  null,  config);	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
9	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type),  this);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
10	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2),  this);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
11	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  this,  config);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  this,  config);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
12	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  this,  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  this,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  this,  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
13	[BUG]  [BUGGY]  return  new  Node(child1,  child1.cloneChildrenFrom(type));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.cloneChildrenFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.cloneChildrenFrom(type));	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
14	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child2));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneChildrenFrom(child2));	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
15	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child1),  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child1),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneChildrenFrom(child1),  false);	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
16	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child1),  this);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child1),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneChildrenFrom(child1),  this);	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
17	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child1),  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(child1),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneChildrenFrom(child1),  null);	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
18	[BUG]  [BUGGY]  return  new  Node(parent,  child1.cloneChildrenFrom(type));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1.cloneChildrenFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1.cloneChildrenFrom(type));	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  errorReporter);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  errorReporter);	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1));	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  errorReporter));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  errorReporter));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  errorReporter));	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  config));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  config));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  config));	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  config);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  config);	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
24	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  errorReporter);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  errorReporter);	  return    new    Node(child1,    child1).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	37	None	replace
25	[BUG]  [BUGGY]  return  new  Node(child1,  parent).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  parent).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  parent).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	37	None	replace
26	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  config);	  return    new    Node(child1,    child1).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	37	None	replace
27	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  parent,  false);	  return    new    Node(child1,    child1).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	37	None	replace
28	[BUG]  [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	37	None	replace
29	[BUG]  [BUGGY]  return  new  Node(type,  parent).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  parent).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  parent).clonePropsFrom(templateNode);	  return    new    Node(child1,    parent).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	58	None	replace
30	[BUG]  [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).clonePropsFrom(templateNode);	  return    new    Node(child1,    parent).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	58	None	replace
31	[BUG]  [BUGGY]  return  new  Node(child1,  parent).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  parent).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  parent).clonePropsFrom(type);	  return    new    Node(child1,    parent).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	58	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1),  this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1),  this);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  errorReporter);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  errorReporter);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  errorReporter),  this);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  errorReporter),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  errorReporter),  this);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  fileOverviewInfo);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  fileOverviewInfo);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  fileOverviewInfo);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  null);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  null);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
37	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2),  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    true);    	non-compiled	[CE]  ')'  expected	47	None	replace
38	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    true);    	non-compiled	[CE]  ')'  expected	47	None	replace
39	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2),  true);	  return    new    Node(type,    child1.clonePropsFrom(child1),    true);    	non-compiled	[CE]  ')'  expected	47	None	replace
40	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  true);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type),  true);	  return    new    Node(type,    child1.clonePropsFrom(child1),    true);    	non-compiled	[CE]  ')'  expected	47	None	replace
41	[BUG]  [BUGGY]  return  new  Node(type,  child2.clonePropsFrom(child1),  true);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2.clonePropsFrom(child1),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2.clonePropsFrom(child1),  true);	  return    new    Node(type,    child1.clonePropsFrom(child1),    true);    	non-compiled	[CE]  ')'  expected	47	None	replace
42	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child3),  true);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child3),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child3),  true);	  return    new    Node(type,    child1.clonePropsFrom(child1),    true);    	non-compiled	[CE]  ')'  expected	47	None	replace
43	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(config,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(config,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(config,  child1);	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
44	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parent,  config);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parent,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(parent,  config);	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
45	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(config,  child1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(config,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(config,  child1));	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
46	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type);	  return    new    Node(child1,    child2).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	33	None	replace
47	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child2).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child2).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	33	None	replace
48	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(type);	  return    new    Node(child1,    child2).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	33	None	replace
49	[BUG]  [BUGGY]  return  new  Node(type,  child1).getPropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).getPropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).getPropsFrom(this.bodyNode);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
50	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.bodyNode,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(this.bodyNode,  child1);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
51	[BUG]  [BUGGY]  return  new  Node(type,  child1).addPropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addPropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addPropsFrom(this.bodyNode);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
52	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.bodyNode  +  1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.bodyNode  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(this.bodyNode  +  1);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
53	[BUG]  [BUGGY]  return  new  Node(child,  child1).newNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child,  child1).newNode();	  return    new    Node(child,    type).newNode();    	non-compiled	[CE]  ')'  expected	67	None	replace
54	[BUG]  [BUGGY]  return  new  Node(type,  child).newNode();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child).newNode();	  return    new    Node(child,    type).newNode();    	non-compiled	[CE]  ')'  expected	67	None	replace
55	[BUG]  [BUGGY]  return  new  Node(type,  child2).newNode();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2).newNode();	  return    new    Node(child,    type).newNode();    	non-compiled	[CE]  ')'  expected	67	None	replace
56	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  child2);	  return    new    Node(child1,    child1).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	31	None	replace
57	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  child3);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  child3);	  return    new    Node(child1,    child1).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	31	None	replace
58	[BUG]  [BUGGY]  return  new  Node(child,  child1).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child,  child1).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child,  child1).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	31	None	replace
59	[BUG]  [BUGGY]  return  new  Node(child1,  child1.newNode());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.newNode());	  return    new    Node(type,    child1.newNode());    	non-compiled	[CE]  ')'  expected	8	None	replace
60	[BUG]  [BUGGY]  return  new  Node(type,  child1.newNode(),  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.newNode(),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.newNode(),  child1);	  return    new    Node(type,    child1.newNode());    	non-compiled	[CE]  ')'  expected	8	None	replace
61	[BUG]  [BUGGY]  return  new  Node(type,  child1.removeFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.removeFirstChild());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.removeFirstChild());	  return    new    Node(type,    child1.newNode());    	non-compiled	[CE]  ')'  expected	8	None	replace
62	[BUG]  [BUGGY]  return  new  Node(type,  child1.getNext());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.getNext());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.getNext());	  return    new    Node(type,    child1.newNode());    	non-compiled	[CE]  ')'  expected	8	None	replace
63	[BUG]  [BUGGY]  return  NodeUtil.newName(child1,  type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(child1,  type);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
64	[BUG]  [BUGGY]  return  NodeUtil.newName(parent,  type);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(parent,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(parent,  type);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
65	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child1,  false);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(type,  child1,  false);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
66	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child1,  config);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(type,  child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(type,  child1,  config);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
67	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child2);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child2);	  return    new    Node(type,    child1).clonePropsFrom(this.child1);    	non-compiled	[CE]  ')'  expected	52	None	replace
68	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child2,  this.child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child2,  this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child2,  this.child1);	  return    new    Node(type,    child1).clonePropsFrom(this.child1);    	non-compiled	[CE]  ')'  expected	52	None	replace
69	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1  -  1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1  -  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child1  -  1);	  return    new    Node(type,    child1).clonePropsFrom(this.child1);    	non-compiled	[CE]  ')'  expected	52	None	replace
70	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1,  parent);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child1,  parent);	  return    new    Node(type,    child1).clonePropsFrom(this.child1);    	non-compiled	[CE]  ')'  expected	52	None	replace
71	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1,  config);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child1,  config);	  return    new    Node(type,    child1).clonePropsFrom(this.child1);    	non-compiled	[CE]  ')'  expected	52	None	replace
72	[BUG]  [BUGGY]  return  new  Node(type,  child1,  true).clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  true).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  true).clone();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
73	[BUG]  [BUGGY]  return  new  Node(type,  child1,  true).newNode();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  true).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  true).newNode();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
74	[BUG]  [BUGGY]  return  new  Node(type,  child1,  null).clone();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  null).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  null).clone();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
75	[BUG]  [BUGGY]  return  new  Node(child1,  type,  false).clone();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  false).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  false).clone();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
76	[BUG]  [BUGGY]  return  new  Node(type,  child1,  false).newNode();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  false).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  false).newNode();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
77	[BUG]  [BUGGY]  return  new  Node(type,  parent.clonePropsFrom(child1),  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  parent.clonePropsFrom(child1),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  parent.clonePropsFrom(child1),  child1);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
78	[BUG]  [BUGGY]  return  new  Node(parent,  child1.clonePropsFrom(type),  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1.clonePropsFrom(type),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1.clonePropsFrom(type),  child1);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
79	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child1),  parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child1),  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(child1),  parent);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
80	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2),  parent);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
81	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  parent,  errorReporter);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  parent,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  parent,  errorReporter);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
82	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(parent),  child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(parent),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(parent),  child1);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
83	[BUG]  [BUGGY]  return  new  Node(parent,  child1.clonePropsFrom(child1),  type);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1.clonePropsFrom(child1),  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1.clonePropsFrom(child1),  type);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
84	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child2));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(child2));	  return    new    Node(type,    child1.clonePropsFrom(child2));    	non-compiled	[CE]  ')'  expected	44	None	replace
85	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1.clonePropsFrom(child2));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  child1.clonePropsFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  child1.clonePropsFrom(child2));	  return    new    Node(type,    child1.clonePropsFrom(child2));    	non-compiled	[CE]  ')'  expected	44	None	replace
86	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child2));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  child2));	  return    new    Node(type,    child1.clonePropsFrom(child2));    	non-compiled	[CE]  ')'  expected	44	None	replace
87	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).clonePropsFrom(this);	  return    new    Node(child1,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	24	None	replace
88	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(this,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePropsFrom(this,  child1);	  return    new    Node(child1,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	24	None	replace
89	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parentNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parentNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(parentNode);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
90	[BUG]  [BUGGY]  return  new  Node(parentNode,  child1).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parentNode,  child1).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parentNode,  child1).clonePropsFrom(child1);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
91	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(parentNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(parentNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePropsFrom(parentNode);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
92	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parentNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  parentNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  parentNode);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
93	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  config);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneFunctionsFrom(this,  config);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  	71	None	replace
94	[BUG]  [BUGGY]  return  new  Node(child1,  type).cloneFunctionsFrom(this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).cloneFunctionsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).cloneFunctionsFrom(this);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  	71	None	replace
95	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneFunctionsFrom(this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneFunctionsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneFunctionsFrom(this);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  	71	None	replace
96	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneFunctionsFrom(this,  parent);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  	71	None	replace
97	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneFunctionsFrom(this,  false);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  	71	None	replace
98	[BUG]  [BUGGY]  return  new  Node(child1,  type).cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).cloneTree();	  return    new    Node(type,    child1).cloneTree();    	non-compiled	[CE]  	86	None	replace
99	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneTree();	  return    new    Node(type,    child1).cloneTree();    	non-compiled	[CE]  	86	None	replace
100	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(parent,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(parent,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(parent,  parent);	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  	61	None	replace
101	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(parent,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(parent,  child1);	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  ')'  expected	61	None	replace
102	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.parent);	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  ')'  expected	61	None	replace
103	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(parent,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(parent,  false);	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  ')'  expected	61	None	replace
104	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  true);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  true);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
105	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  true);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
106	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  false,  child1);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  false,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  false,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
107	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  null);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  null);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
108	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parentNode,  false);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parentNode,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parentNode,  false);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  type);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  type);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  type);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  newNode);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  type,  newNode);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  type);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode,  type);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  errorReporter);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  errorReporter);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  config);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  config);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  this);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  this);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
116	[BUG]  [BUGGY]  newNode(type,  child1).newNode();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  newNode(type,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	newNode(type,  child1).newNode();	  return    new    Node(child1,    child1).newNode();    	non-compiled	[CE]  ')'  expected	6	None	replace
117	[BUG]  [BUGGY]  return  new  Node(parent,  child1).newNode();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).newNode();	  return    new    Node(child1,    child1).newNode();    	non-compiled	[CE]  ')'  expected	6	None	replace
118	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type),  null);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
119	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  null);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2),  null);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
120	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  transformDispatcher);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  transformDispatcher);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  transformDispatcher);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
121	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  null,  false);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  null,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  null,  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
122	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parent,  parent);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
123	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.fileOverviewInfo);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.fileOverviewInfo);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.fileOverviewInfo);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
124	[BUG]  [BUGGY]  return  new  Node(type,  this.parent).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  this.parent).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  this.parent).clonePropsFrom(child1);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
125	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  config);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parent,  config);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
126	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parent,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
127	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clone());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clone());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clone());	  return    new    Node(type,    child1.clone());    	non-compiled	[CE]  ')'  expected	41	None	replace
128	[BUG]  [BUGGY]  return  new  Node(child1,  type.clone());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type.clone());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type.clone());	  return    new    Node(type,    child1.clone());    	non-compiled	[CE]  ')'  expected	41	None	replace
129	[BUG]  [BUGGY]  return  new  Node(type,  child1.clone(),  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clone(),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clone(),  child1);	  return    new    Node(type,    child1.clone());    	non-compiled	[CE]  ')'  expected	41	None	replace
130	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1.clone());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  child1.clone());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  child1.clone());	  return    new    Node(type,    child1.clone());    	non-compiled	[CE]  ')'  expected	41	None	replace
131	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child2,  parent);	  return    new    Node(type,    child1).clonePropsFrom(child1,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
132	[BUG]  [BUGGY]  return  new  Node(type,  parent).clonePropsFrom(child1,  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  parent).clonePropsFrom(child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  parent).clonePropsFrom(child1,  child1);	  return    new    Node(type,    child1).clonePropsFrom(child1,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
133	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child1,  child1);	  return    new    Node(type,    child1).clonePropsFrom(child1,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
134	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  parent,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child1,  parent,  false);	  return    new    Node(type,    child1).clonePropsFrom(child1,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
135	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  false);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
136	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  null);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
137	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  true);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
138	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  0);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  0);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
139	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  parent);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  parent);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
140	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  child2);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
141	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this,  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this,  type);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
142	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  child3);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  child3);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
143	[BUG]  [BUGGY]  return  new  Node(type,  child2).clonePropsFrom(this,  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2).clonePropsFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2).clonePropsFrom(this,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
144	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this,  child1));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this,  child1));	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
145	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  child1,  config);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  child1,  config);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  newNode());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  type,  newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  type,  newNode());	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(),  type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(),  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(),  type);	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeReporter());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeReporter());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNodeReporter());	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(),  this);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(),  this);	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
150	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child2));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child2));	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
151	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  false);	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
152	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  config);	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
153	[BUG]  [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type,  child1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child2.clonePropsFrom(type,  child1));	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
154	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  errorReporter);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  errorReporter);	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
155	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  this);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child1),  this);	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
156	[BUG]  [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).clonePropsFrom(child1);	  return    new    Node(child1,    child1).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	60	None	replace
157	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).newNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).newNode();	  return    new    Node(child1,    type).newNode();    	non-compiled	[CE]  ')'  expected	5	None	replace
158	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removeChild(type);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removeChild(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removeChild(type);	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
159	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeChild(child2);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeChild(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeChild(child2);	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
160	[BUG]  [BUGGY]  return  new  Node(type,  child1).addChildToFront(child1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addChildToFront(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addChildToFront(child1);	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
161	[BUG]  [BUGGY]  return  new  Node(type,  child1).getChildCount();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).getChildCount();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).getChildCount();	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
162	[BUG]  [BUGGY]  return  new  Node(type,  child1).addChildToBack(child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addChildToBack(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addChildToBack(child1);	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
163	[BUG]  [BUGGY]  return  new  Node(type,  child1).replaceChild(child1,  '_');  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).replaceChild(child1,  '_');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).replaceChild(child1,  '_');	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
164	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child2);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(child2);	  return    new    Node(type,    child1).cloneParentsFrom(child1);    	non-compiled	[CE]  ')'  expected	66	None	replace
165	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child1,  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child1,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(child1,  parent);	  return    new    Node(type,    child1).cloneParentsFrom(child1);    	non-compiled	[CE]  ')'  expected	66	None	replace
166	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child1,  false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(child1,  false);	  return    new    Node(type,    child1).cloneParentsFrom(child1);    	non-compiled	[CE]  ')'  expected	66	None	replace
167	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneParentsFrom(child1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneParentsFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneParentsFrom(child1));	  return    new    Node(type,    child1).cloneParentsFrom(child1);    	non-compiled	[CE]  ')'  expected	66	None	replace
168	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  templateNode,  errorReporter);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  templateNode,  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  templateNode,  errorReporter);	  return    new    Node(child1,    child1).clonePropsFrom(type,    templateNode);    	non-compiled	[CE]  ')'  expected	53	None	replace
169	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child3));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(child3));	  return    new    Node(type,    child1.clonePropsFrom(child3));    	non-compiled	[CE]  ')'  expected	63	None	replace
170	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1.clonePropsFrom(child3));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  child1.clonePropsFrom(child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  child1.clonePropsFrom(child3));	  return    new    Node(type,    child1.clonePropsFrom(child3));    	non-compiled	[CE]  ')'  expected	63	None	replace
171	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child1));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(child1));	  return    new    Node(type,    child1.clonePropsFrom(child3));    	non-compiled	[CE]  ')'  expected	63	None	replace
172	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(templateNode,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(templateNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(templateNode,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    type);    	non-compiled	[CE]  ')'  expected	21	None	replace
173	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(templateNode,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(templateNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePropsFrom(templateNode,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    type);    	non-compiled	[CE]  ')'  expected	21	None	replace
174	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1,  child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(child1,  child2);	  return    new    Node(type,    child1).removePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	28	None	replace
175	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(child2);	  return    new    Node(type,    child1).removePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	28	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1).traverse(this);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1).traverse(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1).traverse(this);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  this).traverse(this);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  this).traverse(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  this).traverse(this);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  errorReporter).traverse(this);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  errorReporter).traverse(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  this,  errorReporter).traverse(this);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(this,  child1);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  this).traverse(this,  child1);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
181	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type),  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    false);    	non-compiled	[CE]  ')'  expected	45	None	replace
182	[BUG]  [BUGGY]  return  new  Node(type,  child2.clonePropsFrom(child1),  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2.clonePropsFrom(child1),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2.clonePropsFrom(child1),  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    false);    	non-compiled	[CE]  ')'  expected	45	None	replace
183	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  false));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  false));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  false));	  return    new    Node(type,    child1.clonePropsFrom(child1),    false);    	non-compiled	[CE]  ')'  expected	45	None	replace
184	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child3),  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child3),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child3),  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    false);    	non-compiled	[CE]  ')'  expected	45	None	replace
185	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(config,  this.bodyNode);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(config,  this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(config,  this.bodyNode);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  ')'  expected	18	None	replace
186	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.config);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.config);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  ')'  expected	18	None	replace
187	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  parent);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  parent);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  ')'  expected	18	None	replace
188	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parentNode,  config);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parentNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parentNode,  config);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  ')'  expected	18	None	replace
189	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  config);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  config);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  ')'  expected	18	None	replace
190	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).clonePropsFrom(child1);	  return    new    Node(child1,    type).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	59	None	replace
191	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(child2);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePropsFrom(child2);	  return    new    Node(child1,    type).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	59	None	replace
192	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  config,  parent);	  return    new    Node(type,    child1).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	25	None	replace
193	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this,  config);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this,  config);	  return    new    Node(type,    child1).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	25	None	replace
194	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  parent);	  return    new    Node(type,    child1).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	25	None	replace
195	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  config,  null);	  return    new    Node(type,    child1).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	25	None	replace
196	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(child1,  type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(child1,  type);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
197	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(type,  child1,  false);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
198	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  config);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(type,  child1,  config);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
199	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  child2);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(type,  child2);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
200	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  null);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(type,  child1,  null);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
201	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  true);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child1,  true);	  return    new    Node(type,    child1).clonePropsFrom(child1,    false);    	non-compiled	[CE]  ')'  expected	35	None	replace
202	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child2,  false);	  return    new    Node(type,    child1).clonePropsFrom(child1,    false);    	non-compiled	[CE]  ')'  expected	35	None	replace
203	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parent,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(parent,  false);	  return    new    Node(type,    child1).clonePropsFrom(child1,    false);    	non-compiled	[CE]  ')'  expected	35	None	replace
204	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  true);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child2,  true);	  return    new    Node(type,    child1).clonePropsFrom(child1,    false);    	non-compiled	[CE]  ')'  expected	35	None	replace
205	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  true);	  return    new    Node(type,    child1).clonePropsFrom(child1,    false);    	non-compiled	[CE]  ')'  expected	35	None	replace
206	[BUG]  [BUGGY]  return  NodeUtil.newNode(child1,  type);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(child1,  type);	  return    NodeUtil.newNumber(type,    child1);    	non-compiled	[CE]  ')'  expected	11	None	replace
207	[BUG]  [BUGGY]  return  NodeUtil.newNumber(type,  child2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNumber(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNumber(type,  child2);	  return    NodeUtil.newNumber(type,    child1);    	non-compiled	[CE]  ')'  expected	11	None	replace
208	[BUG]  [BUGGY]  return  NodeUtil.newNumber(type,  child1,  0);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNumber(type,  child1,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNumber(type,  child1,  0);	  return    NodeUtil.newNumber(type,    child1);    	non-compiled	[CE]  ')'  expected	11	None	replace
209	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removeChildrenFrom(type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removeChildrenFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removeChildrenFrom(type);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
210	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeChildrenFrom(child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeChildrenFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeChildrenFrom(child2);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
211	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeChildrenFrom(parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeChildrenFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeChildrenFrom(parent);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
212	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  child2);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child1,  child2);	  return    new    Node(type,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	34	None	replace
213	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(child2);	  return    new    Node(type,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	34	None	replace
214	[BUG]  [BUGGY]  return  NodeUtil.newString(child1,  type);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newString(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newString(child1,  type);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
215	[BUG]  [BUGGY]  return  NodeUtil.newString(parent,  type,  child1);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newString(parent,  type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newString(parent,  type,  child1);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
216	[BUG]  [BUGGY]  return  NodeUtil.newString(type,  child1,  false);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newString(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newString(type,  child1,  false);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
217	[BUG]  [BUGGY]  return  NodeUtil.newString(type,  child2);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newString(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newString(type,  child2);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  this);	  NodeTraversal.traverse(compiler,    newNode(type),    this);    	non-compiled	[CE]  ')'  expected	82	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type),  this);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  type),  this);	  NodeTraversal.traverse(compiler,    newNode(type),    this);    	non-compiled	[CE]  ')'  expected	82	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1),  this);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(child1),  this);	  NodeTraversal.traverse(compiler,    newNode(type),    this);    	non-compiled	[CE]  ')'  expected	82	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type),  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type),  child1);	  NodeTraversal.traverse(compiler,    newNode(type),    this);    	non-compiled	[CE]  ')'  expected	82	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type),  child1,  this);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type),  child1,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type),  child1,  this);	  NodeTraversal.traverse(compiler,    newNode(type),    this);    	non-compiled	[CE]  ')'  expected	82	None	replace
223	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePathFrom(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePathFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePathFrom(this);	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
224	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePathFrom(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePathFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePathFrom(this);	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
225	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this,  config);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePathFrom(this,  config);	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
226	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePathFrom(this));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePathFrom(this));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePathFrom(this));	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
227	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePathFrom(this,  parent);	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
228	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parent,  child2);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(parent,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(parent,  child2);	  return    new    Node(type,    child1).clonePropsFrom(parent,    child1);    	non-compiled	[CE]  ')'  expected	3	None	replace
229	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(false,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(false,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(false,  child1);	  return    new    Node(type,    child1).clonePropsFrom(parent,    child1);    	non-compiled	[CE]  ')'  expected	3	None	replace
230	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(parent,  type);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(parent,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(parent,  type);	  return    new    Node(type,    child1).clonePropsFrom(parent,    child1);    	non-compiled	[CE]  ')'  expected	3	None	replace
231	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(parent,  child1));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(parent,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(parent,  child1));	  return    new    Node(type,    child1).clonePropsFrom(parent,    child1);    	non-compiled	[CE]  ')'  expected	3	None	replace
232	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child2);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
233	[BUG]  [BUGGY]  return  new  Node(type,  child2).clonePropsFrom(this.bodyNode,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2).clonePropsFrom(this.bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2).clonePropsFrom(this.bodyNode,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
234	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child3);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child3);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
235	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child1,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child1,  false);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
236	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  child1));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  child1));	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
237	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child1,  config);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  child1,  config);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
238	[BUG]  [BUGGY]  return  new  Node(parent,  child1).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).clone();	  return    new    Node(child1,    child1).clone();    	non-compiled	[CE]  ')'  expected	49	None	replace
239	[BUG]  [BUGGY]  newNode(type,  child1).clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  newNode(type,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	newNode(type,  child1).clone();	  return    new    Node(child1,    child1).clone();    	non-compiled	[CE]  ')'  expected	49	None	replace
240	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(type,  child1,  false);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
241	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  config);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(type,  child1,  config);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
242	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent,  type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(parent,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(parent,  type);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
243	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  null);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(type,  child1,  null);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
244	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  parent);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(type,  child1,  parent);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
245	[BUG]  [BUGGY]  return  new  Node(child1,  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type);	  return    new    Node(type,    child1);    	non-compiled	[CE]  ')'  expected	7	None	replace
246	[BUG]  [BUGGY]  return  new  Node(type,  child1,  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  config);	  return    new    Node(type,    child1);    	non-compiled	[CE]  ')'  expected	7	None	replace
247	[BUG]  [BUGGY]  return  new  Node(type,  child1,  false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  false);	  return    new    Node(type,    child1);    	non-compiled	[CE]  ')'  expected	7	None	replace
248	[BUG]  [BUGGY]  return  new  Node(type,  child1,  true);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  true);	  return    new    Node(type,    child1);    	non-compiled	[CE]  ')'  expected	7	None	replace
249	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    child1);    	non-compiled	[CE]  ')'  expected	78	None	replace
250	[BUG]  [BUGGY]  return  new  Node(child1,  child).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    child1);    	non-compiled	[CE]  ')'  expected	78	None	replace
251	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1.getType());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1.getType());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(child1.getType());	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
252	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child2  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child2  -  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(child2  -  1);	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
253	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1.getLastChild());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(child1.getLastChild());	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
254	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1  <  <  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1  <  <  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(child1  <  <  1);	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
255	[BUG]  [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1  -  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addPropsFrom(child1  -  1);	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  	30	None	replace
256	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  child1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(type,  child1);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  	72	None	replace
257	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(type,  parent);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  	72	None	replace
258	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(type,  false);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  	72	None	replace
259	[BUG]  [BUGGY]  return  new  Node(child1,  child1.cloneParentsFrom(type,  child1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.cloneParentsFrom(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.cloneParentsFrom(type,  child1));	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  	72	None	replace
260	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  config);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(type,  config);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  	72	None	replace
261	[BUG]  [BUGGY]  return  Node.newNumber(type,  child1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newNumber(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newNumber(type,  child1);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  	12	None	replace
262	[BUG]  [BUGGY]  return  Node.newNode(type,  child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newNode(type,  child1);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
263	[BUG]  [BUGGY]  return  Node.newString(type,  child2);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newString(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newString(type,  child2);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
264	[BUG]  [BUGGY]  return  Node.newBlock(type,  child1);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newBlock(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newBlock(type,  child1);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
265	[BUG]  [BUGGY]  return  Node.newString(type,  child1,  false);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newString(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newString(type,  child1,  false);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
266	[BUG]  [BUGGY]  return  Node.newString(type,  child1,  0);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newString(type,  child1,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newString(type,  child1,  0);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
267	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this));	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
268	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(this);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(this);	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
269	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this,  config);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this,  config);	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
270	[BUG]  [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(this,  child1.clonePropsFrom(type);	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
271	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this,  false);	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
272	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).clone();	  return    new    Node(child1,    type).clone();    	non-compiled	[CE]  ')'  expected	39	None	replace
273	[BUG]  [BUGGY]  return  new  Node(parent,  type).clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  type).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  type).clone();	  return    new    Node(child1,    type).clone();    	non-compiled	[CE]  ')'  expected	39	None	replace
274	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(type,  child1);	  return    new    Node(child1,    child1).removePropsFrom(type);    	non-compiled	[CE]  ')'  expected	27	None	replace
275	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(type,  parent);	  return    new    Node(child1,    child1).removePropsFrom(type);    	non-compiled	[CE]  ')'  expected	27	None	replace
276	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(type,  config);	  return    new    Node(child1,    child1).removePropsFrom(type);    	non-compiled	[CE]  ')'  expected	27	None	replace
277	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(type,  type);	  return    new    Node(child1,    child1).removePropsFrom(type);    	non-compiled	[CE]  ')'  expected	27	None	replace
278	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(true);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(true);	  return    new    Node(type,    child1).clonePropsFrom(false);    	non-compiled	[CE]  ')'  expected	2	None	replace
279	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(true);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(true);	  return    new    Node(type,    child1).clonePropsFrom(false);    	non-compiled	[CE]  ')'  expected	2	None	replace
280	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(false);	  return    new    Node(type,    child1).clonePropsFrom(false);    	non-compiled	[CE]  ')'  expected	2	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  true));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  true));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  true));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    false));    	non-compiled	[CE]  ')'  expected	83	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  false);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  false);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    false));    	non-compiled	[CE]  ')'  expected	83	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  errorReporter);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  errorReporter);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    false));    	non-compiled	[CE]  ')'  expected	83	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  this);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  this);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    false));    	non-compiled	[CE]  ')'  expected	83	None	replace
285	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this,  config);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
286	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(this);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
287	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this,  parent);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
288	[BUG]  [BUGGY]  return  new  Node(child1,  type).cloneParentsFrom(this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).cloneParentsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).cloneParentsFrom(this);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
289	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  this);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this,  this);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
290	[BUG]  [BUGGY]  return  this.transformDispatcher.newNode(type,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  this.transformDispatcher.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  this.transformDispatcher.newNode(type,  child1);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
291	[BUG]  [BUGGY]  return  child1.newNode(type,  transformDispatcher);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  child1.newNode(type,  transformDispatcher);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  child1.newNode(type,  transformDispatcher);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
292	[BUG]  [BUGGY]  return  parentDispatcher.newNode(type,  child1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  parentDispatcher.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  parentDispatcher.newNode(type,  child1);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
293	[BUG]  [BUGGY]  return  transformDispatcher.newNode(type,  child1,  false);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  transformDispatcher.newNode(type,  child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  transformDispatcher.newNode(type,  child1,  false);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
294	[BUG]  [BUGGY]  return  transformDispatcher.newNode(type,  child1,  null);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  transformDispatcher.newNode(type,  child1,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  transformDispatcher.newNode(type,  child1,  null);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
295	[BUG]  [BUGGY]  return  parent.newNode(type,  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  parent.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  parent.newNode(type,  child1);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
296	[BUG]  [BUGGY]  return  new  Node(child1,  child1).getPropsFrom(type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).getPropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).getPropsFrom(type);	  return    new    Node(type,    child1).getPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	29	None	replace
297	[BUG]  [BUGGY]  return  new  Node(type,  child1).getPropsFrom(child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).getPropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).getPropsFrom(child2);	  return    new    Node(type,    child1).getPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	29	None	replace
298	[BUG]  [BUGGY]  return  new  Node(child1,  type).getPropsFrom(child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).getPropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).getPropsFrom(child1);	  return    new    Node(type,    child1).getPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	29	None	replace
299	[BUG]  [BUGGY]  return  new  Node(type,  child1).setPropsFrom(child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).setPropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).setPropsFrom(child1);	  return    new    Node(type,    child1).getPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	29	None	replace
300	[BUG]  [BUGGY]  return  new  Node(type,  child1.getPropsFrom(child1));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.getPropsFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.getPropsFrom(child1));	  return    new    Node(type,    child1).getPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	29	None	replace
301	[BUG]  [BUGGY]  return  new  Node(type,  child1).getPropsFrom(child1,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).getPropsFrom(child1,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).getPropsFrom(child1,  parent);	  return    new    Node(type,    child1).getPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	29	None	replace
302	[BUG]  [BUGGY]  return  new  Node(child1,  child1).addPropsFrom(type);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).addPropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).addPropsFrom(type);	  return    new    Node(type,    child1).addPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	64	None	replace
303	[BUG]  [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addPropsFrom(child2);	  return    new    Node(type,    child1).addPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	64	None	replace
304	[BUG]  [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1,  parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addPropsFrom(child1,  parent);	  return    new    Node(type,    child1).addPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	64	None	replace
305	[BUG]  [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1,  config);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addPropsFrom(child1,  config);	  return    new    Node(type,    child1).addPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	64	None	replace
306	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  type);	  return    new    Node(child1,    child1).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
307	[BUG]  [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).clonePropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).clonePropsFrom(this.bodyNode);	  return    new    Node(child1,    child1).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
308	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.bodyNode);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  this.bodyNode);	  return    new    Node(child1,    child1).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
309	[BUG]  [BUGGY]  return  new  Node(child1,  child1.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.cloneTree());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.cloneTree());	  return    new    Node(type,    child1.cloneTree());    	non-compiled	[CE]  ')'  expected	74	None	replace
310	[BUG]  [BUGGY]  return  new  Node(child1,  type.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type.cloneTree());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type.cloneTree());	  return    new    Node(type,    child1.cloneTree());    	non-compiled	[CE]  ')'  expected	74	None	replace
311	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneTree(),  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneTree(),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneTree(),  child1);	  return    new    Node(type,    child1.cloneTree());    	non-compiled	[CE]  ')'  expected	74	None	replace
312	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneTree(),  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneTree(),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneTree(),  false);	  return    new    Node(type,    child1.cloneTree());    	non-compiled	[CE]  ')'  expected	74	None	replace
313	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  child1.cloneTree());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  child1.cloneTree());	  return    new    Node(type,    child1.cloneTree());    	non-compiled	[CE]  ')'  expected	74	None	replace
314	[BUG]  [BUGGY]  return  new  Node(type,  child1).replaceChild(bodyNode,  newNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).replaceChild(bodyNode,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).replaceChild(bodyNode,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
315	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(type,  newNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(type,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(type,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
316	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(parent,  newNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(parent,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(parent,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
317	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(node,  newNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(node,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(node,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
318	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(parentNode,  newNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(parentNode,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(parentNode,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
319	[BUG]  [BUGGY]  return  new  Node(child1,  type).replaceChild(bodyNode,  newNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).replaceChild(bodyNode,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).replaceChild(bodyNode,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
320	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(newNode,  type);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(newNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(newNode,  type);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
321	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.child1);	  return    new    Node(type,    child1).clonePropsFrom(this.child1,    this.bodyNode);    	non-compiled	[CE]  ')'  expected	77	None	replace
322	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child2,  this.bodyNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child2,  this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child2,  this.bodyNode);	  return    new    Node(type,    child1).clonePropsFrom(this.child1,    this.bodyNode);    	non-compiled	[CE]  ')'  expected	77	None	replace
323	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.child1,  this.bodyNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.child1,  this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this.child1,  this.bodyNode);	  return    new    Node(type,    child1).clonePropsFrom(this.child1,    this.bodyNode);    	non-compiled	[CE]  	77	None	replace
324	[BUG]  [BUGGY]  return  new  Node(type,  this.bodyNode).clonePropsFrom(this.child1,  child1);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  this.bodyNode).clonePropsFrom(this.child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  this.bodyNode).clonePropsFrom(this.child1,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.child1,    this.bodyNode);    	non-compiled	[CE]  ')'  expected	77	None	replace
325	[BUG]  [BUGGY]  return  new  Node(child1,  type).cloneNodesFrom(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).cloneNodesFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).cloneNodesFrom(this);	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
326	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneNodesFrom(this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneNodesFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneNodesFrom(this);	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
327	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneNodesFrom(this,  config);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneNodesFrom(this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneNodesFrom(this,  config);	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
328	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneNodesFrom(this));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneNodesFrom(this));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneNodesFrom(this));	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
329	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneNodesFrom(this,  node);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneNodesFrom(this,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneNodesFrom(this,  node);	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
330	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).clonePropsFrom(type);	  return    new    Node(child1,    type,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	20	None	replace
331	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type,  child1).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type,  child1).clonePropsFrom(newNode);	  return    new    Node(child1,    type,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	20	None	replace
332	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  child1);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
333	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  config);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  config);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
334	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  false);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
335	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.sourceName);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.sourceName);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
336	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.parentNode);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.parentNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.parentNode);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
337	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child2).clonePropsFrom(this);	  return    new    Node(child1,    child1).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	23	None	replace
338	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  config);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child2).clonePropsFrom(type,  config);	  return    new    Node(child1,    child1).clonePropsFrom(type,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
339	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  config));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  config));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  config));	  return    new    Node(child1,    child1).clonePropsFrom(type,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
340	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.config);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  this.config);	  return    new    Node(child1,    child1).clonePropsFrom(type,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
341	[BUG]  [BUGGY]  return  new  Node(child1,  type).reset();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  type).reset();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  type).reset();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
342	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeFirstChild();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
343	[BUG]  [BUGGY]  return  new  Node(child1,  child1).reset();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).reset();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).reset();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
344	[BUG]  [BUGGY]  return  new  Node(type,  child1).set();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).set();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).set();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
345	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(type));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(type));	  return    new    Node(child1,    child1.clonePropsFrom(type));    	non-compiled	[CE]  ')'  expected	43	None	replace
346	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type),  child1);	  return    new    Node(child1,    child1.clonePropsFrom(type));    	non-compiled	[CE]  ')'  expected	43	None	replace
347	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  type));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  type));	  return    new    Node(child1,    child1.clonePropsFrom(type));    	non-compiled	[CE]  ')'  expected	43	None	replace
348	[BUG]  [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child2.clonePropsFrom(type));	  return    new    Node(child1,    child1.clonePropsFrom(type));    	non-compiled	[CE]  ')'  expected	43	None	replace
349	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceName,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
350	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.sourceName,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.sourceName,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.sourceName,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
351	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  this.sourceName);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  this.sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  this.sourceName);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
352	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.sourceStringNode,  this.bodyNode);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.sourceStringNode,  this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.sourceStringNode,  this.bodyNode);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
353	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceString);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceString);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.sourceString);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
354	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneTree(),  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneTree(),  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneTree(),  child2);	  return    new    Node(type,    child1.cloneTree());    	non-compiled	[CE]  ')'  expected	74	None	replace
355	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(parent,  child1);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
356	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  child1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(type,  child1,  child1);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
357	[BUG]  [BUGGY]  return  NodeUtil.newNode(child,  type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(child,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(child,  type);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
358	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child2);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(type,  child2);	  return    NodeUtil.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	55	None	replace
359	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1.clonePropsFrom(child3));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1.clonePropsFrom(child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1.clonePropsFrom(child3));	  return    new    Node(type,    child1.clonePropsFrom(child3));    	non-compiled	[CE]  ')'  expected	63	None	replace
360	[BUG]  [BUGGY]  return  new  Node(child1,  false).clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  false).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  false).clone();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
361	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removeParentsFrom(type);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removeParentsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removeParentsFrom(type);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  ')'  expected	72	None	replace
362	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(type,  child2);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  ')'  expected	72	None	replace
363	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(parent);	  return    new    Node(child1,    child1).cloneParentsFrom(type);    	non-compiled	[CE]  ')'  expected	72	None	replace
364	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1.cloneChildrenFrom(child1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1.cloneChildrenFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1.cloneChildrenFrom(child1));	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
365	[BUG]  [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(child1),  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(child1),  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(this,  child1.clonePropsFrom(child1),  type);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
366	[BUG]  [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(child1),  this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(child1),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(this,  child1.clonePropsFrom(child1),  this);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
367	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  0);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  0);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
368	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(bodyNode,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(bodyNode,  child1);	  return    new    Node(type,    child1).clonePropsFrom(parent,    child1);    	non-compiled	[CE]  ')'  expected	3	None	replace
369	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.child1);	  return    new    Node(type,    child1).clonePropsFrom(this.child1);    	non-compiled	[CE]  ')'  expected	52	None	replace
370	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  fileLevelJsDocBuilder);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  fileLevelJsDocBuilder);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  fileLevelJsDocBuilder);	  return    new    Node(child1,    child1).clonePropsFrom(type,    templateNode);    	non-compiled	[CE]  ')'  expected	53	None	replace
371	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  node);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  node);	  return    new    Node(child1,    child1).clonePropsFrom(type,    templateNode);    	non-compiled	[CE]  ')'  expected	53	None	replace
372	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  this.templateNode);	  return    new    Node(child1,    child1).clonePropsFrom(type,    templateNode);    	non-compiled	[CE]  ')'  expected	53	None	replace
373	[BUG]  [BUGGY]  return  NodeUtil.newName(child1);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(child1);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
374	[BUG]  [BUGGY]  return  NodeUtil.newName(parent,  child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(parent,  child1);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type));	  NodeTraversal.traverse(compiler,    newNode(type),    this);    	non-compiled	[CE]  ')'  expected	82	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  config);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  false),  config);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    false));    	non-compiled	[CE]  ')'  expected	83	None	replace
377	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(this.bodyNode);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
378	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.bodyNode  -  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.bodyNode  -  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(this.bodyNode  -  1);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
379	[BUG]  [BUGGY]  return  new  Node(newNode,  child1).newNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newNode,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newNode,  child1).newNode();	  return    new    Node(child1,    type).newNode();    	non-compiled	[CE]  ')'  expected	5	None	replace
380	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeFunctionsFrom(this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeFunctionsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeFunctionsFrom(this);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  ')'  expected	71	None	replace
381	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  node);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneFunctionsFrom(this,  node);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  ')'  expected	71	None	replace
382	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneFunctionsFrom(this,  child1);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  ')'  expected	71	None	replace
383	[BUG]  [BUGGY]  return  new  Node(type,  child1).getParent();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).getParent();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).getParent();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
384	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this.parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this.parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePathFrom(this.parent);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
385	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  config,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	25	None	replace
386	[BUG]  [BUGGY]  return  NodeUtil.newString(parent,  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newString(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newString(parent,  child1);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
387	[BUG]  [BUGGY]  return  NodeUtil.newString(child,  type);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newString(child,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newString(child,  type);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
388	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.childNode,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.childNode,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.childNode,  false);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
389	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  false);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
390	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type  -  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(type  -  1);	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
391	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(child1  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(child1  +  1);	  return    new    Node(type,    child1).removePropsFrom(child1    -    1);    	non-compiled	[CE]  ')'  expected	30	None	replace
392	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
393	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneNodesFrom(this,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneNodesFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneNodesFrom(this,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this,    child1);    	non-compiled	[CE]  ')'  expected	73	None	replace
394	[BUG]  [BUGGY]  return  new  Node(type,  child1).replaceChild(child1,  ')');  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).replaceChild(child1,  ')');  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).replaceChild(child1,  ')');	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
395	[BUG]  [BUGGY]  return  new  Node(type,  child1).replaceChild(child1,  newNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).replaceChild(child1,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).replaceChild(child1,  newNode);	  return    new    Node(type,    child1).removeChild(child1);    	non-compiled	[CE]  ')'  expected	42	None	replace
396	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(parent,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(parent,  child1);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
397	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(child,  type);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(child,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(child,  type);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
398	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(child1);	  return    new    Node(child1,    type).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	59	None	replace
399	[BUG]  [BUGGY]  return  new  Node(child1,  child).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child).clonePropsFrom(child1);	  return    new    Node(child1,    type).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	59	None	replace
400	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePathFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePathFrom(this,  child1);	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
401	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePathFrom(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePathFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePathFrom(this);	  return    new    Node(type,    child1).clonePathFrom(this);    	non-compiled	[CE]  ')'  expected	69	None	replace
402	[BUG]  [BUGGY]  return  transformDispatcher.newNode(child1,  type);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  transformDispatcher.newNode(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  transformDispatcher.newNode(child1,  type);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
403	[BUG]  [BUGGY]  return  child1.newNode(type,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  child1.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  child1.newNode(type,  child1);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
404	[BUG]  [BUGGY]  return  transformDispatcher.newNode(child,  type);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  transformDispatcher.newNode(child,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  transformDispatcher.newNode(child,  type);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(newNode);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  this).traverse(newNode);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(false);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this).traverse(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  this).traverse(false);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
407	[BUG]  [BUGGY]  return  new  Node(type,  child1.clone(),  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clone(),  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clone(),  child2);	  return    new    Node(type,    child1.clone());    	non-compiled	[CE]  ')'  expected	41	None	replace
408	[BUG]  [BUGGY]  return  Node.newString(child1,  type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newString(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newString(child1,  type);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
409	[BUG]  [BUGGY]  return  Node.newString(parent,  type);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  Node.newString(parent,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  Node.newString(parent,  type);	  return    Node.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	12	None	replace
410	[BUG]  [BUGGY]  return  new  Node(type,  child2).removeChildrenFrom(child1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2).removeChildrenFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2).removeChildrenFrom(child1);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
411	[BUG]  [BUGGY]  return  new  Node(type,  child1).addChildrenTo(child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addChildrenTo(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addChildrenTo(child1);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
412	[BUG]  [BUGGY]  return  new  Node(type,  child1).addChildrenFrom(child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addChildrenFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addChildrenFrom(child1);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
413	[BUG]  [BUGGY]  return  new  Node(child1,  this.bodyNode).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  this.bodyNode).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  this.bodyNode).clonePropsFrom(child1);	  return    new    Node(child1,    child1).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
414	[BUG]  [BUGGY]  return  new  Node(child1,  this.bodyNode).clonePropsFrom(this.child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  this.bodyNode).clonePropsFrom(this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  this.bodyNode).clonePropsFrom(this.child1);	  return    new    Node(child1,    child1).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
415	[BUG]  [BUGGY]  return  new  Node(newNode,  child1.newNode());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newNode,  child1.newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newNode,  child1.newNode());	  return    new    Node(type,    child1.newNode());    	non-compiled	[CE]  ')'  expected	8	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeWithType(type));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeWithType(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNodeWithType(type));	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
417	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(newNode);	  return    new    Node(child1,    type,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	20	None	replace
418	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(parentNode,  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(parentNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(parentNode,  type);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
419	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(childNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(childNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(childNode);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
420	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1).clone();	  return    new    Node(child1,    child1).clone();    	non-compiled	[CE]  ')'  expected	49	None	replace
421	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(null,  child1).replaceChild(null,  child1).replaceChild(null,  child1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(null,  child1).replaceChild(null,  child1).replaceChild(null,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(null,  child1).replaceChild(null,  child1).replaceChild(null,  child1));	  return    new    Node(child1,    child1).clone();    	non-compiled	[CE]  ')'  expected	49	None	replace
422	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneParentsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneParentsFrom(this.bodyNode);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
423	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(this.bodyNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(this.bodyNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeParentsFrom(this.bodyNode);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
424	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.child1);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
425	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  type));	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
426	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  parent,  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  parent,  false);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
427	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  parent);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
428	[BUG]  [BUGGY]  return  new  Node(type,  child1).newNodesFrom(this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).newNodesFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).newNodesFrom(this);	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
429	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeNodesFrom(this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeNodesFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeNodesFrom(this);	  return    new    Node(type,    child1).cloneNodesFrom(this);    	non-compiled	[CE]  ')'  expected	70	None	replace
430	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2),  child1);	  return    new    Node(type,    child1.clonePropsFrom(child2));    	non-compiled	[CE]  ')'  expected	44	None	replace
431	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1.clonePropsFrom(child2));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1.clonePropsFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1.clonePropsFrom(child2));	  return    new    Node(type,    child1.clonePropsFrom(child2));    	non-compiled	[CE]  ')'  expected	44	None	replace
432	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(config,  type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(config,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(config,  type);	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
433	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(newNode,  config);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(newNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(newNode,  config);	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
434	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child2,  config);	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
435	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneParentsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneParentsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneParentsFrom(this);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
436	[BUG]  [BUGGY]  return  new  Node(type,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child2);	  return    new    Node(type,    child1);    	non-compiled	[CE]  ')'  expected	7	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  fileLevelJsDocBuilder);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  fileLevelJsDocBuilder);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
438	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(ret,  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(ret,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(ret,  type);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    type);    	non-compiled	[CE]  ')'  expected	21	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  this);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  this);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  sourceName);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  sourceName);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  sourceString);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  sourceString);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  sourceString);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode,  child1);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
443	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1,  type).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1,  type).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1,  type).clone();	  return    new    Node(child1,    type).clone();    	non-compiled	[CE]  ')'  expected	39	None	replace
444	[BUG]  [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1,  child1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addPropsFrom(child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addPropsFrom(child1,  child1);	  return    new    Node(type,    child1).addPropsFrom(child1);    	non-compiled	[CE]  ')'  expected	64	None	replace
445	[BUG]  [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(child1,  type);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).clonePropsFrom(child1,  type);	  return    new    Node(type,    child1).clonePropsFrom(child1,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
446	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(child1,  type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(child1,  type);	  return    new    Node(type,    child1).clonePropsFrom(child1,    parent);    	non-compiled	[CE]  ')'  expected	1	None	replace
447	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(child1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeParentsFrom(child1);	  return    new    Node(type,    child1).cloneParentsFrom(child1);    	non-compiled	[CE]  ')'  expected	66	None	replace
448	[BUG]  [BUGGY]  return  new  Node(child1,  child.clonePropsFrom(type,  child1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child.clonePropsFrom(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child.clonePropsFrom(type,  child1));	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
449	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child3));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(type,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(type,  child3));	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
450	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child1),  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePropsFrom(child1),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePropsFrom(child1),  null);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
451	[BUG]  [BUGGY]  return  new  Node(child1,  child1).cloneNodeFrom(type,  config);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).cloneNodeFrom(type,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).cloneNodeFrom(type,  config);	  return    new    Node(child1,    child1).clonePropsFrom(type,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
452	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this),  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this),  child1);	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
453	[BUG]  [BUGGY]  return  NodeUtil.newNumber(child1,  type);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNumber(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNumber(child1,  type);	  return    NodeUtil.newNumber(type,    child1);    	non-compiled	[CE]  	11	None	replace
454	[BUG]  [BUGGY]  return  NodeUtil.newNode(child1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newNode(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newNode(child1);	  return    NodeUtil.newNumber(type,    child1);    	non-compiled	[CE]  	11	None	replace
455	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.childNode,  config);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.childNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.childNode,  config);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  	18	None	replace
456	[BUG]  [BUGGY]  return  new  Node(child1,  child2).newNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child2).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child2).newNode();	  return    new    Node(child1,    child1).newNode();    	non-compiled	[CE]  	6	None	replace
457	[BUG]  [BUGGY]  return  new  Node(this.bodyNode,  type).clonePropsFrom(this.bodyNode,  child1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(this.bodyNode,  type).clonePropsFrom(this.bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(this.bodyNode,  type).clonePropsFrom(this.bodyNode,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  	15	None	replace
458	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.child2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.bodyNode,  this.child2);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  	15	None	replace
459	[BUG]  [BUGGY]  return  new  Node(newNode,  child1).replaceChild(bodyNode,  child1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newNode,  child1).replaceChild(bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newNode,  child1).replaceChild(bodyNode,  child1);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
460	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(newNode,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(newNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(newNode,  child1);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
461	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newName(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newName(type,  child2);	  return    NodeUtil.newName(type,    child1);    	non-compiled	[CE]  ')'  expected	57	None	replace
462	[BUG]  [BUGGY]  return  NodeUtil.newBlock(type,  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newBlock(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newBlock(type,  child1);	  return    NodeUtil.newString(type,    child1);    	non-compiled	[CE]  ')'  expected	14	None	replace
463	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(this.bodyNode,  this.parent);	  return    new    Node(type,    child1).cloneParentsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	51	None	replace
464	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(false);	  return    new    Node(type,    child1).clonePropsFrom(false);    	non-compiled	[CE]  ')'  expected	2	None	replace
465	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(this.bodyNode,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    child1);    	non-compiled	[CE]  ')'  expected	15	None	replace
466	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  null);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
467	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  null,  this);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  null,  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  null,  this);	  return    new    Node(type,    child1.clonePropsFrom(child1),    null);    	non-compiled	[CE]  ')'  expected	48	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  config);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  this,  config);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    this);    	non-compiled	[CE]  ')'  expected	56	None	replace
469	[BUG]  [BUGGY]  return  newNode(type,  child1,  child1);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(type,  child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(type,  child1,  child1);	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
470	[BUG]  [BUGGY]  return  newNode(type,  child1,  child1.getParent());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  newNode(type,  child1,  child1.getParent());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  newNode(type,  child1,  child1.getParent());	  return    newNode(type,    child1,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
471	[BUG]  [BUGGY]  return  new  Node(type,  child1,  null).newNode();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  null).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  null).newNode();	  return    new    Node(type,    child1,    false).clone();    	non-compiled	[CE]  ')'  expected	40	None	replace
472	[BUG]  [BUGGY]  return  new  Node(type,  config).clonePropsFrom(this.bodyNode,  child1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  config).clonePropsFrom(this.bodyNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  config).clonePropsFrom(this.bodyNode,  child1);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    config);    	non-compiled	[CE]  ')'  expected	18	None	replace
473	[BUG]  [BUGGY]  return  new  Node(type,  child1).addChildrenToFront(child1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).addChildrenToFront(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).addChildrenToFront(child1);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
474	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeChildrenTo(child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeChildrenTo(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeChildrenTo(child1);	  return    new    Node(type,    child1).removeChildrenFrom(child1);    	non-compiled	[CE]  ')'  expected	65	None	replace
475	[BUG]  [BUGGY]  return  new  Node(type,  config).clonePropsFrom(child1,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  config).clonePropsFrom(child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  config).clonePropsFrom(child1,  child1);	  return    new    Node(type,    child1).clonePropsFrom(child1,    config);    	non-compiled	[CE]  ')'  expected	36	None	replace
476	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1).newNode();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1).newNode();	  return    new    Node(child1,    child1).newNode();    	non-compiled	[CE]  ')'  expected	6	None	replace
477	[BUG]  [BUGGY]  return  new  Node(type,  child1).toString();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).toString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).toString();	  return    new    Node(type,    child1).cloneTree();    	non-compiled	[CE]  ')'  expected	86	None	replace
478	[BUG]  [BUGGY]  return  new  Node(type,  child1).newString();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).newString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).newString();	  return    new    Node(type,    child1).cloneTree();    	non-compiled	[CE]  ')'  expected	86	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  fileLevelJsDocBuilder);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  fileLevelJsDocBuilder);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    newNode(type,    child1));    	non-compiled	[CE]  ')'  expected	54	None	replace
480	[BUG]  [BUGGY]  return  new  Node(type,  child1.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.getFirstChild());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.getFirstChild());	  return    new    Node(type,    child1.newNode());    	non-compiled	[CE]  ')'  expected	8	None	replace
481	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.rootNode,  this.sourceName);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.rootNode,  this.sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.rootNode,  this.sourceName);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
482	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.sourceName);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.sourceName);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.sourceName);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    this.sourceName);    	non-compiled	[CE]  ')'  expected	16	None	replace
483	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  config));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  config));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  config));	  return    new    Node(child1,    child1).clonePropsFrom(type,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
484	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePathFrom(type,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePathFrom(type,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePathFrom(type,  config);	  return    new    Node(child1,    child1).clonePropsFrom(type,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
485	[BUG]  [BUGGY]  return  new  Node(parent,  child1).cloneParentsFrom(type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).cloneParentsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).cloneParentsFrom(type);	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  ')'  expected	61	None	replace
486	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeParentsFrom(parent);	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  ')'  expected	61	None	replace
487	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneChildren();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneChildren();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneChildren();	  return    new    Node(type,    child1).cloneParentsFrom(parent);    	non-compiled	[CE]  ')'  expected	61	None	replace
488	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child3);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(child3);	  return    new    Node(type,    child1.clonePropsFrom(child3));    	non-compiled	[CE]  ')'  expected	63	None	replace
489	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  this.type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  this.type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this.bodyNode,  this.type);	  return    new    Node(child1,    child1).clonePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	19	None	replace
490	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removeChild(child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removeChild(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removeChild(child1);	  return    new    Node(child1,    child1).clone();    	non-compiled	[CE]  ')'  expected	49	None	replace
491	[BUG]  [BUGGY]  return  new  Node(child1,  child1).newString();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).newString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).newString();	  return    new    Node(child1,    child1).clone();    	non-compiled	[CE]  ')'  expected	49	None	replace
492	[BUG]  [BUGGY]  return  new  Node(type,  child1).remove();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).remove();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).remove();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
493	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeFirst();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeFirst();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeFirst();	  return    new    Node(type,    child1).reset();    	non-compiled	[CE]  ')'  expected	50	None	replace
494	[BUG]  [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(type),  this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(this,  child1.clonePropsFrom(type),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(this,  child1.clonePropsFrom(type),  this);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
495	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  this);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
496	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  this,  c);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1),  this,  c);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1),  this,  c);	  return    new    Node(type,    child1.clonePropsFrom(child1),    this);    	non-compiled	[CE]  ')'  expected	62	None	replace
497	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.parent);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type,  this.parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type,  this.parent);	  return    new    Node(child1,    child1).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	37	None	replace
498	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1.cloneChildrenFrom(child1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  child1.cloneChildrenFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  child1.cloneChildrenFrom(child1));	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
499	[BUG]  [BUGGY]  return  new  Node(type,  child1.removeChildrenFrom(child1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.removeChildrenFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.removeChildrenFrom(child1));	  return    new    Node(type,    child1.cloneChildrenFrom(child1));    	non-compiled	[CE]  ')'  expected	75	None	replace
500	[BUG]  [BUGGY]  return  transformerDispatcher.newNode(type,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  transformerDispatcher.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  transformerDispatcher.newNode(type,  child1);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
501	[BUG]  [BUGGY]  return  transformDispatcher.newNode(type,  child1,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  transformDispatcher.newNode(type,  child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  transformDispatcher.newNode(type,  child1,  child1);	  return    transformDispatcher.newNode(type,    child1);    	non-compiled	[CE]  ')'  expected	9	None	replace
502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  fileLevelJsDocBuilder);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  fileLevelJsDocBuilder);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    child1,    newNode);    	non-compiled	[CE]  ')'  expected	81	None	replace
503	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(type,  templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(type,  templateNode);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    type);    	non-compiled	[CE]  ')'  expected	21	None	replace
504	[BUG]  [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  NodeUtil.newStringNode(type,  child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  NodeUtil.newStringNode(type,  child1,  child1);	  return    NodeUtil.newStringNode(type,    child1);    	non-compiled	[CE]  ')'  expected	10	None	replace
505	[BUG]  [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1).clonePropsFrom(type);	  return    new    Node(child1,    child1).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	60	None	replace
506	[BUG]  [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).removePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).removePropsFrom(this);	  return    new    Node(child1,    child1).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	23	None	replace
507	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  newNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneFunctionsFrom(this,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneFunctionsFrom(this,  newNode);	  return    new    Node(type,    child1).cloneFunctionsFrom(this);    	non-compiled	[CE]  ')'  expected	71	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  newNode);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  this,  newNode);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this,  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  this,  child1);	  NodeTraversal.traverse(compiler,    this).traverse(this);    	non-compiled	[CE]  ')'  expected	84	None	replace
510	[BUG]  [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removePropsFrom(this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removePropsFrom(this.child1);	  return    new    Node(type,    child1).removePropsFrom(this.bodyNode);    	non-compiled	[CE]  ')'  expected	76	None	replace
511	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.clonePropsFrom(child1,  child1),  true);	  return    new    Node(type,    child1.clonePropsFrom(child1),    false);    	non-compiled	[CE]  ')'  expected	45	None	replace
512	[BUG]  [BUGGY]  return  new  Node(child1,  child1.getParent().clonePropsFrom(type));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.getParent().clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.getParent().clonePropsFrom(type));	  return    new    Node(child1,    child1.clonePropsFrom(type));    	non-compiled	[CE]  ')'  expected	43	None	replace
513	[BUG]  [BUGGY]  return  new  Node(child1,  child1.clonePathFrom(type));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1.clonePathFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1.clonePathFrom(type));	  return    new    Node(child1,    child1.clonePropsFrom(type));    	non-compiled	[CE]  ')'  expected	43	None	replace
514	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this,  config,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this,  config,  type);	  return    new    Node(type,    child1).clonePropsFrom(this,    config);    	non-compiled	[CE]  ')'  expected	25	None	replace
515	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.child1,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.child1,  false);	  return    new    Node(type,    child1).clonePropsFrom(this.bodyNode,    false);    	non-compiled	[CE]  ')'  expected	17	None	replace
516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  false));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  false));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  false));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    false));    	non-compiled	[CE]  ')'  expected	83	None	replace
517	[BUG]  [BUGGY]  return  new  Node(child1,  child1).replaceChild(this,  newNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).replaceChild(this,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).replaceChild(this,  newNode);	  return    new    Node(child1,    child1).replaceChild(bodyNode,    newNode);    	non-compiled	[CE]  ')'  expected	85	None	replace
518	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).clonePropsFrom(this.parent,  this.child1);	  return    new    Node(type,    child1).clonePropsFrom(this.parent);    	non-compiled	[CE]  ')'  expected	4	None	replace
519	[BUG]  [BUGGY]  return  new  Node(parentNode,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parentNode,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parentNode,  child1).clonePropsFrom(type);	  return    new    Node(child1,    child1).clonePropsFrom(parentNode);    	non-compiled	[CE]  ')'  expected	79	None	replace
520	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child1,  child1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneParentsFrom(child1,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneParentsFrom(child1,  child1);	  return    new    Node(type,    child1).cloneParentsFrom(child1);    	non-compiled	[CE]  ')'  expected	66	None	replace
521	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(parent,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(parent,  child1);	  return    new    Node(child1,    child1).clonePropsFrom(templateNode,    child1);    	non-compiled	[CE]  ')'  expected	78	None	replace
522	[BUG]  [BUGGY]  return  new  Node(parent,  child1.clonePropsFrom(type),  parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(parent,  child1.clonePropsFrom(type),  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(parent,  child1.clonePropsFrom(type),  parent);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
523	[BUG]  [BUGGY]  return  new  Node(type,  child1,  parent.clonePropsFrom(child1),  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1,  parent.clonePropsFrom(child1),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1,  parent.clonePropsFrom(child1),  child1);	  return    new    Node(type,    child1.clonePropsFrom(child1),    parent);    	non-compiled	[CE]  ')'  expected	46	None	replace
524	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1.clonePropsFrom(type,  child1));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1.clonePropsFrom(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1.clonePropsFrom(type,  child1));	  return    new    Node(child1,    child1.clonePropsFrom(type,    child1));    	non-compiled	[CE]  ')'  expected	32	None	replace
525	[BUG]  [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(this);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).removeParentsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).removeParentsFrom(this);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
526	[BUG]  [BUGGY]  return  new  Node(type,  child1).cloneChildrenFrom(this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).cloneChildrenFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).cloneChildrenFrom(this);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
527	[BUG]  [BUGGY]  return  new  Node(type,  child1).replaceChild(this,  newNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1).replaceChild(this,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1).replaceChild(this,  newNode);	  return    new    Node(type,    child1).cloneParentsFrom(this);    	non-compiled	[CE]  ')'  expected	68	None	replace
528	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(this,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(child1,  child1).clonePropsFrom(this,  child1);	  return    new    Node(child1,    type).clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	24	None	replace
529	[BUG]  [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(type,  child1.cloneChildrenFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(type,  child1.cloneChildrenFrom(this);	  return    new    Node(type,    child1.clonePropsFrom(this);    	non-compiled	[CE]  ')'  expected	26	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeParent());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeParent());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNodeParent());	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNodeType());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	NodeTraversal.traverse(compiler,  child1,  newNodeType());	  NodeTraversal.traverse(compiler,    child1,    newNode());    	non-compiled	[CE]  ')'  expected	80	None	replace
532	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1,  type).newNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1)  {      [BUGGY]  return  new  Node(newBlock,  child1,  type).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.2672612419124244	1194	1194	1	replace	return  new  Node(newBlock,  child1,  type).newNode();	  return    new    Node(child1,    type).newNode();    	non-compiled	[CE]  ')'  expected	5	None	replace
