bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  node  =  irNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.getLastChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.getLastChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  Node  node  =  irNode.getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.getNext();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.getNext();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
3	[BUG]  [BUGGY]  Node  node  =  jsDocInfo.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  jsDocInfo.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  jsDocInfo.getFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
4	[BUG]  [BUGGY]  Node  node  =  irNode.getAncestor(1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.getAncestor(1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.getAncestor(1);	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
5	[BUG]  [BUGGY]  Node  node  =  irNode.getParent();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.getParent();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.getParent();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
6	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
7	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
8	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getFirstChild().getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getFirstChild().getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  &&  node.getFirstChild().getCharno()  ==  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
9	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getCharno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
10	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
11	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getCharno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
12	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getString()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getString()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getString()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
13	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceName()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceName()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceName()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
14	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getLastChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getLastChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  &&  node.getLastChild().getCharno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  &&  node.getLastChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  ||  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  ||  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  ||  node.getLastChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  if(node.getType()!=  Token.VAR  &&  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()!=  Token.VAR  &&  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()!=  Token.VAR  &&  node.getLastChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.getLastChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.getLastChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
19	[BUG]  [BUGGY]  Node  irNode  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.getNext();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.getNext();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
20	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.getImmediateParentNode();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
21	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(1);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.getAncestor(1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.getAncestor(1);	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
22	[BUG]  [BUGGY]  Node  irNode  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.getParent();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.getParent();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
23	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
24	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getCharno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
26	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getLineno()  ==  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()  ==  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
32	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  &&  node.getFirstChild().getCharno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  ||  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  ||  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  ||  node.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
34	[BUG]  [BUGGY]  if  (node.getType()!=  Token.STRING  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()!=  Token.STRING  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()!=  Token.STRING  &&  node.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
35	[BUG]  [BUGGY]  if  (Node.getType()  ==  Token.STRING  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (Node.getType()  ==  Token.STRING  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (Node.getType()  ==  Token.STRING  &&  node.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
36	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getCharno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(irNode.getLastChild().getCharno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
37	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getLineno()  +  1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(irNode.getLastChild().getLineno()  +  1);	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
38	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLastChild().getString());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(irNode.getLastChild().getString());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(irNode.getLastChild().getString());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
39	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getCharno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
40	[BUG]  [BUGGY]  irNode.setJSDocInfo(jsDocInfo.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setJSDocInfo(jsDocInfo.getJSDocInfo());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setJSDocInfo(jsDocInfo.getJSDocInfo());	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
41	[BUG]  [BUGGY]  irNode.setJSDocInfo(jsDocInfo);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setJSDocInfo(jsDocInfo);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setJSDocInfo(jsDocInfo);	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
42	[BUG]  [BUGGY]  irNode.setJSDocInfo(irNode.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setJSDocInfo(irNode.getJSDocInfo());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setJSDocInfo(irNode.getJSDocInfo());	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
43	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
44	[BUG]  [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()!=  Token.FUNCTION  &&  node.getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
45	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  ||  node.getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  Node  lineno  =  irNode.getFirstChild();  irNode.setLineno(lineno);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  irNode.getFirstChild();  irNode.setLineno(lineno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  irNode.getFirstChild();  irNode.setLineno(lineno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
47	[BUG]  [BUGGY]  Node  lineno  =  node.getLastChild();  irNode.setLineno(lineno);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getLastChild();  irNode.setLineno(lineno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getLastChild();  irNode.setLineno(lineno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
48	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setLineno(irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setLineno(irNode.getLineno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getFirstChild();  irNode.setLineno(irNode.getLineno());	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
49	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setCharno(lineno);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setCharno(lineno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getFirstChild();  irNode.setCharno(lineno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
50	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setJSDocInfo(lineno);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setJSDocInfo(lineno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getFirstChild();  irNode.setJSDocInfo(lineno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
51	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  ||  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  ||  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  ||  node.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
52	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getLastChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
53	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
54	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.NAME  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.NAME  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.NAME  &&  node.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
55	[BUG]  [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
56	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  ||  node.getFirstChild().getCharno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getLastChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getLastChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getLastChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
58	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
60	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
61	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  &&  node.getLastChild()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
62	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  lineno  =  node.getLineno()  -  1;  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  lineno  =  node.getLineno()  -  1;	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
63	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  lineno  =  node.getLineno()  +  1;  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  lineno  =  node.getLineno()  +  1;	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
64	[BUG]  [BUGGY]  int  lineno  =  irNode.getLineno();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  lineno  =  irNode.getLineno();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  lineno  =  irNode.getLineno();	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
65	[BUG]  [BUGGY]  int  lineno  =  node.getLineno()  -  2;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  lineno  =  node.getLineno()  -  2;  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  lineno  =  node.getLineno()  -  2;	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
66	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  &&  node.getLastChild().getLineno()!=  -1)  {	  if    (irNode.getType()    ==    Token.STRING    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
67	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getLineno()!=  -1)  {	  if    (irNode.getType()    ==    Token.STRING    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild().getCharno()!=  -1)  {	  if    (irNode.getType()    ==    Token.STRING    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
69	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
70	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
71	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getCharno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
72	[BUG]  [BUGGY]  if(node.getType()!=  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()!=  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()!=  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
73	[BUG]  [BUGGY]  if(Node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(Node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(Node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
74	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getLineno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getLineno());	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
75	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getCharno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getCharno());	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
76	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  -  1);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  -  1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition()  -  1);	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
77	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  irNode.getLineno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  irNode.getLineno());	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
78	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  1);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  1);	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
79	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  0);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  0);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  0);	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
80	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition()  +  1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition()  +  1);	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
81	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
82	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  ||  node.getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  ||  node.getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  ||  node.getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
83	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
84	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getString()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getString()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getString()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
85	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  &&  node.getLineno()  ==  -1)  {	  if(node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
86	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  &&  node.getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.NAME  &&  node.getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.NAME  &&  node.getLineno()  ==  -1)  {	  if(node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
87	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getSourceName()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getSourceName()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getSourceName()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getSourceName()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
88	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getSourceName()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getSourceName()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getSourceName()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getSourceName()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
89	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceName()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceName()  ==  null)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceName()  ==  null)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getSourceName()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
90	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceString()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceString()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getSourceString()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getSourceName()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
91	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  &&  node.getLastChild()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
92	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  ||  node.getLastChild()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
93	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getCharno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
94	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getCharno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
95	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    &&    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  &&  node.getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  &&  node.getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  &&  node.getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    &&    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
97	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  &&  node.getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
98	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  &&  node.getFirstChild().getLineno()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
99	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild().getLineno()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild().getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
100	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  &&  irNode.getLastChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
101	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getFirstChild().getLineno()!=  -1)  {	  if(irNode.getType()    ==    Token.VAR    &&    irNode.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.VAR  &&  node.getFirstChild()!=  -1)  {	  if    (node.getType()    ==    Token.VAR    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
103	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.VAR  &&  node.getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.VAR    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
104	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.VAR  &&  node.getLastChild()!=  -1)  {	  if    (node.getType()    ==    Token.VAR    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
105	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getChildCount()!=  4)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.VAR  &&  node.getChildCount()!=  4)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.VAR  &&  node.getChildCount()!=  4)  {	  if    (node.getType()    ==    Token.VAR    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
106	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  ||  node.getLastChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
107	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getLineno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
108	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getChildCount()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getChildCount()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getChildCount()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
109	[BUG]  [BUGGY]  Node  node  =(Node)irNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =(Node)irNode.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =(Node)irNode.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
110	[BUG]  [BUGGY]  Node  node  =  idNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  idNode.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  idNode.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
111	[BUG]  [BUGGY]  Node  node  =(Node)irNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =(Node)irNode.getLastChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =(Node)irNode.getLastChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
112	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  &&  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  &&  node.getFirstChild()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
113	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getCharno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(irNode.getFirstChild().getCharno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
114	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  +  1);	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
115	[BUG]  [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setCharno(irNode.getFirstChild().getLineno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setCharno(irNode.getFirstChild().getLineno());	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
116	[BUG]  [BUGGY]  Node  lineno  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getLastChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getLastChild();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
117	[BUG]  [BUGGY]  Node  lineno  =  irNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  irNode.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  irNode.getFirstChild();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
118	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getLineno();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getLineno();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
119	[BUG]  [BUGGY]  Node  lineno  =  irNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  irNode.getLastChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  irNode.getLastChild();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
120	[BUG]  [BUGGY]  Node  lineno  =  node.getLowerCase();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getLowerCase();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getLowerCase();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
121	[BUG]  [BUGGY]  Node  lineno  =  node.getLocalPart();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getLocalPart();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getLocalPart();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
122	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.VAR  ||  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
123	[BUG]  [BUGGY]  if(Node.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(Node.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(Node.getType()  ==  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()    ==    Token.VAR    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
124	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (node.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
125	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getJSDocInfo()!=  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getJSDocInfo()!=  null)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getJSDocInfo()!=  null)  {	  if    (node.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
126	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getString().equals( "string "))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getString().equals( "string "))  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getString().equals( "string "))  {	  if    (node.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
127	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()!=  Token.VAR  &&  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()!=    Token.VAR    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
128	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.FUNCTION  ||  node.getCharno()  ==  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
129	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  &&  node.getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  &&  node.getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.FUNCTION  &&  node.getLineno()  ==  -1)  {	  if    (irNode.getType()    ==    Token.FUNCTION    ||    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
130	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getString()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getString()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  ||  node.getString()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getString()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
131	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getString()!=  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getString()!=  0)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getString()!=  0)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getString()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
132	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
133	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  null)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  null)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  null)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
134	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getJSDocInfo()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getJSDocInfo()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getJSDocInfo()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
135	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()  ==  null)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()  ==  null)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
136	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(irNode.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(irNode.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
137	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  0)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  0)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getJSDocInfo()!=  0)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
138	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  ||  node.getLastChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
139	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.FUNCTION  &&  node.getLastChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
140	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getFirstChild()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    &&    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
141	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild()!=  null)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild()!=  null)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild()!=  null)  {	  if    (node.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
142	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getChildCount()  >  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getChildCount()  >  1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getChildCount()  >  1)  {	  if    (node.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
143	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
144	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getChildCount()  ==  1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getChildCount()  ==  1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getChildCount()  ==  1)  {	  if(irNode.getType()    ==    Token.SCRIPT    ||    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
145	[BUG]  [BUGGY]  float  lineno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  float  lineno  =  node.getLineno();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	float  lineno  =  node.getLineno();	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  Integer  lineno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Integer  lineno  =  node.getLineno();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Integer  lineno  =  node.getLineno();	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
147	[BUG]  [BUGGY]  Node  node  =  iNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  iNode.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  iNode.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
148	[BUG]  [BUGGY]  Node  node  =  ipNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  ipNode.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  ipNode.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
149	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.FUNCTION  ||  node.getFirstChild().getCharno()  ==  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
150	[BUG]  [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()!=  Token.FUNCTION  &&  node.getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()!=  Token.FUNCTION  &&  node.getCharno()  ==  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
151	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
152	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getLastChild()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getLastChild()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getLastChild()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
153	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getLastChild()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
154	[BUG]  [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(irNode.getFirstChild().getLineno()  -  1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(irNode.getFirstChild().getLineno()  -  1);	  irNode.setLineno(irNode.getFirstChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
155	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getCharno()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
156	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild().getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getFirstChild().getLastChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getFirstChild().getLastChild();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
157	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild().getLineno();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getFirstChild().getLineno();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getFirstChild().getLineno();	  Node    lineno    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
158	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getLastChild()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
159	[BUG]  [BUGGY]  if(node.getType()  ==  Token.STRING  &&  node.getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.STRING  &&  node.getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.STRING  &&  node.getLineno()  ==  -1)  {	  if(node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
160	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getJSDocInfo()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getJSDocInfo()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getJSDocInfo()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getJSDocInfo()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
161	[BUG]  [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setLineno(charno);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  node.getFirstChild();  irNode.setLineno(charno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  node.getFirstChild();  irNode.setLineno(charno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
162	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getLastChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getLastChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getLastChild().getLineno()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
163	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getNext();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.getFirstChild().getNext();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
164	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  ||  node.getFirstChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
165	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getString()!=  null)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getString()!=  null)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getString()!=  null)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getString()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
166	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getString()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getString()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getFirstChild().getString()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getString()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
167	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.NAME  &&  node.getFirstChild().getLineno()  ==  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
168	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  node.getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  node.getCharno()  ==  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
169	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getLastChild().getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  node.getLastChild().getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  &&  node.getLastChild().getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.VAR    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
170	[BUG]  [BUGGY]  Node  node  =  irNode.cloneTree();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.cloneTree();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.cloneTree();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
171	[BUG]  [BUGGY]  Node  node  =  irNode.getFirstChild().getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.getFirstChild().getNext();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.getFirstChild().getNext();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
172	[BUG]  [BUGGY]  irNode.setJSDocInfo(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setJSDocInfo(fileOverviewInfo);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setJSDocInfo(fileOverviewInfo);	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
173	[BUG]  [BUGGY]  irNode.setJSDocInfo(fileLevelJsDocBuilder.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setJSDocInfo(fileLevelJsDocBuilder.getJSDocInfo());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setJSDocInfo(fileLevelJsDocBuilder.getJSDocInfo());	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
174	[BUG]  [BUGGY]  irNode.setLineno(node.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(node.getAbsolutePosition());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(node.getAbsolutePosition());	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
175	[BUG]  [BUGGY]  irNode.setLineno(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(node.getJSDocInfo());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(node.getJSDocInfo());	  irNode.setJSDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
176	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  irNode.getLastChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
177	[BUG]  [BUGGY]  Node  irNode  =  node.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.removeFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.removeFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
178	[BUG]  [BUGGY]  Node  irNode  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  irNode  =  node.cloneTree();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  irNode  =  node.cloneTree();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
179	[BUG]  [BUGGY]  irNode.setLineno(lineno);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(lineno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(lineno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
180	[BUG]  [BUGGY]  Node  lineno  =  irNode.getLastChild();  irNode.setLineno(lineno);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  lineno  =  irNode.getLastChild();  irNode.setLineno(lineno);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  lineno  =  irNode.getLastChild();  irNode.setLineno(lineno);	  Node    lineno    =    node.getFirstChild();    irNode.setLineno(lineno);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
181	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  irNode.getFirstChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
182	[BUG]  [BUGGY]  if(node.getType()!=  Token.SCRIPT  &&  node.getLineno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()!=  Token.SCRIPT  &&  node.getLineno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()!=  Token.SCRIPT  &&  node.getLineno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    &&    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
183	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  &&  node.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  &&  node.getLastChild()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    &&    node.getLineno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
184	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getFirstChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getFirstChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  irNode.getFirstChild()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getFirstChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
185	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  -1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  -1);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  -1);	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
186	[BUG]  [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  int  charno  =  position2charno(node.getAbsolutePosition(),  irNode);  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	int  charno  =  position2charno(node.getAbsolutePosition(),  irNode);	  int    charno    =    position2charno(node.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
187	[BUG]  [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  irNode.setLineno(jsDocInfo.getLastChild().getLineno());  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	irNode.setLineno(jsDocInfo.getLastChild().getLineno());	  irNode.setLineno(irNode.getLastChild().getLineno());    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
188	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getCharno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getFirstChild().getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
189	[BUG]  [BUGGY]  Node  node  =  irnode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irnode.getFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irnode.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
190	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(NodeUtil.isExpressionNode(node)&&  node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()!=    Token.VAR    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
191	[BUG]  [BUGGY]  if(node.getType()  ==  Token.VAR  &&  Node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.VAR  &&  Node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.VAR  &&  Node.getFirstChild().getLineno()!=  -1)  {	  if(node.getType()!=    Token.VAR    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
192	[BUG]  [BUGGY]  if(node.getType()  ==  Token.STRING  &&  node.getFirstChild().getType()  ==  Token.SCRIPT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.STRING  &&  node.getFirstChild().getType()  ==  Token.SCRIPT)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.STRING  &&  node.getFirstChild().getType()  ==  Token.SCRIPT)  {	  if    (node.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
193	[BUG]  [BUGGY]  if  (irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()  ==  Token.STRING  ||  irNode.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
194	[BUG]  [BUGGY]  if  (irNode.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (irNode.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (irNode.getType()!=  Token.FUNCTION  &&  node.getFirstChild().getLineno()!=  -1)  {	  if    (irNode.getType()    ==    Token.FUNCTION    ||    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
195	[BUG]  [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getLastChild()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if  (node.getType()  ==  Token.STRING  &&  irNode.getLastChild()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if  (node.getType()  ==  Token.STRING  &&  irNode.getLastChild()!=  -1)  {	  if    (node.getType()    ==    Token.STRING    &&    node.getLastChild()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
196	[BUG]  [BUGGY]  Node  node  =  irNode.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  Node  node  =  irNode.removeFirstChild();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	Node  node  =  irNode.removeFirstChild();	  Node    node    =    irNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
197	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.NAME    &&    node.getFirstChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
198	[BUG]  [BUGGY]  if(node.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getLineno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getLineno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.FUNCTION  &&  irNode.getLastChild().getLineno()!=  -1)  {	  if    (node.getType()    ==    Token.FUNCTION    &&    node.getLastChild().getLineno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
199	[BUG]  [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getSourceName()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getSourceName()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()  ==  Token.SCRIPT  ||  node.getFirstChild().getSourceName()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getSourceName()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
200	[BUG]  [BUGGY]  if(node.getType()!=  Token.SCRIPT  ||  node.getCharno()  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()!=  Token.SCRIPT  ||  node.getCharno()  ==  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()!=  Token.SCRIPT  ||  node.getCharno()  ==  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
201	[BUG]  [BUGGY]  char  lineno  =  node.getLineno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  char  lineno  =  node.getLineno();  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	char  lineno  =  node.getLineno();	  int    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
202	[BUG]  [BUGGY]  if(node.getType()!=  Token.SCRIPT  ||  node.getCharno()!=  -1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  }  else  {      [BUGGY]  if(node.getType()!=  Token.SCRIPT  ||  node.getCharno()!=  -1)  {  [BUGGY]          int  lineno  =  node.getLineno();  irNode.setLineno(lineno);  int  charno  =  position2charno(node.getAbsolutePosition());  irNode.setCharno(charno);  }  }  return  irNode;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	217	217	1	replace	if(node.getType()!=  Token.SCRIPT  ||  node.getCharno()!=  -1)  {	  if(node.getType()    ==    Token.SCRIPT    ||    node.getCharno()!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
