bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(config,  child2);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(config,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(config,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
2	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(config,  child2));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(config,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(config,  child2));	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
3	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
4	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(config,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(config,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(config,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
5	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    child2);    	non-compiled	[CE]  ')'  expected	37	None	replace
6	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  newNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  newNode);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    child2);    	non-compiled	[CE]  ')'  expected	37	None	replace
7	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    child2);    	non-compiled	[CE]  ')'  expected	37	None	replace
8	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child2,  config);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child2,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    child2);    	non-compiled	[CE]  ')'  expected	37	None	replace
9	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type);	  return    new    Node(child1,    type,    child2);    	non-compiled	[CE]  ')'  expected	27	None	replace
10	[BUG]  [BUGGY]  return  new  Node(child2,  type,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child2,  type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child2,  type,  child1);	  return    new    Node(child1,    type,    child2);    	non-compiled	[CE]  ')'  expected	27	None	replace
11	[BUG]  [BUGGY]  return  new  Node(type,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1);	  return    new    Node(child1,    type,    child2);    	non-compiled	[CE]  ')'  expected	27	None	replace
12	[BUG]  [BUGGY]  return  new  Node(newNode,  type,  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  type,  child1);	  return    new    Node(child1,    type,    child2);    	non-compiled	[CE]  ')'  expected	27	None	replace
13	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2;	  return    new    Node(type,    child1,    child2).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	4	None	replace
14	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(newNode);	  return    new    Node(type,    child2,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	36	None	replace
15	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(newNode);	  return    new    Node(type,    child2,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	36	None	replace
16	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(parent,  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(parent,  child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent,    child2);    	non-compiled	[CE]  ')'  expected	26	None	replace
17	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(parent,  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(parent,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(parent,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent,    child2);    	non-compiled	[CE]  ')'  expected	26	None	replace
18	[BUG]  [BUGGY]  return  new  Node(newNode,  type,  child1,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  type,  child1,  child2);	  return    new    Node(newNode,    child1,    child2);    	non-compiled	[CE]  ')'  expected	40	None	replace
19	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  child1,  child2,  type);	  return    new    Node(newNode,    child1,    child2);    	non-compiled	[CE]  ')'  expected	40	None	replace
20	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clone();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clone();	  return    new    Node(child1,    type,    child2).clone();    	non-compiled	[CE]  ')'  expected	23	None	replace
21	[BUG]  [BUGGY]  return  new  Node(child2,  type,  child1).clone();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child2,  type,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child2,  type,  child1).clone();	  return    new    Node(child1,    type,    child2).clone();    	non-compiled	[CE]  ')'  expected	23	None	replace
22	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child1).clone();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  child1).clone();	  return    new    Node(child1,    type,    child2).clone();    	non-compiled	[CE]  ')'  expected	23	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  errorReporter);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  errorReporter);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  this);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  this);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  config);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  config);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  errorReporter));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  errorReporter));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  errorReporter));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  config));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  config));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  config));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type));	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2));	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  errorReporter);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  errorReporter);	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  config);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  config);	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  this);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  this);	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child1));	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
35	[BUG]  [BUGGY]  return  new  Node(type,  child1).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1).clone();	  return    new    Node(child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	21	None	replace
36	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clone();	  return    new    Node(child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	21	None	replace
37	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(child2);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	24	None	replace
38	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1)clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1)clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1)clonePropsFrom(templateNode);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	24	None	replace
39	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  templateNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  templateNode);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	24	None	replace
40	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(child1);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
41	[BUG]  [BUGGY]  return  new  Node(child1,  child2)clonePropsFrom(type);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2)clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2)clonePropsFrom(type);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
42	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(parent);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(parent);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
43	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(parent);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).clonePropsFrom(parent);	  return    new    Node(type,    child2,    child1).clonePropsFrom(parent);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
44	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(parent);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.clonePropsFrom(parent);	  return    new    Node(type,    child2,    child1).clonePropsFrom(parent);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
45	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  newNode(type,  child2,  child1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	newNode(type,  child2,  child1);	  newNode(type,    child1,    child2);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalStateException( " ");  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
48	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.EXPR_RESULT);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.EXPR_RESULT);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.EXPR_RESULT);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
49	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
50	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.NAME);  }  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.NAME);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
51	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(child2,  parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
52	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
53	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(child2,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(child2,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(child2,  parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
54	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent,  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent,  false);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
55	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    config);    	non-compiled	[CE]  ')'  expected	32	None	replace
56	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(newNode,  config);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(newNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(newNode,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    config);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
57	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    config);    	non-compiled	[CE]  ')'  expected	32	None	replace
58	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(config,  newNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(config,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(config,  newNode);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    config);    	non-compiled	[CE]  ')'  expected	32	None	replace
59	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).clonePropsFrom(newNode);	  return    new    Node(type,    child2,    child1).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	31	None	replace
60	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.clonePropsFrom(newNode);	  return    new    Node(type,    child2,    child1).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	31	None	replace
61	[BUG]  [BUGGY]  return  new  Node(newName,  type,  child1,  child2);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  type,  child1,  child2);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  ')'  expected	41	None	replace
62	[BUG]  [BUGGY]  Node  newBlock  =  new  Node(type,  child1,  child2);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Node  newBlock  =  new  Node(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Node  newBlock  =  new  Node(type,  child1,  child2);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  ')'  expected	41	None	replace
63	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2,  type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2,  type);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  ')'  expected	41	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child1));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child1));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  type,  child2));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  type,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  type,  child2));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  config));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  config));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  config));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1),  child2));  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1),  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1),  child2));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2),  errorReporter);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2),  errorReporter);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  type,  child1,  child2));  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  type,  child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  type,  child1,  child2));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
70	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).clonePropsFrom(child1);	  return    new    Node(type,    child2,    child1).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	3	None	replace
71	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child2,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(type,  child2,  child1);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	45	None	replace
72	[BUG]  [BUGGY]  return  NodeUtil.newName(child1,  type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(child1,  type);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	45	None	replace
73	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(type,  child1);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	45	None	replace
74	[BUG]  [BUGGY]  return  NodeUtil.newString(type,  child1,  child2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newString(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newString(type,  child1,  child2);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	45	None	replace
75	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child1,  child2,  config);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(type,  child1,  child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(type,  child1,  child2,  config);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	45	None	replace
76	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child1).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child1).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child1).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
77	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(type);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
78	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child2).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child2).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child2).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
79	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
80	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(newNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(newNode);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
81	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(child1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.clonePropsFrom(child1));	  return    new    Node(type,    child1,    child2.clonePropsFrom(child2));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
82	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1.clonePropsFrom(child2));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1.clonePropsFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1.clonePropsFrom(child2));	  return    new    Node(type,    child1,    child2.clonePropsFrom(child2));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
83	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child2.clonePropsFrom(child1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child2.clonePropsFrom(child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child2.clonePropsFrom(child1));	  return    new    Node(type,    child1,    child2.clonePropsFrom(child2));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
84	[BUG]  [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2.clonePropsFrom(type));	  return    new    Node(type,    child1,    child2.clonePropsFrom(child2));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
85	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child1.clonePropsFrom(child2));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child1.clonePropsFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child1.clonePropsFrom(child2));	  return    new    Node(type,    child1,    child2.clonePropsFrom(child2));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1).clonePropsFrom(child2);	  return    new    Node(child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
87	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2));	  return    new    Node(child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
88	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  config,  parent);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  config,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  config,  parent);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
89	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  config,  fileOverviewInfo);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  config,  fileOverviewInfo);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  config,  fileOverviewInfo);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
90	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  config,  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  config,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  config,  null);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
91	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  config,  false);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  config,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  config,  false);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
92	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  parent);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  parent);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
93	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  config,  transformDispatcher);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  config,  transformDispatcher);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  config,  transformDispatcher);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  ')'  expected	29	None	replace
94	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(templateNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
95	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  child2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(type,  child2);	  return    new    Node(child1,    child2).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
96	[BUG]  [BUGGY]  return  new  Node(child2,  child1).clonePropsFrom(templateNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child2,  child1).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child2,  child1).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
97	[BUG]  [BUGGY]  return  this.transformDispatcher.newNode(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  this.transformDispatcher.newNode(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  this.transformDispatcher.newNode(type,  child1,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
98	[BUG]  [BUGGY]  return  parentDispatcher.newNode(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  parentDispatcher.newNode(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  parentDispatcher.newNode(type,  child1,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
99	[BUG]  [BUGGY]  return  parent.newNode(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  parent.newNode(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  parent.newNode(type,  child1,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
100	[BUG]  [BUGGY]  return  transformDispatcher.newNode(type,  child2,  child1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  transformDispatcher.newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  transformDispatcher.newNode(type,  child2,  child1);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
101	[BUG]  [BUGGY]  return  child1.newNode(type,  child2,  child1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  child1.newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  child1.newNode(type,  child2,  child1);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
102	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).clone();	  return    new    Node(type,    child2,    child1).clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
103	[BUG]  [BUGGY]  return  Node.newNode(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newNode(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newNode(type,  child1,  child2);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
104	[BUG]  [BUGGY]  return  Node.newNumber(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newNumber(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newNumber(type,  child1,  child2);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
105	[BUG]  [BUGGY]  return  Node.newString(type,  child2,  child1);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newString(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newString(type,  child2,  child1);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
106	[BUG]  [BUGGY]  return  Node.newBlock(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newBlock(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newBlock(type,  child1,  child2);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
107	[BUG]  [BUGGY]  return  Node.newInteger(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newInteger(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newInteger(type,  child1,  child2);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
108	[BUG]  [BUGGY]  return  Node.newString(type,  child1);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newString(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newString(type,  child1);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
109	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
110	[BUG]  [BUGGY]  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
111	[BUG]  [BUGGY]  Node  c  =  child1.getFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Node  c  =  child1.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Node  c  =  child1.getFirstChild();	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
112	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode;  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
113	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  this;  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  this;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  this;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
114	[BUG]  [BUGGY]  Node  c  =  child2.getFirstChild();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Node  c  =  child2.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Node  c  =  child2.getFirstChild();	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
115	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  type;  }  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  type;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  type;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
116	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child2,  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(type,  child2,  child1);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
117	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  config);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(type,  child1,  child2,  config);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
118	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(type,  child1);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
119	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  child1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(type,  child1,  child2,  child1);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
120	[BUG]  [BUGGY]  NodeUtil.newNode(type,  child1,  child2);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeUtil.newNode(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeUtil.newNode(type,  child1,  child2);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
121	[BUG]  [BUGGY]  return  NodeUtil.newNode(child1,  type);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(child1,  type);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
122	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).newNode();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).newNode();	  return    new    Node(type,    child2,    child2).newNode();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
123	[BUG]  [BUGGY]  return  new  Node(type,  child1).newNode();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1).newNode();	  return    new    Node(child1,    child2).newNode();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  return  new  Node(type,  child1.newNode());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1.newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1.newNode());	  return    new    Node(child1,    child2).newNode();    	non-compiled	[CE]  	18	None	replace
125	[BUG]  [BUGGY]  return  new  Node(type,  child2).newNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2).newNode();	  return    new    Node(child1,    child2).newNode();    	non-compiled	[CE]  	18	None	replace
126	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1,  child2);	  return    new    Node(type,    child2,    child1);    	non-compiled	[CE]  ')'  expected	28	None	replace
127	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).removeChild(child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).removeChild(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).removeChild(child2);	  return    new    Node(type,    child1,    child2).removeChild(child2);    	non-compiled	[CE]  ')'  expected	46	None	replace
128	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).replaceChild(child2);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).replaceChild(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).replaceChild(child2);	  return    new    Node(type,    child1,    child2).removeChild(child2);    	non-compiled	[CE]  ')'  expected	46	None	replace
129	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).removeChild(child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).removeChild(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).removeChild(child1);	  return    new    Node(type,    child1,    child2).removeChild(child2);    	non-compiled	[CE]  ')'  expected	46	None	replace
130	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).addChildToFront(child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).addChildToFront(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).addChildToFront(child2);	  return    new    Node(type,    child1,    child2).removeChild(child2);    	non-compiled	[CE]  ')'  expected	46	None	replace
131	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null,  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child1,  child2,  null,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null,  false);	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  ')'  expected	10	None	replace
132	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null,  config);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child1,  child2,  null,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null,  config);	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  ')'  expected	10	None	replace
133	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null,  true);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child1,  child2,  null,  true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null,  true);	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  ')'  expected	10	None	replace
134	[BUG]  [BUGGY]  return  new  Node(type,  child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2);	  return    new    Node(child1,    child2);    	non-compiled	[CE]  ')'  expected	39	None	replace
135	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child2);	  return    new    Node(child1,    child2);    	non-compiled	[CE]  ')'  expected	39	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  child2),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
142	[BUG]  [BUGGY]  return  new  Node(type,  child1.clone()).clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1.clone()).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1.clone()).clone();	  return    new    Node(child1,    type).clone();    	non-compiled	[CE]  ')'  expected	22	None	replace
143	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c);  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
144	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(n);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(n);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(n);  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
145	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(null);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(null);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(null);  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
146	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c,  type);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c,  type);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c,  type);  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
147	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(child);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(child);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(child);  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
148	[BUG]  [BUGGY]  return  new  Node(child2,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child2,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child2,  child1).clonePropsFrom(type);	  return    new    Node(child1,    child2).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	1	None	replace
149	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(type,  type);	  return    new    Node(child1,    child2).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	1	None	replace
150	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).newNode();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child1).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).newNode();	  return    new    Node(type,    child2,    child1).newNode();    	non-compiled	[CE]  ')'  expected	17	None	replace
151	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child2);	  return    new    Node(type,    child1,    child2,    child1);    	non-compiled	[CE]  ')'  expected	47	None	replace
152	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child3);	  return    new    Node(type,    child1,    child2,    child1);    	non-compiled	[CE]  ')'  expected	47	None	replace
153	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(child1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.clonePropsFrom(child1);	  return    new    Node(type,    child1,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	14	None	replace
154	[BUG]  [BUGGY]  return  new  Node(newName,  type,  child1,  child2).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  type,  child1,  child2).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  type,  child1,  child2).clone();	  return    new    Node(newName,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	34	None	replace
155	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2,  type).clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2,  type).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2,  type).clone();	  return    new    Node(newName,    child1,    child2).clone();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
156	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1,  child2).clonePropsFrom(parent);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1,  child2).clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1,  child2).clonePropsFrom(parent);	  return    new    Node(type,    child2,    child2).clonePropsFrom(parent);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
157	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1.clonePropsFrom(parent);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1.clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1.clonePropsFrom(parent);	  return    new    Node(type,    child2,    child2).clonePropsFrom(parent);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
158	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child1,  child2);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
159	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  type);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child1,  child2,  type);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
160	[BUG]  [BUGGY]  return  new  Node(null,  type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(null,  type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(null,  type,  child1,  child2);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
161	[BUG]  [BUGGY]  return  new  Node(this,  type,  child1,  child2);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(this,  type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(this,  type,  child1,  child2);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	30	None	replace
162	[BUG]  [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
163	[BUG]  [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
164	[BUG]  [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	type  =  type  ==  Token.NAME)  {  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
165	[BUG]  [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c  >=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c  >=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c  >=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
166	[BUG]  [BUGGY]  int  type  =  type  ==  Token.NAME?  child1.getFirstChild()  :  child2.getNext();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  int  type  =  type  ==  Token.NAME?  child1.getFirstChild()  :  child2.getNext();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	int  type  =  type  ==  Token.NAME?  child1.getFirstChild()  :  child2.getNext();	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
167	[BUG]  [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c  >>  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c  >>  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c  >>  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
168	[BUG]  [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext()  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext()  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	type  =  type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext()	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
169	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1.newNode());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1.newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1.newNode());	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
170	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.newNode(),  false);	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
171	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child2.newNode());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child2.newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child2.newNode());	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
172	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.newNode(),  null);	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
173	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2).clonePropsFrom(type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  child1,  child2).clonePropsFrom(type);	  return    new    Node(type,    child2,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	36	None	replace
174	[BUG]  [BUGGY]  return  new  Node(newName,  child2,  child1).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child2,  child1).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child2,  child1).clone();	  return    new    Node(newName,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	34	None	replace
175	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2,  child2).clone();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2,  child2).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2,  child2).clone();	  return    new    Node(newName,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	34	None	replace
176	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).removeChild(0);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).removeChild(0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).removeChild(0);	  return    new    Node(type,    child1,    child2).removeChild(child2);    	non-compiled	[CE]  ')'  expected	46	None	replace
177	[BUG]  [BUGGY]  return  new  Node(newBlock,  type,  child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newBlock,  type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newBlock,  type,  child2);	  return    new    Node(child1,    type,    child2);    	non-compiled	[CE]  ')'  expected	27	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  child2);	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  child2));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1,  child2));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1,  child2));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type,  child2));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  type,  child2));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
183	[BUG]  [BUGGY]  return  newNode(type,  child2,  child1,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child2,  child1,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child2,  child1,  null);	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  ')'  expected	10	None	replace
184	[BUG]  [BUGGY]  return  newNode(child1,  child2,  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(child1,  child2,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(child1,  child2,  null);	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  ')'  expected	10	None	replace
185	[BUG]  [BUGGY]  return  new  Node(type,  child2).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2).clone();	  return    new    Node(child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	21	None	replace
186	[BUG]  [BUGGY]  return  new  Node(type,  child1.clone());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1.clone());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1.clone());	  return    new    Node(child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	21	None	replace
187	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  config);	  return    new    Node(type,    child1,    child2,    config);    	non-compiled	[CE]  ')'  expected	29	None	replace
188	[BUG]  [BUGGY]  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  child2  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  child2.getNext();  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  child2  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  child2.getNext();  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  child2  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  child2.getNext();  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext()  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext()  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext()	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    type    =    c.getNext();    }    	non-compiled	[CE]  ')'  expected	49	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child2),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child2),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type,  child2),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  new  TransformDispatcher());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  new  TransformDispatcher());	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    new    TransformDispatcher());    	non-compiled	[CE]  ')'  expected	48	None	replace
196	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)newNode();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)newNode();	  return    new    Node(type,    child2,    child2).newNode();    	non-compiled	[CE]  ')'  expected	35	None	replace
197	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(child2,  config);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(child2,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
198	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(newNode,  config);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(newNode,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(newNode,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    config);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME);  for(Node  c  =  child2.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode;  }	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    c;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
202	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2).clonePropsFrom(child2,  type);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child1,  child2).clonePropsFrom(child2,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child1,  child2).clonePropsFrom(child2,  type);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    parent);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
203	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child2).clone();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  child2).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  child2).clone();	  return    new    Node(child1,    type,    child2).clone();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
204	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  child2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(newNode,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    child2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
205	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(newNode,  type);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(newNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(newNode,  type);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    child2);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
206	[BUG]  [BUGGY]  return  NodeUtil.newName(child1,  child2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(child1,  child2);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
207	[BUG]  [BUGGY]  return  NodeUtil.newName(parent,  child1,  child2);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(parent,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(parent,  child1,  child2);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
208	[BUG]  [BUGGY]  return  NodeUtil.newName(child1,  type,  child2);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newName(child1,  type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(child1,  type,  child2);	  return    NodeUtil.newName(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
209	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  parent).clonePropsFrom(templateNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  parent).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  parent).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
210	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  config).clonePropsFrom(templateNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  config).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  config).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
211	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePathFrom(type);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePathFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePathFrom(type);	  return    new    Node(child1,    child2).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	1	None	replace
212	[BUG]  [BUGGY]  return  NodeUtil.newNode(child1,  child2);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(child1,  child2);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
213	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent,  child1,  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(parent,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(parent,  child1,  child2);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	43	None	replace
214	[BUG]  [BUGGY]  return  new  Node(newBlock,  type,  child1,  child2);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newBlock,  type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newBlock,  type,  child1,  child2);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	30	None	replace
215	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child1,  child2,  parent);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	30	None	replace
216	[BUG]  [BUGGY]  return  child1!=  null?  null  :  transformDispatcher.newNode(type,  child1,  child2);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  child1!=  null?  null  :  transformDispatcher.newNode(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  child1!=  null?  null  :  transformDispatcher.newNode(type,  child1,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	8	None	replace
217	[BUG]  [BUGGY]  return  transformDispatcher.newNode(child1,  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  transformDispatcher.newNode(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  transformDispatcher.newNode(child1,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	8	None	replace
218	[BUG]  [BUGGY]  return  child1.newNode(type,  child2);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  child1.newNode(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  child1.newNode(type,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	8	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  child1,  child2));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  child1,  child2));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2,  type));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2,  type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2,  type));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	12	None	replace
222	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2,  config);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2,  config);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  ')'  expected	41	None	replace
223	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2,  null);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  ')'  expected	41	None	replace
224	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).replaceChild(child1,  child2).clone();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).replaceChild(child1,  child2).clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).replaceChild(child1,  child2).clone();	  return    new    Node(type,    child2,    child1).clone();    	non-compiled	[CE]  ')'  expected	20	None	replace
225	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent,    child2);    	non-compiled	[CE]  ')'  expected	26	None	replace
226	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).cloneParentsFrom(parent,  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).cloneParentsFrom(parent,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).cloneParentsFrom(parent,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent,    child2);    	non-compiled	[CE]  ')'  expected	26	None	replace
227	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePathFrom(parent,  child2);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePathFrom(parent,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePathFrom(parent,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent,    child2);    	non-compiled	[CE]  ')'  expected	26	None	replace
228	[BUG]  [BUGGY]  return  new  Node(newNode,  child2,  child1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  child2,  child1);	  return    new    Node(newNode,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
229	[BUG]  [BUGGY]  return  Node.newString(child1,  child2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newString(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newString(child1,  child2);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	13	None	replace
230	[BUG]  [BUGGY]  return  Node.newString(child1,  type);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  Node.newString(child1,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newString(child1,  type);	  return    Node.newString(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	13	None	replace
231	[BUG]  [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1.clonePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1.clonePropsFrom(child2);	  return    new    Node(child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	15	None	replace
232	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child);	  return    new    Node(type,    child1,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	6	None	replace
233	[BUG]  [BUGGY]  return  new  Node(type,  child1.newNode(),  child2).newNode();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1.newNode(),  child2).newNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1.newNode(),  child2).newNode();	  return    new    Node(type,    child2,    child1).newNode();    	non-compiled	[CE]  ')'  expected	17	None	replace
234	[BUG]  [BUGGY]  return  new  Node(child1,  child2)clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2)clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2)clonePropsFrom(templateNode);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	24	None	replace
235	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)cloneNodeFrom(child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)cloneNodeFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)cloneNodeFrom(child2);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	24	None	replace
236	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePathFrom(child2);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2)clonePathFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePathFrom(child2);	  return    new    Node(type,    child1,    child2)clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	24	None	replace
237	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  this);  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  this);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  this);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
238	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  new  NodeTraversal());  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  new  NodeTraversal());  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  new  NodeTraversal());  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
239	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkNotNull(child2);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkNotNull(child2);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkNotNull(child2);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
240	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child2).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child2).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child2).clonePropsFrom(child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	4	None	replace
241	[BUG]  [BUGGY]  return  new  Node(type,  child2).clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2).clonePropsFrom(templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2).clonePropsFrom(templateNode);	  return    new    Node(child1,    child2).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	5	None	replace
242	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(parent);	  return    new    Node(child1,    child2).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	5	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(child2));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(child2));	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  ')'  expected	50	None	replace
244	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.newNode(),  child1);	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
245	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.newNode(),  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.newNode(),  child2);	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
246	[BUG]  [BUGGY]  return  new  Node(child1,  child2.newNode());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2.newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2.newNode());	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  ')'  expected	19	None	replace
247	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2).removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2).removeFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2).removeFirstChild();	  return    new    Node(newName,    child1,    child2).clone();    	non-compiled	[CE]  	34	None	replace
248	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).newString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).newString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).newString();	  return    new    Node(type,    child1,    child2).removeChild(child2);    	non-compiled	[CE]  	46	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child1));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child1));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  	12	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  child1,  child2));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  child1,  child2));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  child1,  child2));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2));    	non-compiled	[CE]  	12	None	replace
251	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent,  type,  child1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  NodeUtil.newNode(parent,  type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(parent,  type,  child1);	  return    NodeUtil.newNode(type,    child1,    child2);    	non-compiled	[CE]  	43	None	replace
252	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null,  child1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child1,  child2,  null,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null,  child1);	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  	10	None	replace
253	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null,  child1.getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child1,  child2,  null,  child1.getType());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null,  child1.getType());	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  	10	None	replace
254	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null,  child1.getParent());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  newNode(type,  child1,  child2,  null,  child1.getParent());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null,  child1.getParent());	  return    newNode(type,    child1,    child2,    null);    	non-compiled	[CE]  	10	None	replace
255	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  type,  child2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  type,  child2);	  return    new    Node(child1,    type,    child2);    	non-compiled	[CE]  	27	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode());	  if(type    ==    Token.NAME)    {    for(Node    c    =    child1.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return    newNode(c);    }    	non-compiled	[CE]  	50	None	replace
257	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2).clonePropsFrom(child2,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child1,  child2).clonePropsFrom(child2,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child1,  child2).clonePropsFrom(child2,  parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    parent);    	non-compiled	[CE]  	2	None	replace
258	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).removePropsFrom(child2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).removePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).removePropsFrom(child2);	  return    new    Node(type,    child1,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  	14	None	replace
259	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  child1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent,    child2);    	non-compiled	[CE]  	26	None	replace
260	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2,  child1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newName,  child1,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2,  child1);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  	41	None	replace
261	[BUG]  [BUGGY]  return  new  Node(newBlock,  child1,  child2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newBlock,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newBlock,  child1,  child2);	  return    new    Node(newName,    child1,    child2);    	non-compiled	[CE]  	41	None	replace
262	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  config));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  config));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  config));	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode,    config);    	non-compiled	[CE]  	32	None	replace
263	[BUG]  [BUGGY]  return  child1.newNode(type,  child2,  child2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  child1.newNode(type,  child2,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  child1.newNode(type,  child2,  child2);	  return    transformDispatcher.newNode(type,    child1,    child2);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
264	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(this);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(this);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
265	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(this,  templateNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(this,  templateNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(this,  templateNode);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
266	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(parent);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(parent);	  return    new    Node(child1,    child2,    type).clonePropsFrom(templateNode);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
267	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).removeChild(child1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).removeChild(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).removeChild(child1);	  return    new    Node(type,    child2,    child1).clone();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
268	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child1).replaceChild(child1,  child2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child1).replaceChild(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child1).replaceChild(child1,  child2);	  return    new    Node(type,    child1,    child2,    child1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
269	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.cloneTree());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2.cloneTree());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.cloneTree());	  return    new    Node(type,    child1,    child2.newNode());    	non-compiled	[CE]  <identifier>  expected	19	None	replace
270	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePathFrom(child2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePathFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePathFrom(child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
271	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child1,  child2,  child1);	  return    new    Node(parent,    type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	30	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  child2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  child2);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child1));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child1));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2));    	non-compiled	[CE]  ')'  expected	9	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  false);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  false);	  NodeTraversal.traverse(compiler,    child1,    newNode(type));    	non-compiled	[CE]  ')'  expected	44	None	replace
275	[BUG]  [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
276	[BUG]  [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  this);  }  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  this);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  NodeTraversal.traverse(compiler,  this);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
277	[BUG]  [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.VAR);  return  newNode(type,  child1,  child2);  }  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.VAR);  return  newNode(type,  child1,  child2);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.VAR);  return  newNode(type,  child1,  child2);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
278	[BUG]  [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.NAME);  return  newNode(type,  child1,  child2);  }  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.NAME);  return  newNode(type,  child1,  child2);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1  ==  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.NAME);  return  newNode(type,  child1,  child2);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
279	[BUG]  [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.VAR);  return  newNode(type,  child1,  child2);  }  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.VAR);  return  newNode(type,  child1,  child2);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(child1!=  null)  {  newNode(type,  child1,  child2);  }  else  {  Preconditions.checkState(child2.getType()  ==  Token.VAR);  return  newNode(type,  child1,  child2);  }	  newNode(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	11	None	replace
280	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  child1,  child2,  child1);	  return    new    Node(newNode,    child1,    child2);    	non-compiled	[CE]  ')'  expected	40	None	replace
281	[BUG]  [BUGGY]  return  new  Node(newNode,  type,  child2,  child2);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(newNode,  type,  child2,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  type,  child2,  child2);	  return    new    Node(newNode,    child1,    child2);    	non-compiled	[CE]  ')'  expected	40	None	replace
282	[BUG]  [BUGGY]  return  new  Node(parent,  child2,  child2).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(parent,  child2,  child2).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  child2,  child2).clonePropsFrom(type);	  return    new    Node(type,    child2,    child2).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	42	None	replace
283	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  config);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  ')'  expected	38	None	replace
284	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(config);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2)  {      [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2,    config);    	non-compiled	[CE]  not  a  statement	38	None	replace
