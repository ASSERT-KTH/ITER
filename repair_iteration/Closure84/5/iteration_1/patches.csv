bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(type);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(child1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(child1);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child1);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child1);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	1	None	replace
5	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(templateNode);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(templateNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(templateNode);	  return    new    Node(type,    child2,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ';'  expected	2	None	replace
6	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(templateNode);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(templateNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).clonePropsFrom(templateNode);	  return    new    Node(type,    child2,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ';'  expected	2	None	replace
7	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(templateNode);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2,  type).clonePropsFrom(templateNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2,  type).clonePropsFrom(templateNode);	  return    new    Node(type,    child2,    child1).clonePropsFrom(templateNode);    	non-compiled	[CE]  ';'  expected	2	None	replace
8	[BUG]  [BUGGY]  return  transformDispatcher.newNode(type,  child1,  child2);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  transformDispatcher.newNode(type,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  transformDispatcher.newNode(type,  child1,  child2);	      	non-compiled	[CE]  ';'  expected	6	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2));  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2));  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2));	      	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  null);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  newNode(type,  child1,  child2,  null);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  newNode(type,  child1,  child2,  null);	      	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  newNode(type,  child1,  child2);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  newNode(type,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	newNode(type,  child1,  child2);	      	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2));  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2));  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2));	      	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  return  Node.newString(type,  child1,  child2);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  Node.newString(type,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  Node.newString(type,  child1,  child2);	      	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(child2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child1).clonePropsFrom(child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child1).clonePropsFrom(child2);	  return    new    Node(type,    child2,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(child2);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clonePropsFrom(child2);	  return    new    Node(type,    child2,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	8	None	replace
16	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(child2));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2.clonePropsFrom(child2));  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.clonePropsFrom(child2));	  return    new    Node(type,    child2,    child1).clonePropsFrom(child2);    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).newNode();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child1).newNode();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).newNode();	  return    new    Node(type,    child1,    child2).newNode();    	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  return  new  Node(child1,  child2).newNode();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2).newNode();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).newNode();	  return    new    Node(type,    child1,    child2).newNode();    	non-compiled	[CE]  ';'  expected	9	None	replace
19	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2.newNode());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2.newNode());  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2.newNode());	  return    new    Node(type,    child1,    child2).newNode();    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clone();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child1).clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clone();	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ';'  expected	4	None	replace
21	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clone();  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2).clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2).clone();	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	4	None	replace
22	[BUG]  [BUGGY]  return  new  Node(child1,  type).clone();  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  type).clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  type).clone();	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child2).clone();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  type,  child2).clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  type,  child2).clone();	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	4	None	replace
24	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(templateNode);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2)clonePropsFrom(templateNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2)clonePropsFrom(templateNode);	  return    new    Node(type,    child2,    child2).clonePropsFrom(templateNode);    	non-compiled	[CE]  ')'  expected	7	None	replace
25	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(parent);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(parent);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(parent,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	5	None	replace
27	[BUG]  [BUGGY]  return  new  Node(child1,  type,  child2);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  type,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  type,  child2);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
28	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child1);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
29	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  config);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2,  config);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  config);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
30	[BUG]  [BUGGY]  return  new  Node(parent,  type,  child1,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(parent,  type,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(parent,  type,  child1,  child2);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
31	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child1).clonePropsFrom(newNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child1).clonePropsFrom(newNode);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	10	None	replace
32	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  config);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  config);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	10	None	replace
33	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child2).clone();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child2).clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child2).clone();	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	4	None	replace
34	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2).clone();  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(newName,  child1,  child2).clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2).clone();	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	4	None	replace
35	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child2).newNode();  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child2).newNode();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child2).newNode();	  return    new    Node(type,    child1,    child2).newNode();    	non-compiled	[CE]  ')'  expected	9	None	replace
36	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child2).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child2).clonePropsFrom(newNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child2).clonePropsFrom(newNode);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	10	None	replace
37	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child2);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode,  child2);	  return    new    Node(type,    child1,    child2).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	10	None	replace
38	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  config);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  config);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child2,  config);	  return    new    Node(type,    child1,    child2).clonePropsFrom(child2);    	non-compiled	[CE]  ')'  expected	1	None	replace
39	[BUG]  [BUGGY]  return  new  Node(child1,  child2);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(child1,  child2);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
40	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(newNode,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newNode,  child1,  child2);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
41	[BUG]  [BUGGY]  return  new  Node(newName,  child1,  child2);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(newName,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(newName,  child1,  child2);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
42	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child2).clonePropsFrom(parent);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child2,  child2).clonePropsFrom(parent);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child2,  child2).clonePropsFrom(parent);	  return    new    Node(type,    child1,    child2).clonePropsFrom(parent);    	non-compiled	[CE]  ')'  expected	5	None	replace
43	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newNode(type,  child1,  child2);	      	non-compiled	[CE]  ')'  expected	6	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type));  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type));	      	non-compiled	[CE]  ')'  expected	6	None	replace
45	[BUG]  [BUGGY]  return  NodeUtil.newName(type,  child1,  child2);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  NodeUtil.newName(type,  child1,  child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  NodeUtil.newName(type,  child1,  child2);	      	non-compiled	[CE]  ')'  expected	6	None	replace
46	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).removeChild(child2);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2).removeChild(child2);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2).removeChild(child2);	  return    new    Node(type,    child1,    child2).clone();    	non-compiled	[CE]  ')'  expected	4	None	replace
47	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child1);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  return  new  Node(type,  child1,  child2,  child1);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	return  new  Node(type,  child1,  child2,  child1);	  return    new    Node(type,    child1,    child2);    	non-compiled	[CE]  ')'  expected	3	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  new  TransformDispatcher());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  new  TransformDispatcher());  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  new  TransformDispatcher());	      	non-compiled	[CE]  ')'  expected	6	None	replace
49	[BUG]  [BUGGY]  if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  type  =  c.getNext();  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
50	[BUG]  [BUGGY]  if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c);  }  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c);  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  newNode(c);  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
51	[BUG]  [BUGGY]  if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  newNode(int  type,  Node  child1,  Node  child2)  {    [BUGGY]  if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  directives  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  cur  flagsNode  irNode  key  labelName  literalStringNode  lp  n  newBlock  newName  node  operand  prev  ret  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  comment  directive  flags  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  int  type  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.1796053020267749	1198	1198	1	replace	if(type  ==  Token.NAME)  {  for(Node  c  =  child1.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return  c;  }	      	non-compiled	[CE]  ')'  expected	6	None	replace
