bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceName);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
2	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.transform(sourceName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.transform(sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.transform(sourceName);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
3	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceName,  sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceName,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceName,  sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(fileOverviewInfo,  sourceString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(fileOverviewInfo,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(fileOverviewInfo,  sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
6	[BUG]  [BUGGY]  JSDocInfo  sourceName  =  node.transform(sourceString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  sourceName  =  node.transform(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  sourceName  =  node.transform(sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  sourceString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  sourceString);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  node.getSourceName());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  node.getSourceName());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  node.getSourceName());	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno()  -  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLineno()  -  1;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLineno()  -  1;	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
12	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLineno()  +  1;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLineno()  +  1;	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
13	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno()  /  2;  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLineno()  /  2;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLineno()  /  2;	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
14	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno(),  charno);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLineno(),  charno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLineno(),  charno);	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
15	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno(),  1;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLineno(),  1;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLineno(),  1;	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
16	[BUG]  [BUGGY]  Node  lineno  =  node.getLineno(),  null;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLineno(),  null;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLineno(),  null;	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
17	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  sourceName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  sourceName);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
18	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
19	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
20	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  sourceString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  sourceString);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
21	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  true);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  true);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  true);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  null);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  null);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getType();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getType();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getType();	  Node    jsDocInfo    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
27	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
28	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  node);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
29	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  null);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
30	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  newBlock);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  newBlock);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  newBlock);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
31	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  this.sourceString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  this.sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  this.sourceString);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
32	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getLastChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getLastChild();	  AstNode    jsDocInfo    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
33	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getNext();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getNext();	  AstNode    jsDocInfo    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
34	[BUG]  [BUGGY]  AstNode  irNode  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  irNode  =  node.getFirstChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  irNode  =  node.getFirstChild();	  AstNode    jsDocInfo    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
35	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getAncestor(1);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getAncestor(1);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getAncestor(1);	  AstNode    jsDocInfo    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
36	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder);	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
37	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceString);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceString);	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileOverviewInfo);	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo());	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJSDocInfoForNode(node);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJSDocInfoForNode(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJSDocInfoForNode(node);	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(transformDispatcher,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(transformDispatcher,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDoc(transformDispatcher,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
42	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
43	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
44	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDoc(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
45	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  templateNode);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
46	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceName);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node.getSourceName());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node.getSourceName());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node.getSourceName());	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    null);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
50	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocInfo);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    null);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
51	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  null,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  null,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  null,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    null);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
52	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.fileOverviewInfo();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.fileOverviewInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.fileOverviewInfo();	  JSDocInfo    jsDocInfo    =    node.fileOverviewInfo();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
54	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  false);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
55	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(false);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(false);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
56	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  true);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
57	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  true);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
58	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  false);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  false);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
59	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  false,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  false,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  false,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
60	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  null);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  null);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
61	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node.getCharno());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node.getCharno());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node.getCharno());	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
62	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
63	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node.getJSDocInfo());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node.getJSDocInfo());	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
64	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  sourceString);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  sourceString);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
65	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
66	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node.getLineno());  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node.getLineno());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo(),  node.getLineno());	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
67	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node.getJSDocInfo());	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getLastChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getLastChild();	  Node    jsDocInfo    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
69	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getChildCount();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getChildCount();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getChildCount();	  Node    jsDocInfo    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
70	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  templateNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  templateNode);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  templateNode);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
73	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  null);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
74	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  errorReporter);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
75	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getJsDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getJsDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getJsDocInfo();	  Node    jsDocInfo    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
77	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getNode();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getNode();	  Node    jsDocInfo    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
78	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    templateNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
79	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  rootNodeJsDocHolder,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    templateNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
80	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  errorReporter);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    templateNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
81	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  templateNode);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
82	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(super.transform(node);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(super.transform(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(super.transform(node);	  JSDocInfo    jsDocInfo    =    super.transform(node);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
83	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  super.transform(node,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    super.transform(node);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
84	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  super.transform(node,  sourceString);	  JSDocInfo    jsDocInfo    =    super.transform(node);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
85	[BUG]  [BUGGY]  JSDocInfo  node  =  node.handleJsDocInfo(transformDispatcher);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.handleJsDocInfo(transformDispatcher);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.handleJsDocInfo(transformDispatcher);	  JSDocInfo    node    =    transformDispatcher.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
86	[BUG]  [BUGGY]  JSDocInfo  node  =  node.handleJsDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.handleJsDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.handleJsDocInfo();	  JSDocInfo    node    =    transformDispatcher.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  JSDocInfo  node  =  node.handleJsDoc(transformDispatcher);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.handleJsDoc(transformDispatcher);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.handleJsDoc(transformDispatcher);	  JSDocInfo    node    =    transformDispatcher.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
88	[BUG]  [BUGGY]  JSDocInfo  node  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder);	  JSDocInfo    node    =    transformDispatcher.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
89	[BUG]  [BUGGY]  JSDocInfo  node  =  transformDispatcher.handleJsDoc(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  transformDispatcher.handleJsDoc(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  transformDispatcher.handleJsDoc(node,  fileOverviewInfo);	  JSDocInfo    node    =    transformDispatcher.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
90	[BUG]  [BUGGY]  JSDocInfo  node  =  fileLevelJsDocBuilder.fileOverviewInfo(node);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  fileLevelJsDocBuilder.fileOverviewInfo(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  fileLevelJsDocBuilder.fileOverviewInfo(node);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder.fileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
91	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.transform(node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.transform(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.transform(node);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder.fileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
92	[BUG]  [BUGGY]  JSDocInfo  fileLevelJsDocBuilder  =  node.fileOverviewInfo();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  fileLevelJsDocBuilder  =  node.fileOverviewInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  fileLevelJsDocBuilder  =  node.fileOverviewInfo();	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder.fileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
93	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  node.getCharno());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  node.getCharno());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  node.getCharno());	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
95	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  node.getJSDocInfo());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  node.getJSDocInfo());	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
96	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  sourceString);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  sourceString);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
97	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.getJSDocInfo(),  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node.getJSDocInfo());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
98	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  this.fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  this.fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  this.fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
99	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  this.fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  this.fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  this.fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
102	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  node);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  sourceString);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
104	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileOverviewInfo);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
105	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
106	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  errorReporter);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
107	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
108	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getImmediateParentNode();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
109	[BUG]  [BUGGY]  Node  irNode  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getParent();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getParent();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
110	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAncestor(1);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getAncestor(1);	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
111	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJSDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJSDocInfo();	  JSDocInfo    jsDocInfo    =    node.handleJsDoc();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
112	[BUG]  [BUGGY]  JSDocInfo  node  =  node.handleJSDocInfo();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.handleJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.handleJSDocInfo();	  JSDocInfo    jsDocInfo    =    node.handleJsDoc();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
113	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJSDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJSDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJSDocInfo(sourceString);	  JSDocInfo    jsDocInfo    =    node.handleJsDoc();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
114	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getFirstChild().getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getFirstChild().getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getFirstChild().getJSDocInfo();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
115	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getJsDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getJsDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getJsDocInfo();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
116	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getAstRootNode();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getAstRootNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getAstRootNode();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
117	[BUG]  [BUGGY]  AstNode[]  jsDocInfo  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode[]  jsDocInfo  =  node.getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode[]  jsDocInfo  =  node.getJSDocInfo();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
118	[BUG]  [BUGGY]  AstNode  irNode  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  irNode  =  node.getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  irNode  =  node.getJSDocInfo();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
119	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  sourceString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  sourceString);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder(node);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
120	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileLevelJsDocBuilder();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileLevelJsDocBuilder();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.fileLevelJsDocBuilder();	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder(node);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
121	[BUG]  [BUGGY]  JSDocInfo  node  =  fileLevelJsDocBuilder(node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  fileLevelJsDocBuilder(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  fileLevelJsDocBuilder(node);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder(node);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
122	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  transformer);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  transformer);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    transformer);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
123	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  transformer,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  transformer,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  transformer,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    transformer);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
124	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  transformer);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  transformer);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    transformer);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
125	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineno);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineno);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    charno);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
126	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineno);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineno);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    charno);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
127	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    charno);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
128	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  true);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    true);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
129	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transformInfo(node,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transformInfo(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transformInfo(node,  true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    true);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
130	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    true);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
131	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  node);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
132	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(node,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
133	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(this,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    node.transform(this);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
134	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.transform(this);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.transform(this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.transform(this);	  JSDocInfo    jsDocInfo    =    node.transform(this);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
135	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
136	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
137	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  node);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
138	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getFirstChild().getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getFirstChild().getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getFirstChild().getJSDocInfo();	  Node    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
139	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getAstRootNode();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getAstRootNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getAstRootNode();	  Node    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
140	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
141	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  templateNode);	  JSDocInfo    jsDocInfo    =    transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
142	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  errorReporter);	  JSDocInfo    jsDocInfo    =    transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
143	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder);	  JsDocInfo    jsDocInfo    =    getJsDocInfo(node);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
144	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceString);	  JsDocInfo    jsDocInfo    =    getJsDocInfo(node);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileOverviewInfo);	  JsDocInfo    jsDocInfo    =    getJsDocInfo(node);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
146	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJSDocInfo(node);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJSDocInfo(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJSDocInfo(node);	  JsDocInfo    jsDocInfo    =    getJsDocInfo(node);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
147	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(sourceString);	  JSDocInfo    jsDocInfo    =    node.handleJsDocInfo(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
148	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    node.handleJsDocInfo(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
149	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(node);	  JSDocInfo    jsDocInfo    =    node.handleJsDocInfo(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
150	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(this);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(this);	  JSDocInfo    jsDocInfo    =    node.handleJsDocInfo(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
151	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
152	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  templateNode);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
153	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  errorReporter);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
154	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  templateNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  templateNode);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
155	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
156	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
157	[BUG]  [BUGGY]  JSDocInfo  node  =  fileOverviewInfo.handleJsDoc(node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  fileOverviewInfo.handleJsDoc(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  fileOverviewInfo.handleJsDoc(node);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
158	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  transform(node,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  transform(node,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  transform(node,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    transform(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
159	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileOverviewInfo,  sourceString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileOverviewInfo,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileOverviewInfo,  sourceString);	  JSDocInfo    jsDocInfo    =    transform(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
160	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.cloneJSDocInfo();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.cloneJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.cloneJSDocInfo();	  JSDocInfo    jsDocInfo    =    node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
161	[BUG]  [BUGGY]  JSDocInfo  node  =  node.cloneJSDocInfo();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.cloneJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.cloneJSDocInfo();	  JSDocInfo    jsDocInfo    =    node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
162	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  errorReporter);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  errorReporter);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    errorReporter);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
163	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  errorReporter);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    errorReporter);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
164	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  errorReporter,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  errorReporter,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  errorReporter,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    errorReporter);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
165	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  errorReporter,  sourceString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  errorReporter,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  errorReporter,  sourceString);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    errorReporter);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
166	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
167	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
168	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
169	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getNext();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getNext();	  JSDocInfo    jsDocInfo    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
170	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  templateNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  templateNode);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    node);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
171	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  sourceName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  sourceName);	  JSDocInfo    jsDocInfo    =    transform(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
172	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  transform(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  transform(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  transform(node,  sourceName);	  JSDocInfo    jsDocInfo    =    transform(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
173	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transformer(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transformer(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transformer(node,  sourceName);	  JSDocInfo    jsDocInfo    =    transform(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
174	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
175	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  templateNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  templateNode);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
176	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  node);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
177	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  templateNode);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  templateNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  templateNode);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
178	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  templateNode,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  templateNode,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  templateNode,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
179	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getJSDocInfo();	  Node    irNode    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
180	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRootNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getAstRootNode();	  Node    irNode    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
181	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild().getNext();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getLastChild().getNext();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getLastChild().getNext();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
182	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getParent();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getParent();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getParent();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
183	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getLastChild();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getLastChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getLastChild();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
184	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getNext()  +  1;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getNext()  +  1;	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
185	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getString();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getString();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getString();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
186	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
187	[BUG]  [BUGGY]  JSDocInfo  node  =  getJsDocInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  getJsDocInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  getJsDocInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
188	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.sourceName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
189	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node.getSourceName());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node.getSourceName());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  node.getSourceName());	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
190	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getCString();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getCString();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getCString();	  Node    jsDocInfo    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
191	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJsDocInfo();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJsDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getJsDocInfo();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
192	[BUG]  [BUGGY]  JsDocInfo  node  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  node  =  node.getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  node  =  node.getJSDocInfo();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
193	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getAstRootNode();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getAstRootNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getAstRootNode();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
194	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString);	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
195	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getParent();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getParent();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
196	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
197	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
198	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  this);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  this);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
199	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  this);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
200	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  null);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
201	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    this);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
202	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
203	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(sourceName,  node);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(sourceName,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(sourceName,  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
204	[BUG]  [BUGGY]  JSDocInfo  node  =  getJsDocInfoForNode(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  getJsDocInfoForNode(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  getJsDocInfoForNode(node,  sourceName);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
205	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(sourceString,  node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(sourceString,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(sourceString,  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
206	[BUG]  [BUGGY]  Node  irNode  =  node.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getNext()  +  1;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getNext()  +  1;	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
207	[BUG]  [BUGGY]  Node  node  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  node  =  node.getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  node  =  node.getJSDocInfo();	  JSDocInfo    node    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
208	[BUG]  [BUGGY]  JSDocInfo  node  =  node.getJSDocInfo(),  fileOverviewInfo;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.getJSDocInfo(),  fileOverviewInfo;  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.getJSDocInfo(),  fileOverviewInfo;	  JSDocInfo    node    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
209	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceName);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
210	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(sourceName,  node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(sourceName,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(sourceName,  node);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
211	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  node.getSourceName());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  node.getSourceName());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  node.getSourceName());	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
212	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceName);	  JSDocInfo    jsDocInfo    =    node.getJSDocInfo(sourceString);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
213	[BUG]  [BUGGY]  JSDocInfo  sourceName  =  node.getJSDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  sourceName  =  node.getJSDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  sourceName  =  node.getJSDocInfo(sourceString);	  JSDocInfo    jsDocInfo    =    node.getJSDocInfo(sourceString);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
214	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceName);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceName);	  JSDocInfo    jsDocInfo    =    node.getJSDocInfo(sourceString);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
215	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getFileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
216	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getFileOverviewInfo(node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getFileOverviewInfo(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getFileOverviewInfo(node);	  JSDocInfo    jsDocInfo    =    getFileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
217	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  lineno);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  lineno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getFileOverviewInfo(node,  lineno);	  JSDocInfo    jsDocInfo    =    getFileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
218	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node.getJSDocInfo());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node.getJSDocInfo());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node.getJSDocInfo());	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder(node);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
219	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  false);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  false);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder(node);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
221	[BUG]  [BUGGY]  JSDocInfo  sourceString  =  node.getJSDocInfo();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  sourceString  =  node.getJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  sourceString  =  node.getJSDocInfo();	  JSDocInfo    jsDocInfo    =    node.getJSDocInfo(sourceString);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
222	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
223	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  node);	  JSDocInfo    jsDocInfo    =    transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
224	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getfirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getfirstChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getfirstChild();	  Node    jsDocInfo    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
225	[BUG]  [BUGGY]  JSDocInfo  node  =  handleJsDoc(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  handleJsDoc(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  handleJsDoc(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    node);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
226	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJsDoc(node);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJsDoc(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJsDoc(node);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
227	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.handleJsDoc(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.handleJsDoc(fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.handleJsDoc(fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
228	[BUG]  [BUGGY]  JSDocInfo  fileOverviewInfo  =  node.handleJsDoc(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  fileOverviewInfo  =  node.handleJsDoc(fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  fileOverviewInfo  =  node.handleJsDoc(fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
229	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
230	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.rootNodeJsDocHolder,  this.fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.rootNodeJsDocHolder,  this.fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.rootNodeJsDocHolder,  this.fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
231	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.fileOverviewInfo(fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder.fileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
232	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  false);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
233	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  transformer);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
234	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
235	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
236	[BUG]  [BUGGY]  JSDocInfo  node  =  node.transform(node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.transform(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.transform(node);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
237	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJsDocInfoForNode();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJsDocInfoForNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getJsDocInfoForNode();	  JSDocInfo    jsDocInfo    =    node.getJsDocInfo();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
238	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJsDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJsDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getJsDocInfo(sourceString);	  JSDocInfo    jsDocInfo    =    node.getJsDocInfo();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
239	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  rootNodeJsDocHolder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  rootNodeJsDocHolder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  rootNodeJsDocHolder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    templateNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
240	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    transform(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
241	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(sourceString,  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(sourceString,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(sourceString,  node);	  JSDocInfo    jsDocInfo    =    transform(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
242	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  sourceString,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  sourceString,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  sourceString,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    transform(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
243	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.cloneTree();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.cloneTree();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
244	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getJSDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getJSDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getJSDocInfo(sourceString);	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
245	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getParent();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getParent();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
246	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.cloneAstNode();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.cloneAstNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.cloneAstNode();	  JSDocInfo    jsDocInfo    =    node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
247	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  null,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  null,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  null,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    null);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
248	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(this,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    node.transform(this);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
249	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  jsDocInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(this,  jsDocInfo);	  JSDocInfo    jsDocInfo    =    node.transform(this);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
250	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(this,  null);	  JSDocInfo    jsDocInfo    =    node.transform(this);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
251	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(sourceString,  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(sourceString,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(sourceString,  node);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
252	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJSDoc(node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJSDoc(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJSDoc(node);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
253	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  node);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
254	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  this);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  this);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
255	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDoc(node);	  JSDocInfo    jsDocInfo    =    node.handleJsDoc(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
256	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getImmediateParentNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getImmediateParentNode();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
257	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getAstRoot(node);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getAstRoot(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getAstRoot(node);	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
258	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().getPrevious();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().getPrevious();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().getPrevious();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
259	[BUG]  [BUGGY]  Node  lineno  =  node.getCharno();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getCharno();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getCharno();	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
260	[BUG]  [BUGGY]  Node  lineno  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  lineno  =  node.getLastChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  lineno  =  node.getLastChild();	  Node    lineno    =    node.getLineno();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
261	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  super.transform(node,  null);	  JSDocInfo    jsDocInfo    =    super.transform(node);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
262	[BUG]  [BUGGY]  Node  irNode  =  node.getInitializingChild();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getInitializingChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getInitializingChild();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
263	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transformer(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transformer(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transformer(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    transform(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
264	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  convert(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  convert(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  convert(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    transform(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
265	[BUG]  [BUGGY]  Node  irNode  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.cloneTree();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.cloneTree();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
266	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileoverviewInfo(node,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileoverviewInfo(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileoverviewInfo(node,  true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
267	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false,  null);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
268	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  true);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    true);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
269	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  null);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    true);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
270	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node.getFirstChild(),  true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node.getFirstChild(),  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node.getFirstChild(),  true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    true);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
271	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  transformDispatcher);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  transformDispatcher);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  transformDispatcher);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
272	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  templateNode,  fileLevelJsDocBuilder,  transformer);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    transformer);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
273	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getImmediateParentNode();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getImmediateParentNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getImmediateParentNode();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
274	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJSDocInfoForNode();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getJSDocInfoForNode();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getJSDocInfoForNode();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
275	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  node);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  node);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
276	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceString);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
277	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  this.sourceString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  this.sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  this.sourceString);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
278	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(sourceString,  node);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(sourceString,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(sourceString,  node);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
279	[BUG]  [BUGGY]  JSDocInfo  node  =  node.getJSDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.getJSDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.getJSDocInfo(sourceString);	  JSDocInfo    node    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
280	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.getType();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.getType();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.getType();	  AstNode    jsDocInfo    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
281	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(sourceString,  node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(sourceString,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(sourceString,  node);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
282	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
283	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  sourceString.transform(node);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  sourceString.transform(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  sourceString.transform(node);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
284	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  null);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
285	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(fileLevelJsDocBuilder,  sourceString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(fileLevelJsDocBuilder,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(fileLevelJsDocBuilder,  sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
286	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  null);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    charno);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
287	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.cloneTree();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.cloneTree();	  Node    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
288	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getJSDocInfo(sourceString);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getJSDocInfo(sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getJSDocInfo(sourceString);	  Node    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
289	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForAstNode(node);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForAstNode(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForAstNode(node);	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
290	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.cloneTree());  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.cloneTree());  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfoForNode(node.cloneTree());	  JsDocInfo    jsDocInfo    =    getJsDocInfoForNode(node);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
291	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getAncestor(2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getAncestor(2);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getAncestor(2);	  Node    jsDocInfo    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
292	[BUG]  [BUGGY]  AstNode  jsDocInfo  =  node.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  AstNode  jsDocInfo  =  node.removeFirstChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	AstNode  jsDocInfo  =  node.removeFirstChild();	  AstNode    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
293	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  newBlock);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  newBlock);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder(node,  newBlock);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder(node);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
294	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.node.fileOverviewInfo();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.node.fileOverviewInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.node.fileOverviewInfo();	  JSDocInfo    jsDocInfo    =    node.fileOverviewInfo();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
295	[BUG]  [BUGGY]  JSDocInfo  fileOverviewInfo  =  getFileOverviewInfo(node);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  fileOverviewInfo  =  getFileOverviewInfo(node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  fileOverviewInfo  =  getFileOverviewInfo(node);	  JSDocInfo    jsDocInfo    =    getFileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
296	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  charno);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  charno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  getJsDocInfo(node,  charno);	  JsDocInfo    jsDocInfo    =    getJsDocInfo(node);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
297	[BUG]  [BUGGY]  JSDocInfo  fileOverviewInfo  =  node.handleJsDocInfo(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  fileOverviewInfo  =  node.handleJsDocInfo(fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  fileOverviewInfo  =  node.handleJsDocInfo(fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo.handleJsDoc(node);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
298	[BUG]  [BUGGY]  Node  irNode  =  node.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.removeFirstChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.removeFirstChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
299	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  false,  null);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  false,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  false,  null);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
300	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  transformer);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
301	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  errorReporter);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  errorReporter);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
302	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  this);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  fileLevelJsDocBuilder,  this);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
303	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  this.errorReporter);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  this.errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  this.fileLevelJsDocBuilder,  this.errorReporter);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    this.fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
304	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  this.errorReporter);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  this.errorReporter);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  this.errorReporter);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    errorReporter);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
305	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.fileOverviewInfo(node,  sourceString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.fileOverviewInfo(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.fileOverviewInfo(node,  sourceString);	  JSDocInfo    jsDocInfo    =    fileLevelJsDocBuilder.fileOverviewInfo(node);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
306	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRoot(JsDocInfo.class);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRoot(JsDocInfo.class);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getAstRoot(JsDocInfo.class);	  Node    irNode    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
307	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  sourceString);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(this,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(this,  sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(this);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
308	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  lineNumber);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  lineNumber);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  lineNumber);	  JSDocInfo    jsDocInfo    =    transform(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
309	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceString,  config);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceString,  config);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  sourceString,  config);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
310	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.cloneTree();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.cloneTree();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
311	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getAstRoot(JsDocInfo.class);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getAstRoot(JsDocInfo.class);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getAstRoot(JsDocInfo.class);	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
312	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  node.getData();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  node.getData();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  node.getData();	  JsDocInfo    jsDocInfo    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
313	[BUG]  [BUGGY]  JSDocInfo  fileOverviewInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  fileOverviewInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  fileOverviewInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
314	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  this);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  this);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  this);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
315	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  transformDispatcher);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  transformDispatcher);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  fileLevelJsDocBuilder,  transformDispatcher);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
316	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
317	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineNumber);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineNumber);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  lineNumber);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
318	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(2);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAncestor(2);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getAncestor(2);	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
319	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
320	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild().cloneTree();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getFirstChild().cloneTree();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  irNode  =  node.getFirstChild().cloneTree();	  Node    irNode    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
321	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(true);	  JSDocInfo    jsDocInfo    =    node.handleJsDoc(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
322	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(false);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDocInfo(false);	  JSDocInfo    jsDocInfo    =    node.handleJsDoc(transformDispatcher);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
323	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transform(node,  fileLevelJsDocBuilder,  transformer);	  JSDocInfo    jsDocInfo    =    transform(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
324	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  node,  fileLevelJsDocBuilder,  transformer);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder,    transformer);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
325	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  sourceName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  sourceName);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  sourceName);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
326	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
327	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(node,  sourceString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(node,  sourceString);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(node,  sourceString);	  JSDocInfo    jsDocInfo    =    node.transform(node);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
328	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.getPrevious();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.getPrevious();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.getPrevious();	  Node    jsDocInfo    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
329	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  rootNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  rootNode);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  rootNode);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    templateNode,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
330	[BUG]  [BUGGY]  Node  jsDocInfo  =  node.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  Node  jsDocInfo  =  node.removeFirstChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	Node  jsDocInfo  =  node.removeFirstChild();	  Node    jsDocInfo    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
331	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  jsDocInfo);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  jsDocInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  transformDispatcher.handleJsDoc(node,  fileLevelJsDocBuilder,  jsDocInfo);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
332	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileLevelJsDocBuilder,  fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileLevelJsDocBuilder,  fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.handleJsDoc(fileLevelJsDocBuilder,  fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    transformDispatcher.handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
333	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceString,  charno);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceString,  charno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  sourceString,  charno);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
334	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJsDoc(node,  node);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJsDoc(node,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileLevelJsDocBuilder.handleJsDoc(node,  node);	  JSDocInfo    jsDocInfo    =    handleJsDoc(node,    node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
335	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
336	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.charno);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.charno);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  createJsDocInfo(node,  this.charno);	  JSDocInfo    jsDocInfo    =    createJsDocInfo(node,    charno);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
337	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false,  null);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  false,  null);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
338	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    node.getJSDocInfo(sourceString);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
339	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString,  null);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getJSDocInfo(sourceString,  null);	  JSDocInfo    jsDocInfo    =    node.getJSDocInfo(sourceString);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
340	[BUG]  [BUGGY]  JSDocInfo  fileOverviewInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  fileOverviewInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  fileOverviewInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
341	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.fileOverviewInfo);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.fileOverviewInfo);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  this.fileOverviewInfo);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileOverviewInfo);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
342	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getXmlDocInfo();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getXmlDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getXmlDocInfo();	  JSDocInfo    jsDocInfo    =    node.getJsDocInfo();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
343	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfo(node,  fileLevelJsDocBuilder,  transformer);	  JSDocInfo    jsDocInfo    =    getJsDocInfo(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
344	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false,  true);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  fileOverviewInfo(node,  false,  true);	  JSDocInfo    jsDocInfo    =    fileOverviewInfo(node,    false);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
345	[BUG]  [BUGGY]  JSDocInfo  node  =  node.cloneTree();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.cloneTree();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.cloneTree();	  JSDocInfo    node    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
346	[BUG]  [BUGGY]  JSDocInfo  node  =  node.removeJSDocInfo();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.removeJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.removeJSDocInfo();	  JSDocInfo    node    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
347	[BUG]  [BUGGY]  JSDocInfo  node  =  node.toJSDocInfo();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  node  =  node.toJSDocInfo();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  node  =  node.toJSDocInfo();	  JSDocInfo    node    =    node.getJSDocInfo();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
348	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.cloneStructure();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.cloneStructure();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.cloneStructure();	  JSDocInfo    jsDocInfo    =    node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
349	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getFirstChild();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getFirstChild();	  JSDocInfo    jsDocInfo    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
350	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.getPrevious();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.getPrevious();  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.getPrevious();	  JSDocInfo    jsDocInfo    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
351	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  false);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  node.transform(sourceString,  false);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  node.transform(sourceString,  false);	  JSDocInfo    jsDocInfo    =    node.transform(sourceString);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
352	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  node);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  super.transform(node,  node);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  super.transform(node,  node);	  JSDocInfo    jsDocInfo    =    super.transform(node);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
353	[BUG]  [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  transformer);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  transformer);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JsDocInfo  jsDocInfo  =  handleJsDoc(node,  fileLevelJsDocBuilder,  transformer);	  JsDocInfo    jsDocInfo    =    handleJsDoc(node,    fileLevelJsDocBuilder);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
354	[BUG]  [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceString,  fileLevelJsDocBuilder);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transform(AstNode  node)  {      [BUGGY]  JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceString,  fileLevelJsDocBuilder);  [BUGGY]      Node  irNode  =  justTransform(node);  if  (jsDocInfo  !=  null)  {  irNode.setJSDocInfo(jsDocInfo);  }  if  (irNode.getType()  ==  Token.FUNCTION  &&  irNode.getFirstChild().getLineno()  !=  -1)  {  irNode.setLineno(irNode.getFirstChild().getLineno());  irNode.setCharno(irNode.getFirstChild().getCharno());  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transform  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  sourceName  sourceString  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  AstNode  node  int  charno  lineno  	projects/Closure84/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.11547005383792514	205	205	1	replace	JSDocInfo  jsDocInfo  =  getJsDocInfoForNode(node,  sourceString,  fileLevelJsDocBuilder);	  JSDocInfo    jsDocInfo    =    getJsDocInfoForNode(node,    sourceString);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
