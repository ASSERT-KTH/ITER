bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
37	[BUG] [BUGGY] dev = values[i] - mean; [FE] AssertionError [CONTEXT] double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { [BUGGY] dev = values[i] - mean; [BUGGY] accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0; for (int i = 0; i < weights.length; i++) { sumWts += weights[i]; } if (isBiasCorrected) { [CLASS] Variance [METHOD] evaluate [RETURN_TYPE] double  final double[] values final double[] weights final double mean final int begin final int length [VARIABLES] boolean incMoment isBiasCorrected double[] values weights long serialVersionUID SecondMoment m2 moment double accum accum2 dev mean sumWts var int begin i length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	514	514	1	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] double var = Double.NaN; if (test(values, weights, begin, length)) { if (length == 1) { var = 0.0; } else if (length > 1) { double accum = 0.0; double dev = 0.0; double accum2 = 0.0; for (int i = begin; i < begin + length; i++) { [BUGGY] [BUGGY] dev = values[i] - mean; accum += weights[i] * (dev * dev); accum2 += weights[i] * dev; } double sumWts = 0; for (int i = 0; i < weights.length; i++) { sumWts += weights[i]; } if (isBiasCorrected) { [CLASS] Variance [METHOD] evaluate [RETURN_TYPE] double  final double[] values final double[] weights final double mean final int begin final int length [VARIABLES] boolean incMoment isBiasCorrected double[] values weights long serialVersionUID SecondMoment m2 moment double accum accum2 dev mean sumWts var int begin i length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	514	514	1	add	
