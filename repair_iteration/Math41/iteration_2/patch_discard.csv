increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  double  n  =  mean.evaluate(values,  m,  begin,  length)-  1;  ,if(length > 1) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { var = 0.0; } else if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] NumberIsTooLargeException testWeightedVariance,     test(values,  begin,  length);  clear();  ,test(values, begin, length + 1);
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, return  evaluate(values,  weights,  begin,  length)+  var;  ,System.arraycopy(values, 0, var, 0, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  ,if(length <= 1 || length > 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  ,if(length < 1 || length > 2) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,var = evaluate(values, weights, 1, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, 1, begin, length); var = evaluate(values, weights, 1, begin, length); }
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  m  =  mean.evaluate(values,  weights,  begin,  length)/  1;  ,double m = mean.evaluate(values, weights, begin, length + 1)/ 2;
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  2)  {  clear();  }  ,var = evaluate(values, weights, begin, length); if(length > 2) { clear(); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  var = evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] ArrayStoreException testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  System.arraycopy(values, 0, var, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,double m = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,double y = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,double v = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,        test(values,  weights,  begin,  length  -  1);  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(var!=  null)  {  return  var;  }  ,var = evaluate(values, var, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values,  weights,  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length == 1) {
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  begin,  0,  var,  begin,  length);  ,System.arraycopy(values, 0, var, begin, length);
increase failing tests,328,replace, [FE] AssertionError testWeightedVariance, return  m2.getResult();  ,return moment.getResult();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { clear(); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  test(values,  weights,  begin,  length);  }  test(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  test(values,  weights,  begin,  length);  }  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  1,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 1, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double x = mean.evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  evaluate(values,  weights,  begin,  length);  ,double v = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  return  0.0;  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 0) { return 0.0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  return  0.0;  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 0) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,370,add, [FE] IllegalArgumentException testWeightedConsistency, ,        test(values,    0,    values.length);    test(weights,  0,  weights.length);  if(test(values, 0, values.length)) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,     clear();  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  clear();  }  ,clear(); if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,     clear();  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  clear();  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,add, [FE] StackOverflowError testWeightedVariance, ,        clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)||  length  >  1))  {  ,if(test(values, begin, length)|| length > 2) {
increase failing tests,320,add, [FE] StackOverflowError testWeightedVariance, ,        clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  var = evaluate(values, weights, begin, length);
increase failing tests,320,add, [FE] StackOverflowError testWeightedVariance, ,        clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,add, [FE] StackOverflowError testWeightedVariance, ,        clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,add, [FE] StackOverflowError testWeightedVariance, ,        clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); } else { var = evaluate(values, weights, var, begin, length); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  var  =  ValueUtils.evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  weights,  begin,  length);  ,double y = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  weights,  begin,  length);  ,double v = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length) || test(values, weights, begin, length)) { clear(); }
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  1  ||  length  >  2)  {  var = evaluate(values, weights, begin, length);
increase failing tests,322,add, [FE] AssertionError testWeightedVariance, ,}  else  if(length  >  1  ||  length  >  2)  {  if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  values,  begin,  length);  ,double x = mean.evaluate(values, weights, begin, length); double y = mean.evaluate(values, values, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  values,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length); double y = mean.evaluate(values, values, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  ,if(test(values, begin, length)|| length < 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length); Double d = mean.evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,        test(values,    begin,    length);    clear();  var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(" "); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  if(test(values, weights, begin, length)&& length > 1) { double m = evaluate(values, weights, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  if(test(values, weights, begin, length) || length > 1) { double m = evaluate(values, weights, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,test(values,  begin,  length  -  1);  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)!=  return  var;  }  ,var = evaluate(values, weights, begin, length); if(length > 2) { return var; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length); Double e = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  evaluate(values,  weights,  begin,  length);  ,double s = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  evaluate(values,  weights,  begin,  length);  ,double t = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,        double    w    =    mean.evaluate(values,    weights,    begin,    length);    if(test(values,  weights,  begin,  length)&&  length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,        double    w    =    mean.evaluate(values,    weights,    begin,    length);    if(test(values,  weights,  begin,  length)&&  length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length))  {  test(values,  weights,  begin,  length);  }  ,test(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,Double m = mean.evaluate(values, weights, begin, length + 1);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, 1, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, weights, begin, length) || test(values, weights, begin, length)) { if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, [Delete]  else  if(length  >  1)  {  ,} else if(length == 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  ,double c = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(length > 1) { if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double y = mean.evaluate(values, weights, begin, length)- 1; clear();
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double y = mean.evaluate(values, weights, begin, length + 1); clear();
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,var = evaluate(values, weights, begin, length + 1); var = evaluate(values, weights, 0, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  ,if(test(values, begin, length)&& length!= 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1))  {  ,if(test(values, weights, begin, length)|| length > 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  Double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,Double y = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  Double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double x = mean.evaluate(values, weights, begin, length); Double y = mean.evaluate(values, weights, begin, length);
increase failing tests,328,replace, [FE] AssertionError testWeightedVariance, return  evaluate(values,  m,  begin,  length);  ,return evaluate(values, var, begin, length);
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, return  evaluate(values,  m,  begin,  length);  ,return evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  2)  {  throw  new  IllegalArgumentException( " ");  }  ,var = evaluate(values, weights, begin, length); if(length > 2) { throw new IllegalArgumentException(" "); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  g  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length); Double g = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  g  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length + 1); double g = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length); Double s = mean.evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  ,if(test(values, weights, begin, length)&& length > 1) { evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  ,if(test(values, weights, begin, length) || length > 1) { evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 0) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 1) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 0) { clear(); if(test(weights, begin, length)) { clear(); } else { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  <  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(values == null) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(var == 0.0) { return var; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(var!= 0.0) { return var; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(var < 0.0) { return var; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  ||  length  >  2)  {  ,} else if(length > 1 && length < 2) {
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)&&  length  <  2)  {  ,} else if(length < 1) {
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length));  ,var = evaluate(values, weights, begin, length)+ 1;
increase failing tests,322,add, [FE] AssertionError testWeightedVariance, ,}  else  if(length  >  1  ||  length  >  2)  {  clear();
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  1  ||  length  >  2)  {  clear(); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { var = 0.0; } else if(length == 1) { throw new IllegalArgumentException(""); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  test(values,  weights,  begin,  length);  }  evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length > 1) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 2) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { var = 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length < 1) { var = 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length < 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, begin, length); }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,final double m = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  ,if(length == 1 || length > 1) {
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, [Delete]  else  if(length  >  1)  {  ,} else if(length <= 1) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length < 1) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(values == null) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length < begin) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  0,  values.length))  {  test(values,  weights,  0,  values.length);  }  else  {  return  evaluate(values,  weights,  0,  values.length);  }  ,test(values, weights, 0, values.length); return evaluate(values, weights, 0, values.length);
increase failing tests,316,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  var  =  evaluate(values,  begin,  length);  ,double var = evaluate(values, begin, length + 1);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(values == null) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  clear();  ,var = evaluate(values, weights, begin, length); if(length == 1) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  clear();  ,var = evaluate(values, weights, begin, length); if(length < 1) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  clear();  ,var = evaluate(values, weights, begin, length); if(length <= 1) { clear(); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  return  var;  }  ,if(values == null) { var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  return  var;  }  ,if(test(values, weights, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,     test(values,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  ,test(values, begin, length); double y = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,     test(values,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  ,test(values, begin, length); double u = evaluate(values, weights, begin, length);
increase failing tests,328,replace, [FE] AssertionError testWeightedVariance, return  m2.getResult();  ,return moment.equals(var)? var : moment.getResult();
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  1,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 1, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  1,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 1, begin, length); } else { var = evaluate(values, weights, 1, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double g = mean.evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, begin, length)) { var = 0.0; } else if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, begin, length)) { var = 0.0; } else if(length > 1) { var = evaluate(values, weights, 1, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,     clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { clear(); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  weights,  begin,  length);  ,double val = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,double e = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,double b = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(values,  begin,  length);  ,double i = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(var!=  null)  {  return  var;  }  ,var = evaluate(values, values, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,        double    weight    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,     var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,        test(values,  weights,  begin,  length  -  1);  clear(); var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)/  2;  ,double m = mean.evaluate(values, begin, length + 1)/ 2;
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { return 0.0; }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,Double m = mean.evaluate(values, begin, length + 1);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated ");  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 1) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated"); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, return  var  *(m  -  var.equals(m)*  length));  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(longestCircuitException(values,  begin,  length))  {  ,if(test(values, begin, length)) {
increase failing tests,325,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) throw new IllegalArgumentException(" "); }
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,        double    w    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double e = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values,  weights,  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(values.length < 1) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,        double    w    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated. ");  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 1) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, weights, begin, length)&& length > 1) { var = 0.0; if(test(values, weights, begin, length)) return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,     double  y  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double y = mean.evaluate(values, begin, length); clear();
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,        double    weight    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  begin,  length);  double x = evaluate(values, weights, begin, length);
