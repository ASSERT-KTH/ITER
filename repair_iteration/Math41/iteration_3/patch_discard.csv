increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  double  h  =  mean.evaluate(values,  begin,  length)-  1;  ,double m = mean.evaluate(values, begin, length + 1); double h = mean.evaluate(values, begin, length)- 1;
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,test(values,    begin,    length    -    1);    clear();  var = evaluate(values, weights, begin, length);
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length);  return  var;  ,var = evaluate(values, weights, begin, length); return var;
increase failing tests,328,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length);  return  var;  ,var = evaluate(values, var, begin, length); return var;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  n  =  end.evaluate(values,  weights,  begin,  length);  ,double n = mean.evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double  c  =  means.evaluate(values,  weights,  begin,  length);  ,clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  <=  1)  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, begin, length) || length <= 1) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,double v = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,clear(); if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(weights,  begin,  length))  {  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  begin,  length)&&  test(weights,  begin,  length))  {  return  0.0;  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, begin, length)&& test(weights, begin, length)) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 1) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 2) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, weights, begin, length)) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] MathIllegalArgumentException testWeightedVariance, double  var  =(values  ==  null)?  Double.NeGATIVE  :  Double.NaN;  ,double y = evaluate(values, weights, begin, length, 0);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, var  =  InExterns.evaluate(values,  weights,  begin,  length);  ,var = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  <  1  &&  length  >  2)  {  ,if(test(values, weights, begin, length)&& test(values, begin, length)) { if(test(values, weights, begin, length)|| test(values, weights, begin, length)) return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  <  1  &&  length  >  2)  {  ,if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { if(test(values, weights, begin, length)|| test(values, weights, begin, length)) return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  clear();  ,if(length == 1 || length > 2) { clear();
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, double  t  =  end.evaluate(values,  weights,  begin,  length);  ,return evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length) || length > 1) { if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  x  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  x  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double y = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  2)  {  clear();  }  ,var = evaluate(values, weights, begin, length); if(length > 2) { clear(); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 3) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  end  =  end.evaluate(values,  weights,  begin,  length);  ,double end = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 1) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  if(test(values,  weights,  begin,  length))  {  if(length  ==  1)  {  return  0.0;  }  ,if(test(values, weights, begin, length)) { if(length > 1) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  System.arraycopy(values,  var,  begin,  0,  var,  begin,  length);  ,double w = mean.evaluate(values, weights, begin, length)- 1; if(test(values, weights,begin, length)) { var = 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  System.arraycopy(values,  var,  begin,  0,  var,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length)- 1; if(test(values, weights,begin, length)) { var = 0.0; }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length < 1) { if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 1) { if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  return  0.0;  }  ,double m = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length > 1) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double s = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double s = mean.evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, var, begin, length); if(length == 2) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, var, begin, length); if(length == 1) { clear(); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 1) { if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(length  ==  2)  {  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length  +  1);  clear();  ,double m = mean.evaluate(values, weights, begin, length + 1); clear();
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, final  double  var  =  Double.MIN_VALUE;  final  double  m  =  evaluate(values,  weights,  begin,  length);  ,final double v = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, System.arraycopy(values,  0,  var,  begin,  length  +  1);  ,if(test(values, weights, begin, length)) { if(length > 1) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, System.arraycopy(values,  0,  var,  begin,  length  +  1);  ,if(test(values, weights, begin, length)) { if(length > 0) { clear(); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  double  v  =  mean.evaluate(values,  begin,  length)-  1;  ,double m = mean.evaluate(values, begin, length + 1); double v = mean.evaluate(values, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)-  1;  ,double s = mean.evaluate(values, begin, length)- 1;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  begin,  length);  getValue(values,  begin,  length);  ,if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  begin,  length);  getValue(values,  begin,  length);  ,if(test(values, weights, begin, length)|| length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  begin,  length);  getValue(values,  begin,  length);  ,if(test(values, weights, begin, length)|| length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] IllegalArgumentException testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,double m = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length) || length > 2) { if(test(values, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  t  =  end.evaluate(values,  weights,  begin,  length);  ,double t = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  y  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double x = mean.evaluate(values, weights, begin, length); clear();
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  y  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double j = mean.evaluate(values, weights, begin, length); clear();
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,                test(values,    weights,    begin,    length    -    1);    test(values,  weights,  begin,  length  -  1);  var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length); double y = mean.evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  if  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, 0, values.length)) return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  if  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(weights, begin, length)) return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  if  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, 0, length)) return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)!=  var  =  0.0;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  *  2  ==  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(length  >  1)  {  return  0;  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(length > 1) { return 0; }
increase failing tests,325,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  test(values,  begin,  length);  }  if(test(values, weights, begin, length)&& test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  ,Double m = mean.evaluate(values, weights, begin, length); double y = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  ,Double m = mean.evaluate(values, weights, begin, length); double v = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =  values.evaluate(values,  begin,  length)/  2;  ,double val =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE; double x =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =  values.evaluate(values,  begin,  length)/  2;  ,double x =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE; double y =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =  values.evaluate(values,  begin,  length)/  2;  ,double y =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE; double x =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE;
increase failing tests,325,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  begin,  0,  var,  begin,  length);  ,System.arraycopy(values, 0, var, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  if(test(values,  weights,  begin,  length))  {  if(length  ==  1)  {  return  0.0;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 2) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  {  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0; }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  *  2  ==  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(length * 2!= 1) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 1) { if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(" "); }
increase failing tests,320,add, [FE] StackOverflowError testWeightedVariance, ,                clear();        if(test(values,    weights,    begin,    length))    {    clear();    }    else    {    var    =    evaluate(values,    weights,    begin,    length);    var    =    evaluate(values,    weights,    var,    begin,    length);    }    if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); double h = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(values.length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(values.length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  Double  t  =  mean.evaluate(values,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); Double t = mean.evaluate(values, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 2) { if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length < 1) { if(test(values, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length <= 1) { if(test(values, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  <=  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(length!= 1) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!var.equals(values.getInequality()))  {  ,var = evaluate(values, weights, begin, length); if(length == 1) { return 0.0; }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!var.equals(values.getInequality()))  {  ,var = evaluate(values, weights, begin, length); if(length >= 1) { return 0.0; }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!var.equals(values.getInequality()))  {  ,var = evaluate(values, weights, begin, length); if(length <= 1) { return 0.0; }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!var.equals(values.getInequality()))  {  ,var = evaluate(values, weights, begin, length); if(length!= 1) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, clear();  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  }  clear();  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  return  var;  }  ,var = evaluate(values, weights, begin, length); if(length > 1)return var;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length > begin) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length < 1) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  1  &&  length  >  2)  {  var = evaluate(values, weights, begin, length);
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  1  &&  length  >  2)  {  double m = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,var = evaluate(values, weights, 1, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length); }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  return  0.0;  }  ,if(test(values, weights, begin, length)&& length > 1) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <=  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <=  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, begin, length)) { var = 0.0; if(test(weights, begin, length)) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <=  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  yak  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,double y = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length) || length > 2) { if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  test(values,  begin,  length);  }  if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(length > begin) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(length > begin + length) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,                test(values,    weights,    begin,    length    -    1);    if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(values,  begin);  Validate.NotNull(values,  begin,  length);  ,test(values, 0, weights.length * 1);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(values,  begin);  Validate.NotNull(values,  begin,  length);  ,test(values, 0, values.length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(values,  begin);  Validate.NotNull(values,  begin,  length);  ,test(values, 0, values.length - 1);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(values,  begin);  Validate.NotNull(values,  begin,  length);  ,test(values, 0, values.length / 1);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  begin,  length))  {  test(values,  weights,  begin,  length);  }  var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length < 1) { if(test(values, begin, length)&& length <= 1) { throw new IllegalArgumentException(" "); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  n  =  evaluate(values,  weights,  begin,  length)-  1;  ,double var = evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  meters,  begin,  length);  ,double weigh = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  meters,  begin,  length);  ,double weight = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  var,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,var = evaluate(values, weights, 1, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length > 0) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated. ");  }  ,if(length == 1 || length > 2) { if(test(values, weights, begin, length)) { var = 0.0; } else if(length > 1) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  Double  j  =  mean.evaluate(values,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); Double j = mean.evaluate(values, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  m,  begin,  length);  ,m = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)|| length > 1) { if(test(values, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  -  1  :  Double.NaN;  double  n  =  evaluate(values,  weights,  begin,  length);  ,double n =(values == null)? Double.NaN - 1 : Double.NaN; double var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(weights, begin, length)) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!incMoment)  {  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); } else if(length > 1) { return 0.0; }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!incMoment)  {  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); } else if(length > 1) { return 0.0; }
increase failing tests,319,replace, [FE] NumberIsTooLargeException testWeightedVariance,         test(values,    begin,    length);    clear();  clear();  ,test(values, begin, length + 1); clear();
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  p  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double p = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  p  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double p = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  g  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); double g = mean.evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =  evaluate(values,  weights,  begin,  length);  ,double y = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  e  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length); clear(); Double e = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 1) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, m, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 2) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, m, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m  >  1)&&  length  >  2)  {  ,if(test(values, weights, begin, length)) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, m, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)) { clear(); } else { System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, m, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  m  =  methods.evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, 0, values.length)&& incMoment) { incMoment = false; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double x = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double x = mean.evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, 1, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,var = evaluate(values, weights, 1, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length); }
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  length  <=  2)  {  throw  new  IllegalArgumentException( " ");  }  ,System.arraycopy(values, 0, var, begin + length, 1);
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  h  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  h  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  ==  1)  {  ,if(test(values, weights, begin, length)&& length == 1) {
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(values!=  null)?  Double.NaN  :  Double.NaN;  double  n  =  evaluate(values,  weights,  begin,  length);  ,double n =(values!= null)? Double.NaN : Double.NaN; double var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  {  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,double v = mean.evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,test(values,    begin,    length    -    1);    test(values,  begin,  length  -  1);  var = evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] ArrayStoreException testWeightedVariance, ,test(values,    begin,    length    -    1);    test(values,  begin,  length  -  1);  System.arraycopy(values, 0, var, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,         test(values,  weights,  begin,  length  -  1);  double  m  =  evaluate(values,  weights,  begin,  length);  ,test(values, weights, begin, length - 1); double y = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,         test(values,  weights,  begin,  length  -  1);  double  m  =  evaluate(values,  weights,  begin,  length);  ,test(values, weights, begin, length - 1); double n = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(length == 1 || length > 2) { if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, test(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  ,test(values, weights, begin, length); double y = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double j = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double e = mean.evaluate(values, weights, begin, length); double y = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double x = mean.evaluate(values, weights, begin, length); double y = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  <  1)  {  return  0.0;  }  ,double m = mean.evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  begin,  0,  var,  0,  length  -  1);  ,System.arraycopy(values, 0, var, 0, length - 1);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length) || length > 1) { if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 1) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, weights, begin, length)) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 2) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length > 1 && length < 2) { clear(); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length!= 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  clear();  ,if(test(values, begin, length)&& length > 1) { clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  clear();  ,if(test(values, begin, length)&& length!= 1) { clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  clear();  ,if(test(values, begin, length)|| length < 1) { clear();
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  means.evaluate(values,  begin,  length);  moment.isBiasCorrected();  ,double m = evaluate(values, begin, length + 1);
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  means.evaluate(values,  begin,  length);  moment.isBiasCorrected();  ,double m = evaluate(values, weights, begin, length + 1);
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  weights,  begin,  length);  setValue(values,  begin,  length);  ,if(test(values, weights, begin, length)|| length!= 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length)+  1;  }  ,if(test(values, begin, length)&& length == 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  Double  y  =  mean.evaluate(values,  values,  begin,  length);  ,double x = mean.evaluate(values, weights, begin, length); Double y = mean.evaluate(values, values, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0.0;  }  ,if(length > 1) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  values,  m,  begin,  length);  ,var = evaluate(values, values, begin, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  clear();  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  clear();  }  ,clear(); if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  length  >  2)  {  ,} else if(length > 1 && length <= 2) {
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,                test(values,        begin,        length);        clear();    clear();  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  }  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 1) { var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  }  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(test(values, weights, begin, length + 1)) { var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&&!incMoment) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, weights, begin, length)&&!incMoment) { clear(); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  ==  1)  {  double  n  =  mean.evaluate(values,  m,  begin,  length  +  1);  }  ,if(test(values, weights, 0, values.length)) { test(values, weights, 0, values.length); if(incMoment) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  ==  1)  {  double  n  =  mean.evaluate(values,  m,  begin,  length  +  1);  }  ,if(test(values, weights, 0, values.length)|| incMoment) { test(values, weights, 0, values.length); if(incMoment) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  ==  1)  {  double  n  =  mean.evaluate(values,  m,  begin,  length  +  1);  }  ,if(test(values, weights, 0, values.length)&& incMoment) { test(values, weights, 0, values.length); if(incMoment) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  length!=  1)  {  return  0.0;  }  ,double m = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length!= 1) { return 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] IllegalArgumentException testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)||  length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,double m = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)|| length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(length == 1 || length > 2) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  return  0.0;  }  ,double m = mean.evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  test(values,  begin,  length);  }  ,test(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  test(values,  begin,  length);  }  ,double y = mean.evaluate(values, weights, begin, length); test(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  i  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  begin,  length);  ,double i = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] MathIllegalArgumentException testWeightedConsistency, double  m  =  mean.evaluate(values,  begin,  begin,  length);  ,double m = mean.evaluate(values, values, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  evaluate(values,  begin,  length);  var  =  evaluate(values,  var,  begin,  length);  ,double var = evaluate(values, weights, begin, length); var = evaluate(values, var, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  evaluate(values,  begin,  length);  var  =  evaluate(values,  var,  begin,  length);  ,double var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,begin,    length))    {    var    =    0.0;    }    else    if(length    ==    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  h  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,316,replace, [FE] MathIllegalArgumentException testWeightedVariance, double  var  =  evaluate(values,  begin,  length,  0);  ,double var = evaluate(values, weights, begin, length, 0);
increase failing tests,316,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  var  =  evaluate(values,  begin,  length,  0);  ,double var = evaluate(values, weights, begin, length, 1);
increase failing tests,316,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  var  =  evaluate(values,  begin,  length,  0);  ,double var = evaluate(values, begin, length, 1);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  double  h  =  evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, weights, begin, length); double h = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length) || length > 1) { if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(" "); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  double  y  =  mean.evaluate(values,  begin,  length)-  1;  ,double m = mean.evaluate(values, begin, length + 1); double y = mean.evaluate(values, begin, length)- 1;
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 3) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length) || length > 1) { if(test(values, weights, begin, length)&& length > 3) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,clear(); if(isBiasCorrected) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, System.arraycopy(values,  0,  var,  begin,  length)+  1;  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  clear();  ,if(test(values, weights, begin, length)&& test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0;  }  ,clear(); if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0;  }  ,clear(); if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { return 0; }
increase failing tests,319,replace, [FE] MathIllegalArgumentException testWeightedVariance, var  =  test(values,  weights,  begin,  length,  0);  ,var = evaluate(values, weights, begin, length, 0);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var.evaluate(values,  begin,  length);  ,evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { if(length > 1) { var = evaluate(values, weights, begin, length); double m = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  return  0;  }  ,if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); if(length > 2) { return 0; }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,clear(); if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  g  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double g = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  g  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double g = mean.evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(incMoment)  {  clear();  if(test(values,  weights,  begin,  length))  {  clear();  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <=    1)    {    throw    new    IllegalArgumentException(   "   ");    }    if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); double x = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); double x = mean.evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  begin,  length)&&  length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length) || length > 1) { if(test(values, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] MathIllegalArgumentException testWeightedVariance,         test(values,  weights,  begin,  length  -  1);  test(values,  weights,  begin,  length  -  1);  ,test(values, weights, begin, length - 1); evaluate(values, weights, begin, length - 1);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  weights,  begin,  length);  ,double e = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)!=  clear();  ,double y = evaluate(values, weights, begin, length)/ 2;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)!=  clear();  ,double e = evaluate(values, weights, begin, length)/ 2;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length); double s = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); double s = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  s  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); Double s = mean.evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  4)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 4) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  4)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 4) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  4)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length) || length > 2) { if(test(values, weights, begin, length)&& length > 4) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  4)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length) || length > 3) { if(test(values, weights, begin, length)&& length > 4) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, <<  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  }  else  if(length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); } else if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  }  else  if(length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 1) { if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); } else if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, validate(values,  begin,  length,  var);  ,if(test(values, begin, length)&& length > 1) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double x = mean.evaluate(values, weights, begin, length); clear(); double y = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,clear(); if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  return  0.0;  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length > 1) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  return  0.0;  }  ,if(test(values, begin, length)|| length > 1) { if(test(values, weights, begin, length)&& length > 1) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  1)  {  return  0.0;  }  ,if(test(values, begin, length)&& length > 1) { if(test(weights, begin, length)&& length > 1) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  evaluate(values,  weights,  begin,  length)-  1;  ,double y = evaluate(values, weights, begin, length)- 1;
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  evaluate(values,  weights,  begin,  length)-  1;  ,double v = evaluate(values, weights, begin, length)- 1;
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double[]  mean  =  this.mean.evaluate(values,  weights,  begin,  length);  ,if(length == 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double[]  mean  =  this.mean.evaluate(values,  weights,  begin,  length);  ,if(length == 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); } if(length == 3) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, double[]  mean  =  this.mean.evaluate(values,  weights,  begin,  length);  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& test(values, begin, length)) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)|| test(values, begin, length)&& test(values, weights, begin, length)) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)|| test(values, begin, length) || test(values, weights, begin, length)) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  begin,  0,  var,  1,  length);  ,System.arraycopy(values, 0, var, 1, length);
increase failing tests,370,replace, [FE] ArrayStoreException testWeightedVariance, Validate.NotNull(values,  Weights.TOKENS_PER_WIND);  ,Validate.NotNull(values, weights.TOKENS_PER_WIND);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  var = evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] IllegalArgumentException testWeightedVariance, ,if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  if(test(values, weights, begin, length)&& length!= 2) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  double  d  =  evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, weights, begin, length); double d = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length >= 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, validate(values,  var,  begin,  length);  ,test(values, begin, length); clear(); if(!incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, weights, begin, length); double y = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  return  0.0;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  test(values,  weights,  begin,  length))  {  clear();  ,if(test(values, begin, length) || test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length <= 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 1) { if(test(values, begin, length)&& length <= 1) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  begin,  length)&&  test(weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 2) { if(test(values, begin, length)&& test(weights, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  begin,  length)&&  test(weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 2) { if(test(values, begin, length)|| test(weights, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  2)  {  if(test(values,  begin,  length)&&  test(weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length > 2) { if(test(weights, begin, length)) { throw new IllegalArgumentException(" "); }
increase failing tests,325,replace, [FE] IllegalArgumentException testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  <  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] IllegalArgumentException testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  <  throw  new  IllegalArgumentException( " ");  }  ,if(m > 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  m,  begin,  length);  if(length  ==  1)  {  return  0;  }  ,if(length > 0) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  var  =  0.0;  }  ,test(values, weights, 0, values.length); if(!incMoment) {
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(values,  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  s  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double s = mean.evaluate(values, weights, begin, length); clear();
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(weights);  ,double v =(values == null)? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(weights);  ,double n =(values == null)? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  }  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  evaluate(values,  begin,  length);  boolean  incMoment  =  isBiasCorrected();  ,double var = evaluate(values, weights, begin, length); boolean incMoment = isBiasCorrected();
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  Double.MIN_VALUE;  double  val  =  evaluate(values,  begin,  length);  ,double var = Double.MIN_VALUE; double val = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)&& length!= 2) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)|| length!= 2) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)&& length <= 2) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)&& length!= 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  if(test(values,  weights,  begin,  length)&&  length  <  0)  {  throw  new  IllegalArgumentException( "   ");  }  ,if(test(values, weights, begin, length)&& length > 1) { if(test(values, weights, begin, length)&& length!= 0) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, double  x  =  mean.evaluate(values,  weights,  begin,  length)-  2;  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, double  x  =  mean.evaluate(values,  weights,  begin,  length)-  2;  ,if(test(values, begin, length) || length > 1) { if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  ,if(test(values, weights, begin, length)&& length!= 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, Mean  mean  =  new  Mean(1.0,  1.0,  evaluate(values,  weights,  begin,  length));  ,if(isBiasCorrected) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,double v = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  }  ,clear(); if(test(weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  }  ,clear(); if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,var = evaluate(values, weights, 1, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length); } else { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  System.arraycopy(values,  m,  0,  var,  begin,  length);  ,double w = mean.evaluate(values, weights, begin, length); if(test(values, weights,begin, length)) { var = 0.0; }
increase failing tests,325,replace, [FE] ArrayStoreException testWeightedVariance, if(test(values,  weights,  begin,  length)||  test(values,  begin,  length))  {  System.arraycopy(values,  begin,  0,  var,  begin,  length);  }  ,System.arraycopy(values, begin, m, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length == 1) { if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length == begin) { if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)); var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, else  if(length  >  1)&&  length  >  2)  {  ,System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  t  =  end.evaluate(values,  weights,  begin,  length);  ,return evaluate(values, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  test(weights,  begin,  length))  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  test(weights,  begin,  length))  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  ||  length  >  2)  {  else  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = 0.0; } else if(length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, validate(values,  weights,  begin,  length)-  var;  ,} else if(length > 0.0 || length > 2) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length); } else { return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <=  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(length >= 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  test(values,  weights,  begin,  length);  }  if(test(values,  weights,  begin,  length))  {  test(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(test(values, weights, begin, length)); var = evaluate(values, weights, begin, length); }
increase failing tests,325,add, [FE] AssertionError testWeightedVariance, ,                double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  test(values,  begin,  length);  }  if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights,begin, length)) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  if(test(values,  weights,  begin,  length))  {  if(length  ==  1)  {  return  0.0;  }  ,if(!test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&!var.equals(values.getInequality()))  {  ,var = evaluate(values, weights, begin, length); if(length < 1) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(incMoment) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights,begin, length)) { clear(); if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, validate(values,  var,  begin,  length);  ,clear(); if(!incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, validate(values,  var,  begin,  length);  ,clear(); if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,Double m = mean.evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  clear();  ,if(test(values, weights, begin, length)&& length <= 1) { clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  begin)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,} else if(length > 1) { if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated. ");  }  ,if(length == 1 || length > 2) { if(test(values, weights, begin, length)) { var = 0.0; } else if(length < 1) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated. ");  }  ,if(length == 1 || length > 2) { if(test(values, weights, begin, length)) { var = 0.0; } else if(length == 1) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(values.length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(values.length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(values.length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(values.length > 2) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(values.length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(values.length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length)-  1;  ,var = evaluate(values, values, begin, length)- 1;
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length)+  1;  }  ,if(test(values, begin, length)&& length <= 1) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length)+  1;  }  ,if(test(values, begin, length)&& length < 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(!incMoment) { if(test(values, weights, begin, length)) var = 0.0; if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { if(length * 2 == 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)) { if(length * 2 == 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(longestCircuitException(values,  begin,  length)||(test(values,  weights,  begin,  length)))  {  ,if(test(values, begin, length)||(test(values, weights, begin, length))) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(longestCircuitException(values,  begin,  length)||(test(values,  weights,  begin,  length)))  {  ,if(test(values, weights, begin, length)||(test(values, weights, begin, length))) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  {  if(test(values,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  {  if(test(values,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, weights, begin, length)&& test(values, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  {  if(test(values,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, begin, length)|| test(values, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)  ||  length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,} else if(length <= 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)||  length  >  2))  {  ,if(test(values, weights, begin, length)|| length > 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  if(test(values,  weights,  begin,  length))  return  0.0;  }  ,if(test(values, weights, begin, length)) return 0.0; if(length == 1) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(values.length < 1) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,319,add, [FE] IllegalArgumentException testWeightedVariance, ,test(values,    begin,    length    -    1);    test(values,  begin,  length  -  1);  if(test(values, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)!=  return  var;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)!=  return  var;  }  ,if(length < 1) { var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  begin,  length))  {  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, begin, length)) { return 0.0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  begin,  length))  {  ,if(test(values, begin, length)) { var = 0.0; if(test(values, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  begin,  length))  {  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, begin, length)) { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  }  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        if(test(values,    weights,    begin,    length)&&    length    <=    1)    {    throw    new    IllegalArgumentException(   "   ");    }    double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)&& test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  ==  1)  {  ,if(test(values, weights, begin, length)&& length < 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  }  ,if(test(values, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  1))  {  ,if(test(values, weights, begin, length)|| length < 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  1))  {  ,if(test(values, weights, begin, length)|| length == 1) {
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& weights[begin] <= 0.0) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  return  0.0;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  return  0.0;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  length  >  2)  {  ,} else if(length > 1 && length < 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  <  1  &&  length  >  2)  {  ,if(test(values, weights, begin, length)&& test(values, weights, begin, length)|| test(values, weights, begin, length)) return 0;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& isBiasCorrected) { if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  weights,  begin,  length)&&  length  <=  2)  {  ,if(test(values, weights, begin, length)|| length <= 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& isBiasCorrected) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& incMoment) { clear(); }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance,         test(values,    begin,    length);    clear();  clear();  ,if(!incMoment) { test(values, begin, length); clear(); } else { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isNull(values,  begin,  length);  Validate.isTrue(values,  begin,  length);  ,double p = Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isNull(values,  begin,  length);  Validate.isTrue(values,  begin,  length);  ,double p = Double.POSITIVE_INFINITY; double y = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isNull(values,  begin,  length);  Validate.isTrue(values,  begin,  length);  ,double p = Double.POSITIVE_INFINITY; double v = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double  x  =  mean.evaluate(values,  weights,  begin,  length)-  2;  ,if(test(values, begin, length)&& length < 1) { if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  *  2  ==  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)|| length > 0) {
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(isBiasCorrected) { clear(); if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) throw new IllegalArgumentException(""); }
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, test(values,  weights,  0,  values.length);  if(test(values,  weights,  0,  values.length))  {  return  evaluate(values,  weights,  0,  values.length);  }  ,return evaluate(values, weights, 0, values.length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 2) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)&&  m  >  0)  {  ,} else if(length >= 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  weights,  begin,  length);  ,if(!incMoment) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, weights, begin, length); }
increase failing tests,319,replace, [FE] NumberIsTooLargeException testWeightedVariance, test(values,  begin,  length  -  1);  test(values,  begin,  length  -  1);  ,test(values, begin, length + 1); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,if(incMoment) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(!incMoment) { if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  if  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, begin, length)) return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  if  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  System.arraycopy(values,  begin,  m,  begin,  length);  ,clear(); if(test(values, weights, begin, length)) { clear(); if(var!= var) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(var < 0.0) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(var < 0.0) { return 0; }
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  var,  0,  begin,  length);  ,System.arraycopy(values, begin, var, 0, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length)&&  length  <  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)&& length < 1) { throw new IllegalArgumentException(""); }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  var  =  0.0;  if(length  >  1)  {  var  =  0.0;  }  ,if(!incMoment) { if(test(values, weights, begin, length)) var = 0.0; if(length > 1) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  assess(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  1,  begin,  length);  ,test(values, weights, begin, length, incMoment);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  clear();  }  ,if(isBiasCorrected) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, ensureCapacity(test(values,  m,  begin,  length));  ,double e =(values == null)? Double.NaN - 1 : Double.NaN; double n =(values == null)? Double.NaN : 0;
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  1)  {  if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  ,if(test(values, weights, begin, length)|| length <= 1) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double  x  =  mean.evaluate(values,  weights,  begin,  length)/  2;  ,if(test(values, begin, length)&& length <= 1) { clear();
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double  x  =  mean.evaluate(values,  weights,  begin,  length)/  2;  ,if(test(values, begin, length)&& length < 1) { clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& test(values, weights, begin, length)&& test(values, weights, begin, length)) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& test(values, weights, begin, length)&& test(values, weights, begin, length)) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  begins  withnt(values,  weights,  begin,  length  +  1))  {  ,double v = isBiasCorrected? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  begins  withnt(values,  weights,  begin,  length  +  1))  {  ,double n = isBiasCorrected? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, begin, length); } else { return 0; }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  return  0.0;  }  ,if(length > 1) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { var = 0.0; if(length == 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); } else { return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights,begin, length)) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 3) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length) || length > 3) { if(test(values, weights, begin, length)&& length > 3) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)&& length < 2) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)&& length <= 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)|| length <= 2) { throw new IllegalArgumentException(""); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  evaluate(values,  weighs,  begin,  length);  ,double var = evaluate(values, values, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  m,  begin,  length);  ,m = mean.evaluate(values, values, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  children,  begin,  length);  ,double y = mean.evaluate(values, values, begin, length);
increase failing tests,318,replace, [FE] NullPointerException testWeightedVariance, return  var  *(1  -  m);  ,if(incMoment) { if(values.length!= 1) { moment = null; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0;  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    clear();  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0;  }  ,clear(); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 1) { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(incMoment) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  3)  {  if(test(values,  weights,  begin,  length)&&  length  >  3)  {  var  =  0.0;  }  ,test(values, weights, 0, length); if(!incMoment) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length); } else { return 0; }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(values!=  null)?  Double.NaN  :  Double.NaN;  double  n  =  evaluate(values,  weights,  begin,  length);  ,double var =(values == null)? Double.NaN : Double.NaN; double n = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,         test(values,  weights,  begin,  length  -  1);  var  =  evaluate(values,  weights,  begin,  length)-  1);  ,test(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  v  =  Double.POSITIVE_INFINITY;  final  double  m  =  evaluate(values,  weights,  begin,  length);  ,double var = Double.POSITIVE_INFINITY; final double v = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(values,  begin);  Validate.NotNull(values,  begin,  length);  ,test(values, 0, values.length * 2);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)|| length > 0) { if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  return  0;  }  ,if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); if(length == 2) { return 0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  return  0;  }  ,if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); if(length < 2) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  double  n  =  mean.evaluate(values,  m,  begin,  length),  incMoment);  }  ,if(incMoment) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m  >  1)&&  length  >  2)  {  ,System.arraycopy(values, begin, weights, begin, length); var = evaluate(values, m, begin, length);
increase failing tests,325,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  0,  var,  begin,  0,  length);  ,System.arraycopy(values, 0, m, begin, length);
increase failing tests,322,add, [FE] AssertionError testWeightedVariance, ,}  else  if(length  >  1  &&  length  >  2)  {  clear();
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  1  &&  length  >  2)  {  clear(); var = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  begin,  length);  getValue(values,  begin,  length);  ,if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  Double  y  =  mean.evaluate(values,  values,  begin,  length);  ,test(values, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, [Delete]  ,if(test(values, weights, begin, length)) { if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { if(length > 1) { var = evaluate(values, weights, begin, length); double m = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(isBiasCorrected) { clear(); if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  meters,  begin,  length);  ,double weigh = mean.evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(values.length < 1) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  Double.MIN_VALUE;  final  double  m  =  evaluate(values,  weights,  begin,  length);  ,double val = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  m,  begin,  length);  if(length  ==  1)  {  return  0.0;  }  ,clear(); if(length == 1) { var = 0.0; } else if(length > 1) {
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,                double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  test(values,  begin,  length);  }  double x = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  weights,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  weights,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  weights,  begin,  length);  ,if(m > 0.0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); } else { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); } else { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, begin, length); double e = mean.evaluate(values, weights, begin, length); } else { return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(weights,  values);  ,var = evaluate(values, weights, begin, length)+ 1;
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); } else if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); } else if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  clear();  ,if(length <= 1 || length > 2) { clear();
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); } else { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, begin, length); double d = mean.evaluate(values, weights, begin, length); } else { return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.isTrue(values;  ,if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(length  >  3)  {  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length == 1 || length > 3) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  else  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length == 1) { if(test(values, begin, length)) var = 0.0; if(length == 1) { throw new IllegalArgumentException(" "); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  j  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  weights,  begin,  length);  double p = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  var,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  var,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,double y = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) return 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,325,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  t  =  end.evaluate(values,  weights,  begin,  length);  ,return evaluate(values, begin, length, weights.length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length); } else { var = evaluate(values, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, 0, begin, length); } else { var = evaluate(values, 0); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length); } else { var = evaluate(values, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, begin, length); } else { var = evaluate(values, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m  >  0)  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(m > 0) { var = 0.0; if(test(values, weights, begin, length)) return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(values.length  <  begin,  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length < begin) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 0) { if(length > 1) { var = evaluate(values, weights, begin, length); double m = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(values.length < 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  bodied  else  if  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); if(test(values, 0, values.length)) return 0.0; }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  weights,  begin,  length);  setValue(values,  begin,  length);  ,if(test(values, weights, begin, length) || length <= 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double e = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(length == 1) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(length < 1) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { clear(); if(test(values, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)) { clear(); if(length!= 0) { throw new IllegalArgumentException(""); }
increase failing tests,320,add, [FE] ArrayStoreException testWeightedVariance, ,                clear();        if(test(values,    weights,    begin,    length))    {    clear();    }    else    {    var    =    evaluate(values,    weights,    begin,    length);    var    =    evaluate(values,    weights,    var,    begin,    length);    }    if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  System.arraycopy(values, begin, var, 0, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(length  ==  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length == 1 || length > 0) {
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  weights,  begin,  length);  ,double u = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, ensureCapacity(test(values,  m,  begin,  length));  ,double val =(values == null)? Double.NaN - 1 : Double.NaN; double n =(values == null)? Double.NaN : 0;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length);  ,var = evaluate(values, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)&&  length  >  2)  {  ,if(test(values, begin, length)&& length < 1) { clear(); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  return  0.0;  }  ,if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double v = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double q = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double p = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  mean.evaluate(values,  weights,  begin,  length);  double  d  =  evaluate(values,  weights,  begin,  length);  ,Double m = mean.evaluate(values, begin, length); double d = evaluate(values, weights, begin, length);
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  var = evaluate(values, weights, begin, length)- 1;
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  var = evaluate(values, weights, begin, length)+ 1;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,var = evaluate(values, 0, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& test(values, begin, length)&& test(values, weights, begin, length)) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& test(values, begin, length)&& test(values, weights, begin, length)) {
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double e = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    time    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length))  {  System.arraycopy(values,  begin,  0,  var,  begin,  length);  }  ,double d = mean.evaluate(values, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)-  1;  ,double y = mean.evaluate(values, begin, length)- 1;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& isBiasCorrected) { if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] NumberIsTooLargeException testWeightedVariance, ensureCapacity(new  Double(values,  begin,  length)-  1,  var));  ,if(test(values, begin, length + 1)&& length > 2) { var = 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1  ||  length  <  2)  {  if(length  >  1)  {  ,if(length == 1 || length > 9) {
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  begin,  length))  {  test(values,  weights,  begin,  length);  }  if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  begins  withnt(values,  weights,  begin,  length  +  1))  {  ,double y = isBiasCorrected? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  begins  withnt(values,  weights,  begin,  length  +  1))  {  ,double i = isBiasCorrected? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  &&  begins  withnt(values,  weights,  begin,  length  +  1))  {  ,double x = isBiasCorrected? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(var);  Validate.notEmpty(weights);  ,test(values, 0, values.length, isBiasCorrected);
increase failing tests,319,replace, [FE] MathIllegalArgumentException testWeightedConsistency, test(values,  begin,  length,  var,  int  m);  ,test(values, values, 0, values.length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, return  var  *(m  -  var.equals(values));  ,if(test(values, weights, begin, length)&& test(values, begin, length)) { var = evaluate(values, weights, begin, length)+ 1;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)&& test(values, begin, length)) { var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length) || test(weights, begin, length)) { var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(isBiasCorrected) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  ,var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, begin, begin, length); var = evaluate(values, weights, 0, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  y  =  mean.evaluate(values,  weights,  begin,  length);  double p = evaluate(values, weights, begin, length); clear();
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 2) { clear(); if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, test(values,  begin,  length);  getValue(values,  begin,  length);  ,if(test(values, begin, length)&& length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& begin < length) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    first    =    mean.evaluate(values,    begin,    length);    double  c  =  mean.evaluate(values,  weights,  begin,  length);  double d = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  return  var;  }  ,if(length > 1)return var; if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1)return var; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1  ||  length  >  2)  {  else  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1 || length > 2) { if(test(values, weights, begin, length)) var = 0.0; } else if(length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validate.notNull(values,  begin);  Validate.NotNull(values,  begin,  length);  ,test(values, 0, values.length / 2);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(length == 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(length < 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance,         test(values,    begin,    length);    clear();  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  0.0;  }  ,test(values, begin, length); clear(); if(test(values, begin, length)) { return 0.0; }
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(length > 0) { if(test(values, weights, begin, length)) return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, begin, begin, length); } else { var = evaluate(values, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,if(test(values, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  begin,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, begin, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); } else if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,                double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  p  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,         clear();    clear();  if(test(values,  begin,  length))  {  double  var  =  evaluate(values,  weights,  begin,  length);  if(var  <  0.0)  {  return  var;  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { return var; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  d  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double g = mean.evaluate(values, weights, begin, length); clear();
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    clear();  double  d  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double t = mean.evaluate(values, weights, begin, length); clear();
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    begin,    length);    double  j  =  mean.evaluate(values,  weights,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(length == 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(length < 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,325,replace, [FE] IllegalArgumentException testWeightedVariance, if(m  >  0)  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( "   ");  }  ,if(m > 0) { var = 0.0; if(test(values, weights, begin, length)) throw new IllegalArgumentException(" "); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    time    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  begin,  length);  double x = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  var;  }  ,clear(); if(test(values, weights, begin, length)) { clear(); if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    d    =    mean.evaluate(values,    weights,    begin,    length);    double  c  =  mean.evaluate(values,  weights,  begin,  length);  double e = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(m!=  0.0)  {  ,test(values, 0, values.length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double v = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  begin,  length);  ,if(m > 0.0) { double y = mean.evaluate(values, weights, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,         double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  d  =  mean.evaluate(values,  weights,  begin,  length);  test(values,  begin,  length);  ,if(length > 0) { double y = mean.evaluate(values, begin, length); double d = mean.evaluate(values, weights, begin, length); test(values, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  return  0;  }  ,if(test(values, weights, begin, length) || length > 2) { if(test(values, weights, begin, length)&& length > 2) var = evaluate(values, weights, begin, length); if(length == 2) { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,if(test(values, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, begin, length); } else { var = evaluate(values, begin, length); }
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, double  m  =  mean.doubleValue()  *  length;  ,double m = mean.evaluate(values, begin, length)* length;
increase failing tests,316,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  var  =  evaluate(values,  begin,  length,  0);  ,double var = evaluate(values, begin, length, 2);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  1)  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,if(test(values, begin, length)&& length > 1) { var = 0.0; if(test(values, weights, begin, length)) return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,316,replace, [FE] IllegalArgumentException testWeightedVariance, double  var  =(values  ==  null)?  Double.MAX_VALUE  :  Double.MIN_VALUE;  if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,double var =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE; if(test(values, weights, begin, length)) if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  p  =  mean.evaluate(values,  weights,  begin,  length);  double q = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(incMoment)  {  moment.evaluate(values,  weights);  return  evaluate(values,  weights,  0,  values.length);  }  ,if(incMoment) { moment.evaluate(values, begin, length); return evaluate(values, weights, 0, values.length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  ,if(values.length == 0) {
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance,         test(values,    begin,    length);    clear();  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,test(values, begin, length); clear(); if(incMoment) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) var = 0.0; } else if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, begin, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    begin,    length);    double  x  =  mean.evaluate(values,  begin,  length);  double v = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(values.length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(values.length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) var = 0.0; } else if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, final  double  var  =  Double.MIN_VALUE;  final  double  m  =  evaluate(values,  weights,  begin,  length);  ,final double val = Double.MIN_VALUE; final double m = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance,         test(values,    begin,    length);    clear();  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,test(values, begin, length); clear(); if(length > 0) { return var; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)  {  System.arraycopy(values,  begin,  0,  weights,  begin,  length);  ,} else if(length > 1) { System.arraycopy(values, 0, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) var = 0.0; } else { throw new IllegalArgumentException(" "); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =  values.evaluate(values,  begin,  length)/  2;  ,double val =(values == null)? Double.MAX_VALUE : Double.MIN_VALUE;
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    first    =    mean.evaluate(values,    begin,    length);    double  i  =  mean.evaluate(values,  weights,  begin,  length);  double j = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        weight        =        mean.evaluate(values,        weights,        begin,        length);        double    first    =    mean.evaluate(values,    begin,    length);    double  i  =  mean.evaluate(values,  weights,  begin,  length);  double q = evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] IllegalArgumentException testWeightedVariance, double  var  =(values!=  null)?  Double.NaN  :  Double.POSITIVE_INFINITY;  if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,double var =(values!= null)? Double.NaN : Double.POSITIVE_INFINITY; if(test(values, weights, begin, length)) if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,319,replace, [FE] MathIllegalArgumentException testWeightedVariance, test(values,  begin,  length  -  1);  test(values,  begin,  length  -  1);  ,test(values, begin, length - 1); var = evaluate(values, weights, begin, length - 1);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                double        w        =        mean.evaluate(values,        weights,        begin,        length);        double    y    =    mean.evaluate(values,    weights,    begin,    length);    double  c  =  mean.evaluate(values,  weights,  begin,  length);  double p = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, Validator.isTrue(values,  weights);  ,var = evaluate(values, weights, begin, length, 0);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,         clear();    if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(var == 0.0) { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, 0, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(length > 1) { var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,         var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  length  >  2)  {  if(test(values,  weights,  begin,  length)&&  length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)  ||  test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length)+  1;  }  ,if(test(values, weights, begin, length)&& isBiasCorrected) { if(test(values, weights, begin, length)|| test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length)+ 1; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  [Delete]  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length)-  1;  ,var = evaluate(values, begin, length)- 1;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length)-  1;  ,var = evaluate(values, begin, begin, length)- 1;
