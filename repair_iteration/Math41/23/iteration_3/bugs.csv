bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	37	None	replace
2	[BUG]  [BUGGY]  if(isBiasIntersect)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasIntersect)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasIntersect)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
3	[BUG]  [BUGGY]  if(isBiasIntersect)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasIntersect)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasIntersect)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
4	[BUG]  [BUGGY]  if(sumWts  <  1.0)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  <  1.0)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  <  1.0)  {  var  =  accum  -  accum1  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
5	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
6	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
7	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  dev);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  dev);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  accum2  /  dev);	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
8	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum1    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
9	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum1    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
10	[BUG]  [BUGGY]  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum1  *  accum2  /  sumWts);	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum1    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	33	1	add
12	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	33	1	add
13	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	  	non-compiled	[CE]  ')'  expected	33	None	add
14	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
15	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  Accum  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  cannot  find  symbol  Accum	33	None	add
16	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  -  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  -  2;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	43	None	replace
17	[BUG]  [BUGGY]  For(int  i  =  begin  +  length;  i  <  begin  +  length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin  +  length;  i  <  begin  +  length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin  +  length;  i  <  begin  +  length  -  1;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	43	None	replace
18	[BUG]  [BUGGY]  if(isMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
19	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }	  ||    isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
20	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  dev  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  dev  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  dev  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  ||    isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
21	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  ||    isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	6	2	replace
23	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	6	2	replace
24	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  weights.length  -  1;  i++)  {  [CE]  cannot  find  symbol  start  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  start	6	None	replace
25	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	74	None	replace
26	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  not  a  statement	74	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
28	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  For(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  For(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    For(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	30	None	add
29	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  start;  i  <  weights.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  start;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    for(int  i  =  start;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
30	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	30	None	add
31	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  beginning;  i  <  weights.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  beginning;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    for(int  i  =  beginning;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
32	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    pounds[i]    *    dev;    }    	non-compiled	[CE]  '.class'  expected	121	None	replace
33	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    pounds[i]    *    dev;    }    	non-compiled	[CE]  '.class'  expected	121	None	replace
34	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    pounds[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	121	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    pounds[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
36	[BUG]  [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
37	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	3	None	replace
38	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
39	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
40	[BUG]  [BUGGY]  if(sumWts  <  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [CE]  cannot  find  symbol  i  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  <  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  <  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
41	[BUG]  [BUGGY]  if(sumWts  <  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  <  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  <  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
42	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    dev    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
43	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    dev    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
44	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  dev;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
45	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  10.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
46	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weight  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weight  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weight	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  ';'  expected	132	None	replace
47	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	87	None	replace
48	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	87	None	replace
49	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	87	None	replace
50	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin  +  length;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	29	3	replace
52	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin  +  length;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	29	3	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  values.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin  +  length;  i  <  values.length;  i++)  {	  for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	29	3	replace
54	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  values.length;  i++)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  values.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin  +  length;  i  <  values.length;  i++)  {	  for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	29	3	replace
55	[BUG]  [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
56	[BUG]  [BUGGY]  int  length)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  length)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  length)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
57	[BUG]  [BUGGY]  int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	81	None	replace
58	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	82	None	replace
59	[BUG]  [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	82	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
61	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  /  1.0;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  /  1.0;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  /  1.0;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
62	[BUG]  [BUGGY]  if(sumWts  <  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumW  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  <  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  <  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumW	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	36	None	replace
63	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
64	[BUG]  [BUGGY]  if(sumWts  <  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  <  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  <  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	36	None	replace
65	[BUG]  [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
66	[BUG]  [BUGGY]  int  weightsMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  weightsMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  weightsMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	80	None	replace
67	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
68	[BUG]  [BUGGY]  For(int  i  =  begin  +  length;  i  >=  begin  +  length;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin  +  length;  i  >=  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin  +  length;  i  >=  begin  +  length;  i++)  {	  For(int    i    =    begin    +    length;    i    <    begin    +    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
69	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
70	[BUG]  [BUGGY]  var  =  1.0  -  (accum2  *  accum2  /  dev);  var  =  1.0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  1.0  -  (accum2  *  accum2  /  dev);  var  =  1.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  1.0  -  (accum2  *  accum2  /  dev);  var  =  1.0;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
71	[BUG]  [BUGGY]  var  =  1.0  /  (accum2  *  accum2  /  dev);  var  =  1.0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  1.0  /  (accum2  *  accum2  /  dev);  var  =  1.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  1.0  /  (accum2  *  accum2  /  dev);  var  =  1.0;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
72	[BUG]  [BUGGY]  var  =  Acum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Acum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Acum  -  (accum2  *  accum2  /  sumWts);	  var    =    Accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
73	[BUG]  [BUGGY]  var  =  Accum  -  (accum2  *  accum2  /  sumWts,  dev);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum2  *  accum2  /  sumWts,  dev);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum2  *  accum2  /  sumWts,  dev);	  var    =    Accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  ')'  expected	32	None	replace
74	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  2.0))/  dev;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  2.0))/  dev;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  2.0))/  dev;	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    1.0))    /    dev;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
75	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  1.0))/  dev;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  1.0))/  dev;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  1.0))/  dev;	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    1.0))    /    dev;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
76	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	76	None	replace
77	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [CE]  cannot  find  symbol  i  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	76	None	replace
78	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [CE]  cannot  find  symbol  i  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	76	None	replace
79	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  not  a  statement	76	None	replace
80	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
81	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  for(int  i  =  begin;  i  <  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  for(int  i  =  begin;  i  <  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    length;    i++)    {    for(int  i  =  begin;  i  <  length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
83	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  For(int  i  =  begin;  i  <  length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  For(int  i  =  begin;  i  <  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    length;    i++)    {    For(int  i  =  begin;  i  <  length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	24	None	add
84	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  for(int  i  =  start;  i  <  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  for(int  i  =  start;  i  <  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    length;    i++)    {    for(int  i  =  start;  i  <  length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
85	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  for(int  i  =  beginning;  i  <  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  for(int  i  =  beginning;  i  <  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    length;    i++)    {    for(int  i  =  beginning;  i  <  length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
86	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  int  i  =  begin;  i  <  length;  i++)  {  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  int  i  =  begin;  i  <  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    length;    i++)    {    int  i  =  begin;  i  <  length;  i++)  {	  	non-compiled	[CE]  >  expected	24	None	add
87	[BUG]  [BUGGY]  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts)  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts)	  var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	56	None	replace
88	[BUG]  [BUGGY]  var  =  Accum  -  (accum  -  (dev  *  accum2  /  ')'  expected  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum  -  (dev  *  accum2  /  ')'  expected  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum  -  (dev  *  accum2  /  ')'  expected	  var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	56	None	replace
89	[BUG]  [BUGGY]  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts  +  ')'  expected  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts  +  ')'  expected  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts  +  ')'  expected	  var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	56	None	replace
90	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
91	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	72	None	replace
92	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
93	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
94	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
95	[BUG]  [BUGGY]  var  =  (accum  -  (dev  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (dev  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (dev  *  accum2  /  sumWts))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
96	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
97	[BUG]  [BUGGY]  double  sumWts  =  1.0  +  weights.length;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  sumWts  =  1.0  +  weights.length;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1.0  +  weights.length;	  double    sumWts    =    1.0    +    values.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
98	[BUG]  [BUGGY]  double  sumWts  =  1.0  +  values.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  sumWts  =  1.0  +  values.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1.0  +  values.length  -  1;	  double    sumWts    =    1.0    +    values.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
99	[BUG]  [BUGGY]  double  sumWts  =  1.0  +  mean.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  sumWts  =  1.0  +  mean.length;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1.0  +  mean.length;	  double    sumWts    =    1.0    +    values.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
100	[BUG]  [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  while(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	131	None	replace
101	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  while(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	131	None	replace
102	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWtes))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
103	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWtes))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
104	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  mean))/  1.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  mean))/  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  mean))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWtes))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
106	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  For(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  For(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    For(int  i  =  1;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
107	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    int  i  =  1;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	5	None	add
108	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  1;  i  <  Weights.length  -  1;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  for(int  i  =  1;  i  <  Weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    for(int  i  =  1;  i  <  Weights.length  -  1;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
109	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
110	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  For(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  For(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    For(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	28	None	add
111	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  for(int  i  =  start  +  length;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  for(int  i  =  start  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    for(int  i  =  start  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
112	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  >  expected	28	None	add
113	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  for(int  i  =  beginning  +  length;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  for(int  i  =  beginning  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    for(int  i  =  beginning  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
114	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
117	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  >=  weights.length;  i++)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  >=  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  >=  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
118	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  i	136	None	replace
119	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  cannot  find  symbol  i  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  i	136	None	replace
120	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
121	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  i	136	None	replace
122	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
123	[BUG]  [BUGGY]  Var  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  Var  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	Var  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {	  for(int    i    =    begin;    i    <    length;    i++)    {    	compilable	  [FE]  AssertionError  	25	2	replace
125	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {	  for(int    i    =    begin;    i    <    length;    i++)    {    	compilable	  [FE]  AssertionError  	25	2	replace
126	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
127	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  cannot  find  symbol  i  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  cannot  find  symbol  i	70	None	replace
128	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [CE]  cannot  find  symbol  i  [FE]                            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  cannot  find  symbol  i	70	None	replace
129	[BUG]  [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }	  if(!incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
130	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [CE]  cannot  find  symbol  i  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  cannot  find  symbol  i	129	None	replace
131	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
132	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [CE]  cannot  find  symbol  i  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  cannot  find  symbol  i	129	None	replace
133	[BUG]  [BUGGY]  if(isMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [CE]  cannot  find  symbol  isMoment  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  cannot  find  symbol  isMoment	129	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  /  length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  /  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  /  length;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    *    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	127	None	replace
135	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  mean;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  mean;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  *  mean;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    *    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	127	None	replace
136	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  2;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  *  2;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    *    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	127	None	replace
137	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  amount;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  amount;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  *  amount;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    *    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	127	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    For(int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	39	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  For(int  i  =  start;  i  <  begin  +  length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  For(int  i  =  start;  i  <  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  weights.length;  i++)  {  For(int  i  =  start;  i  <  begin  +  length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    For(int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	39	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  For(int  i  =  start;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  For(int  i  =  start;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  weights.length;  i++)  {  For(int  i  =  start;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    For(int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	39	None	replace
141	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  poids  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  poids  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  poids	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights!=    ';'    	non-compiled	[CE]  ';'  expected	73	None	replace
142	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	60	None	replace
143	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  dev))/  2.0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  dev))/  2.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  dev))/  2.0;	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
144	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
145	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
146	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    If(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  i	54	None	replace
147	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  [CE]  cannot  find  symbol  accum1  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    If(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	54	None	replace
148	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
149	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
150	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	75	None	replace
151	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	120	None	replace
152	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	120	None	replace
153	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
154	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
155	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	101	None	replace
156	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  else  {  var  =  accum  -  accum  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  else  {  var  =  accum  -  accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts  /  1.0;  }  else  {  var  =  accum  -  accum	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	101	None	replace
157	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
158	[BUG]  [BUGGY]  int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	11	None	replace
159	[BUG]  [BUGGY]  Integer  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  Integer  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	Integer  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	11	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	40	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  begin  +  length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	40	None	replace
162	[BUG]  [BUGGY]  int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	40	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin;  i  <  weights.length  -  2;  i++)  {	  for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	31	3	replace
164	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  2;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  weights.length  -  2;  i++)  {	  for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	31	3	replace
165	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
166	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
167	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
168	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    totalWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
169	[BUG]  [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    totalWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
170	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    totalWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
171	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
172	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
173	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
174	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
175	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
176	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
177	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
178	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
179	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
180	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
181	[BUG]  [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
182	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
183	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  ']'  expected	22	None	replace
184	[BUG]  [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	79	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
186	[BUG]  [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    dev;    }    	non-compiled	[CE]  >  expected	79	None	replace
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	135	1	add
188	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	135	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	135	1	add
190	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	135	1	add
191	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	135	None	add
192	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  'else'  without  'if'  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  'else'  without  'if'	135	None	add
193	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }	  if(!incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	105	None	replace
194	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2	  if(!incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	105	None	replace
195	[BUG]  [BUGGY]  while(isIncMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  cannot  find  symbol  isIncMoment  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isIncMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isIncMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  while(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  isIncMoment	2	None	replace
196	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  sumWts  +=  1.0;  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
197	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  sumWts  +=  1.0;  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
198	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	57	None	replace
199	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
201	[BUG]  [BUGGY]  Context.checkState(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  Context.checkState(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	Context.checkState(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
202	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts,  dev);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts,  dev);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  accum2  /  sumWts,  dev);	  var    =    accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  ')'  expected	45	None	replace
203	[BUG]  [BUGGY]  while(isIncMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  isIncMoment  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isIncMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isIncMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  while(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  isIncMoment	4	None	replace
204	[BUG]  [BUGGY]  Var  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  Var  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	Var  var  =  accum  -  (accum2  *  accum2  /  sumWts);	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
205	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
206	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  2.0);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
207	[BUG]  [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
208	[BUG]  [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
209	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    DEV;    }    	non-compiled	[CE]  '.class'  expected	13	None	replace
210	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    DEV;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	13	None	replace
211	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    DEV;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    (int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    (int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
214	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    (int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	41	None	replace
215	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
216	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts	  	non-compiled	[CE]  ')'  expected	47	None	add
217	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))	  	non-compiled	[CE]  ';'  expected	47	None	add
218	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0	  	non-compiled	[CE]  ';'  expected	47	None	add
219	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumW  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumW	  	non-compiled	[CE]  ')'  expected	47	None	add
220	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
221	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	51	1	add
222	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	51	1	add
223	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  'else'  without  'if'  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  'else'  without  'if'	51	None	add
224	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	51	None	add
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }	  	compilable	  [FE]  AssertionError  	51	1	add
226	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }	  	compilable	  [FE]  AssertionError  	51	1	add
227	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
228	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
229	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum++;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
230	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum++;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
231	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum1    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
232	[BUG]  [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
233	[BUG]  [BUGGY]  int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
234	[BUG]  [BUGGY]  int  length)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  length)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  length)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
235	[BUG]  [BUGGY]  int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  accum)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
236	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
237	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
238	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	58	1	add
240	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	58	1	add
241	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
242	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	  	non-compiled	[CE]  ')'  expected	58	None	add
243	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumW	  	non-compiled	[CE]  ')'  expected	58	None	add
244	[BUG]  [BUGGY]  For(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  For(int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	119	None	replace
245	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  For(int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	119	None	replace
246	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  start  +  length;  i++)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  start  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  start  +  length;  i++)  {	  For(int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	119	None	replace
247	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum1  /  sumWts);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  accum1  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  accum1  /  sumWts);	  var    =    accum    -    (accum1    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
248	[BUG]  [BUGGY]  var  =  accum  -  (accum1  *  accum2  /  sumWts,  dev);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum1  *  accum2  /  sumWts,  dev);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum1  *  accum2  /  sumWts,  dev);	  var    =    accum    -    (accum1    *    accum2    /    sumWts);    	non-compiled	[CE]  ')'  expected	46	None	replace
249	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  i	53	None	replace
250	[BUG]  [BUGGY]  var  =  accum  -  (dev  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (dev  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (dev  *  accum2  /  sumWts);	  var    =    accum    -    (accum2    *    dev    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
251	[BUG]  [BUGGY]  var  =  Accum  -  (accum2  *  accum2  /  sumWts  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum2  *  accum2  /  sumWts  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum2  *  accum2  /  sumWts  +  1);	  var    =    Accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
252	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  ')'  expected	35	None	replace
253	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  ')'  expected	35	None	replace
254	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  ')'  expected	35	None	replace
255	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  ')'  expected	35	None	replace
256	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin.length;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    for(int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
257	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
258	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (m2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (m2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (m2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    (int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
260	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  start;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  start;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  (int  i  =  start;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    (int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
261	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    (int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
262	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
263	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
264	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
265	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  '  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  '  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  '	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  illegal  line  end  in  character  literal	132	None	replace
266	[BUG]  [BUGGY]  var  =  accum  -  (dev  *  dev  /  sumWts);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (dev  *  dev  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (dev  *  dev  /  sumWts);	  var    =    accum    -    (accum2    *    dev    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
267	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum2  +=  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum2  +=  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum2  +=  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
268	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [CE]  cannot  find  symbol  accum1  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  cannot  find  symbol  accum1	129	None	replace
269	[BUG]  [BUGGY]  double  sumWts  =  10.0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  sumWts  =  10.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  10.0;	  double    sumWts    =    0.0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  weights.length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    (int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  (int  i  =  start;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  (int  i  =  start;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  weights.length;  i++)  {  (int  i  =  start;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    (int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
272	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	34	None	replace
273	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ')'  expected	34	None	replace
274	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  i  [FE]        AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	34	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length);  i++)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length);  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights.length);  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights[i])  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights[i])  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  =  1  <  weights[i])  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
278	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
279	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  2.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
280	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWtes))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  start  +  length;  i++)  {  For(int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  start  +  length;  i++)  {  For(int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  start  +  length;  i++)  {  For(int  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    For(int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	9	None	replace
282	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (dev  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (dev  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (dev  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (sumWts    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
283	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  1.0;  }  else  {  sumWts  +=  1.0;  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
284	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
285	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
286	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
287	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  weights.length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    For(int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	39	None	replace
289	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  10.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  10.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  10.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
290	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  *  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  *  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  *  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  (int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  (int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    (int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	28	None	add
292	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    totalWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
293	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
294	[BUG]  [BUGGY]  if(sumWts  ==  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  ==  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  ==  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
295	[BUG]  [BUGGY]  if(sumWts  >=  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >=  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >=  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
296	[BUG]  [BUGGY]  var  =  accum  -  (sumWts  *  accum2  /  accum1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (sumWts  *  accum2  /  accum1);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (sumWts  *  accum2  /  accum1);	  var    =    accum    -    (accum1    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
297	[BUG]  [BUGGY]  var  =  accum  -  (prev  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (prev  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (prev  *  accum2  /  sumWts);	  var    =    accum    -    (accum1    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
298	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
299	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
300	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
301	[BUG]  [BUGGY]  if(sumWts  >  1)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
302	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum++;    }    	non-compiled	[CE]  ';'  expected	123	None	replace
303	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
304	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	57	None	replace
305	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
306	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	59	None	replace
307	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  i  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	59	None	replace
308	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	94	None	replace
309	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	94	None	replace
310	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	94	None	replace
311	[BUG]  [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    while(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  i	118	None	replace
312	[BUG]  [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  'else'  without  'if'  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    while(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
313	[BUG]  [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  [CE]  cannot  find  symbol  accum1  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    while(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	118	None	replace
314	[BUG]  [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  'else'  without  'if'  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    while(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
315	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    DEV;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	13	None	replace
316	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
317	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
318	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr  incadr	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  ';'  expected	68	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  int  i  =  start;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  weights.length;  i++)  {  int  i  =  start;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  weights.length;  i++)  {  int  i  =  start;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	40	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  weights.length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	40	None	replace
321	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  1.0))/  dev;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  1.0))/  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  1.0))/  dev;  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    1.0))    /    dev;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
322	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  dev;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  dev;  }	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    1.0))    /    dev;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
323	[BUG]  [BUGGY]  if(sumWts  ==  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  ==  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  ==  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  cannot  find  symbol  i	60	None	replace
324	[BUG]  [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
325	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts  /  2.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts  /  2.0);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
326	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  ';'  expected	33	None	add
327	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	82	None	replace
328	[BUG]  [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  >  expected	82	None	replace
329	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  1.0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  accum2))  /  1.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
330	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  1.0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  dev))  /  1.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
331	[BUG]  [BUGGY]  var  =  (accum  -  (dev  *  accum2  /  sumWts))  /  1.0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (dev  *  accum2  /  sumWts))  /  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (dev  *  accum2  /  sumWts))  /  1.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
332	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  (int  i  =  begin;  i  <  length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  (int  i  =  begin;  i  <  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    length;    i++)    {    (int  i  =  begin;  i  <  length;  i++)  {	  	non-compiled	[CE]  ')'  expected	24	None	add
333	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  ']'  expected	22	None	replace
334	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    If(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
335	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
336	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
337	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
338	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (prev  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (prev  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (prev  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum1    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  Weights.length;  i++)  {  [CE]  cannot  find  symbol  Weights  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  Weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  Weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    for(int    i    =    1;    i    <    Weights.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  Weights	42	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  int  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	11	None	replace
341	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	47	1	add
342	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	47	1	add
343	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2	  	non-compiled	[CE]  ')'  expected	47	None	add
344	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  (int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  (int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    (int  i  =  1;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
345	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  if(i  =  1;  i  <  weights.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  if(i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    if(i  =  1;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
346	[BUG]  [BUGGY]  var  =  1.0  -  (accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  1.0  -  (accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  1.0  -  (accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  ')'  expected	88	None	replace
347	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
348	[BUG]  [BUGGY]  var  =  1.0  -  (accum  -  (accum2  *  accum2  /  dev);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  1.0  -  (accum  -  (accum2  *  accum2  /  dev);  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  1.0  -  (accum  -  (accum2  *  accum2  /  dev);	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  ')'  expected	88	None	replace
349	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  Accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  cannot  find  symbol  Accum  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  Accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  Accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  Accum	51	None	add
350	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  totalWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  totalWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  totalWts);  }	  if(incMoment)    {    var    =    accum    -    (accum1    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
351	[BUG]  [BUGGY]  double  sumWts  =  1.0  /  values.length;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  sumWts  =  1.0  /  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1.0  /  values.length;	  double    sumWts    =    1.0    +    values.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
352	[BUG]  [BUGGY]  double  sumWts  =  1.0  *  values.length;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  sumWts  =  1.0  *  values.length;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1.0  *  values.length;	  double    sumWts    =    1.0    +    values.length;    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
353	[BUG]  [BUGGY]  ||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }	  ||    isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
354	[BUG]  [BUGGY]  ||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);	  ||    isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
355	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	74	None	replace
356	[BUG]  [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	74	None	replace
357	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [CE]  cannot  find  symbol  pounds  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    pounds[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  pounds	121	None	replace
358	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [CE]  cannot  find  symbol  pounds  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    pounds[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  pounds	121	None	replace
359	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
360	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum1  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	58	1	add
362	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	58	1	add
363	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  not  a  statement	81	None	replace
364	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
365	[BUG]  [BUGGY]  var  =  (accum  -  (dev  *  dev  /  sumWts))  /  1.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (dev  *  dev  /  sumWts))  /  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (dev  *  dev  /  sumWts))  /  1.0;	  var    =    (accum    -    (accum2    *    dev    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
366	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	122	None	replace
367	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	122	None	replace
368	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  1;  i  <  weights.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	6	3	replace
369	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  2;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  1;  i  <  weights.length  -  2;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	6	3	replace
370	[BUG]  [BUGGY]  bărbați  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  bărbați  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	bărbați  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
371	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
372	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
373	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
374	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  (int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  (int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    (int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  	non-compiled	[CE]  ')'  expected	30	None	add
376	[BUG]  [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    dev    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
377	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    dev    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  start  +  length  -  1;  i++)  {  [CE]  cannot  find  symbol  start  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  start  +  length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  start  +  length  -  1;  i++)  {	  for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  start	31	None	replace
379	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
380	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
381	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
382	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
383	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
384	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
385	[BUG]  [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ')'  expected	36	None	replace
386	[BUG]  [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  >  expected	3	None	replace
387	[BUG]  [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    mean;    }    	non-compiled	[CE]  ';'  expected	83	None	replace
388	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
389	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  2.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
390	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
391	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
392	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
393	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
394	[BUG]  [BUGGY]  For(int  i  =  begin  +  1;  i  <  begin  +  length;  i++)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin  +  1;  i  <  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin  +  1;  i  <  begin  +  length;  i++)  {	  For(int    i    =    begin    +    length;    i    <    begin    +    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	44	None	replace
395	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  sumWts  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  sumWts  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  sumWts  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	72	None	replace
396	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	72	None	replace
397	[BUG]  [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	76	None	replace
398	[BUG]  [BUGGY]  var  =  Accum  -  (accum  -  (dev  *  accum2  /  ')'  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Accum  -  (accum  -  (dev  *  accum2  /  ')'  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum  -  (dev  *  accum2  /  ')'	  var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	56	None	replace
399	[BUG]  [BUGGY]  var  =  accum  -  (sumWts  *  accum2  /  accum2);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (sumWts  *  accum2  /  accum2);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (sumWts  *  accum2  /  accum2);	  var    =    accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
400	[BUG]  [BUGGY]  if(incMoment)  {  sumWts  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  sumWts  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  sumWts  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
401	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumW	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
402	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  sumWts  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  sumWts  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  sumWts  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	71	None	replace
403	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
404	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
405	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    for(int  i  =  0;  i  <  weights.length;  i++)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  'else'  without  'if'	135	None	add
406	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
407	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
408	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    totalWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
409	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  accum1  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        else        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	33	None	add
410	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  begin  +  length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  1;  i  <  begin  +  length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	6	3	replace
411	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  begin  +  length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  1;  i  <  begin  +  length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  1;  i  <  begin  +  length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length    -    1;    i++)    {    	compilable	  [FE]  AssertionError  	6	3	replace
412	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  dev  *  values[i];  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  dev  *  values[i];  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  dev  *  values[i];  }	  incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  not  a  statement	78	None	replace
413	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  dev  /  sumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  dev  /  sumWts))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  dev  /  sumWts))  /  2.0;	  var    =    (accum    -    (accum2    *    dev    /    sumWts))/    1.0;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
414	[BUG]  [BUGGY]  var  =  accum  -  (accum  *  dev  /  sumWts);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum  *  dev  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum  *  dev  /  sumWts);	  var    =    accum    -    (accum2    *    dev    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
415	[BUG]  [BUGGY]  var  =  accum  -  (accum1  *  dev  /  sumWts);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum1  *  dev  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum1  *  dev  /  sumWts);	  var    =    accum    -    (accum2    *    dev    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
416	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	125	None	replace
417	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  var  =  Accum  -  (suntetisuntetisuntetisuntetisuntetisunteti  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  var  =  Accum  -  (suntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  var  =  Accum  -  (suntetisuntetisuntetisuntetisuntetisunteti	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ')'  expected	115	None	replace
418	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
419	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts)/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
420	[BUG]  [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  2.0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  2.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (sumWts  *  accum2  /  sumWts))  /  2.0;	  var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
421	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
422	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
423	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  while(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  while(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    while(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	28	None	add
424	[BUG]  [BUGGY]  'else'  without  'if'  [CE]  unclosed  character  literal  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  'else'  without  'if'  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	'else'  without  'if'	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    while(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  unclosed  character  literal	118	None	replace
425	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  /  2;  i++)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  /  2;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  /  2;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length    *    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	127	None	replace
426	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  dev  /  dev);  var  =  1.0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  dev  /  dev);  var  =  1.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  dev  /  dev);  var  =  1.0;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
427	[BUG]  [BUGGY]  var  =  accum  -  (accum1  *  accum2  /  dev);  var  =  1.0;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum1  *  accum2  /  dev);  var  =  1.0;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum1  *  accum2  /  dev);  var  =  1.0;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    var    =    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
428	[BUG]  [BUGGY]  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	}  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
429	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
430	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum2  +=  [CE]  cannot  find  symbol  i  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum2  +=  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum2  +=	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  cannot  find  symbol  i	129	None	replace
431	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    	non-compiled	[CE]  cannot  find  symbol  i	129	None	replace
432	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (dev  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
433	[BUG]  [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
434	[BUG]  [BUGGY]  if(sumWts  >  1)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum1    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
435	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum  >=  ';'  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum  >=  ';'  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum  >=  ';'	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  not  a  statement	93	None	replace
436	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
437	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *dev  *  dev;  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *dev  *  dev;  accum2  +=  weights  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *dev  *  dev;  accum2  +=  weights  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	71	None	replace
438	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  dev);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum1    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
439	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
440	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts    	non-compiled	[CE]  cannot  find  symbol  i	35	None	replace
441	[BUG]  [BUGGY]  if(sumWts  >  0.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  0.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  0.0)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
442	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	  if(incMoment)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  For(int  i  =  start;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  For(int  i  =  start;  i  <  weights.length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  start;  i  <  begin  +  length;  i++)  {  For(int  i  =  start;  i  <  weights.length;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    For(int    i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	39	None	replace
444	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum++;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum++;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev);  accum++;  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    dev))/    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum++;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
445	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  values[i];  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  values[i];  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  values[i];  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    values[i]    *    values[i];    }    	non-compiled	[CE]  cannot  find  symbol  i	76	None	replace
446	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  dev  /  dev);  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
447	[BUG]  [BUGGY]  if(!incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(!incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
448	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        sumWts);        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  not  a  statement	58	None	add
449	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  <  weights.length);  i++)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  <  weights.length);  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  <  weights.length);  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  ';'  expected	92	None	replace
450	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  >  begin  +  length)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  >  begin  +  length)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  if(i  >  begin  +  length)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i    =    1;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
451	[BUG]  [BUGGY]  bărbați  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  bărbați  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	bărbați  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
452	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  not  a  statement	135	None	add
453	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	135	1	add
454	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	135	1	add
455	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ';'  expected	87	None	replace
456	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length.length  -  1;  i++)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin;  i  <  begin  +  length.length  -  1;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  begin  +  length.length  -  1;  i++)  {	  for(int    i    =    begin;    i    <    weights.length    -    1;    i++)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
457	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
458	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts  -  1.0;  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
459	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts);  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	57	None	replace
460	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts));  /=  sumWts  -  1.0;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts));  /=  sumWts  -  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  sumWts));  /=  sumWts  -  1.0;  }	  if(isBiasCorrected)    {    var    =    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
461	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
462	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)    {    var    =    accum    -    (accum    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
463	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
464	[BUG]  [BUGGY]  accum  -=  accum2  *  accum2  /  sumWts;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  accum  -=  accum2  *  accum2  /  sumWts;  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	accum  -=  accum2  *  accum2  /  sumWts;	          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
465	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
466	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  DEV;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  DEV;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    DEV;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	13	None	replace
467	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	  if(incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    DEV;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	13	None	replace
468	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  poids[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  poids[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  poids[i]  *  (dev  *  dev);  accum2  +=  weights  }	  if(!incMoment)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	105	None	replace
469	[BUG]  [BUGGY]  var  =  Acum  -  (accum  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Acum  -  (accum  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Acum  -  (accum  *  accum2  /  sumWts);	  var    =    Accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
470	[BUG]  [BUGGY]  var  =  Acum  -  (accum1  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  Acum  -  (accum1  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Acum  -  (accum1  *  accum2  /  sumWts);	  var    =    Accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
471	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  start  +  length;  i++)  {  [CE]  cannot  find  symbol  start  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  for(int  i  =  begin  +  length;  i  <  start  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin  +  length;  i  <  start  +  length;  i++)  {	  for(int    i    =    begin    +    length;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  start	29	None	replace
472	[BUG]  [BUGGY]  Integer  i  =  begin;  i  <  begin  +  length;  i++)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  Integer  i  =  begin;  i  <  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	Integer  i  =  begin;  i  <  begin  +  length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	11	None	replace
473	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  poids[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  poids[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  poids[i]  *  (dev  *  dev);  accum2  +=  weights  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	72	None	replace
474	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *dev  *  dev;  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *dev  *  dev;  accum2  +=  weights  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *dev  *  dev;  accum2  +=  weights  }	  if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    }    	non-compiled	[CE]  ';'  expected	72	None	replace
475	[BUG]  [BUGGY]  var  =  accum  -  (accum  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum  *  accum2  /  sumWts);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum  *  accum2  /  sumWts);	  var    =    accum    -    (accum2    *    accum2    /    sumWts);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
476	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	47	1	add
477	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        (accum        -        (accum2        *        accum2        /        sumWts))        /        1.0;        }        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	47	1	add
478	[BUG]  [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(sumWts  >  1.0)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
479	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  dev);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  dev);  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  dev);	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
480	[BUG]  [BUGGY]  ||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  ||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  ||    isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
481	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  dev  *  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  dev  *  dev;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  dev  *  dev;	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    dev    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
482	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  dev  *  dev;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  dev  *  dev;  }  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  dev  /  dev);  accum2  +=  dev  *  dev;  }	  if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum2    +=    dev    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
483	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	51	1	add
484	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	51	1	add
485	[BUG]  [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]          if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	                if(isBiasCorrected)        {        var        =        accum        -        (accum2        *        accum2        /        1.0);        }        else        {        sumWts        +=        1.0;        }        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  not  a  statement	51	None	add
486	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  >=  ';'  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  >=  ';'  [BUGGY]      for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  >=  ';'	  if(incMoment)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))/    2.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  not  a  statement	94	None	replace
487	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  dev  /  1.0))/  dev;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  dev  /  1.0))/  dev;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  dev  /  1.0))/  dev;	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    1.0))    /    dev;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
488	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  dev;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  dev;  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  totalWts))/  dev;	  if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    1.0))    /    dev;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
489	[BUG]  [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;      [BUGGY]  int  i  =  begin;  i  <  begin  +  length;  i++)  {  [BUGGY]      sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	int  i  =  begin;  i  <  begin  +  length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    (int    i    =    begin;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  >  expected	77	None	replace
