bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
2	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
3	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
4	[BUG]  [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	3	3	replace
6	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  1;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    1;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	3	3	replace
7	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  for(int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  for(int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length;    i++)    {    for(int  i  =  begin;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
8	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  for(int  i  =  start;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  for(int  i  =  start;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length;    i++)    {    for(int  i  =  start;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
9	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  For(int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  For(int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length;    i++)    {    For(int  i  =  begin;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	11	None	add
10	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  for(int  i  =  beginning;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  for(int  i  =  beginning;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length;    i++)    {    for(int  i  =  beginning;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
11	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length;    i++)    {    int  i  =  begin;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  >  expected	11	None	add
12	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  start  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  start;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  start	6	None	replace
13	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [CE]  cannot  find  symbol  DEV  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  DEV;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  DEV	6	None	replace
14	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
15	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
16	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
17	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
18	[BUG]  [BUGGY]  double  sumWts  =  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  double  sumWts  =  1;  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1;	      double    sumWts    =    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  double  sumWts  =  0.0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  double  sumWts  =  0.0;  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  0.0;	      double    sumWts    =    0;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  ';'  expected	5	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  start  +  length;  i++)  {  [CE]  cannot  find  symbol  start  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  start  +  length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  start  +  length;  i++)  {	  for(int    i    =    start;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  start	10	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin;  i  <  length;  i++)  {	  for(int    i    =    start;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	10	1	replace
25	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  length;  i++)  {	  for(int    i    =    start;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	10	1	replace
26	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
27	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	12	3	replace
29	[BUG]  [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin  +  length;  i  <  weights.length;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	12	3	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	12	3	replace
31	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int  i  =  begin;  i  <  weights.length  -  1;  i++)  {	  for(int    i    =    begin;    i    <    weights.length;    i++)    {    	compilable	  [FE]  AssertionError  	12	3	replace
32	[BUG]  [BUGGY]  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum2  *  accum2  /  sumWts);	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	21	1	add
34	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	21	1	add
35	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts	  	non-compiled	[CE]  ')'  expected	21	None	add
36	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  ';'  expected	21	None	add
37	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  accum1  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	21	None	add
38	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  for(int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  for(int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    for(int  i  =  1;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
39	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  For(int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    For(int  i  =  1;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  '.class'  expected	2	None	add
40	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    int  i  =  1;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  >  expected	2	None	add
41	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  (int  i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    (int  i  =  1;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	2	None	add
42	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  for(int  i  =  1;  i  <  Weights.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  for(int  i  =  1;  i  <  Weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    for(int  i  =  1;  i  <  Weights.length;  i++)  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
43	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  -  1;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
44	[BUG]  [BUGGY]  For(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  For(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin  +  length;  i  <  begin  +  length;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
45	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  accum  -  (accum2  *  accum2  /  sumWts);  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  accum2  /  sumWts);	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
46	[BUG]  [BUGGY]  var  =  accum  -  (accum1  *  accum2  /  sumWts);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  accum  -  (accum1  *  accum2  /  sumWts);  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum1  *  accum2  /  sumWts);	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	15	1	add
48	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	15	1	add
49	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
50	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	15	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	18	1	add
52	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	18	1	add
53	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  not  a  statement	18	None	add
54	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  If(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  If(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    If(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  ';'  expected	18	None	add
55	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	18	None	add
56	[BUG]  [BUGGY]  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  Accum  -  (accum  -  (accum2  *  accum2  /	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	17	None	replace
57	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	17	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	23	1	add
59	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	compilable	  [FE]  AssertionError  	23	1	add
60	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  If(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  If(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    If(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  ';'  expected	23	None	add
61	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  not  a  statement	23	None	add
62	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  cannot  find  symbol  accum1  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	23	None	add
63	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
64	[BUG]  [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  ||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	||  isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
65	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  ';'  expected	7	None	replace
66	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  ';'  expected	7	None	replace
67	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
68	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
69	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
70	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
71	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  ';'  expected	8	None	replace
72	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  ';'  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  ';'  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  ';'	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  ';'  expected	8	None	replace
74	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum2  +=  weights[i]  *  dev;  }	      	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
75	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	      	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
76	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  values[i];  }	      	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  begin;  i  <  weights.length;  i++)  {  (int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    begin;    i    <    weights.length;    i++)    {    (int  i  =  begin;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	11	None	add
78	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
79	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  cannot  find  symbol  i  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  i	6	None	replace
80	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
81	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
82	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
83	[BUG]  [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [CE]  not  a  statement  [FE]                    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  values[i]  *  mean;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
84	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
85	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	17	None	replace
86	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
87	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]                    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	17	None	replace
88	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  var  =  1.0;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  1.0))  /  dev;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  1.0))  /  dev;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  1.0))  /  dev;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  sumWts  +=  1.0;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  if(i  =  1;  i  <  weights.length;  i++)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  if(i  =  1;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    if(i  =  1;  i  <  weights.length;  i++)  {	  	non-compiled	[CE]  ')'  expected	2	None	add
93	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	26	None	replace
94	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	26	None	replace
95	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
96	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
97	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (sumWts  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (sumWts  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (sumWts  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
98	[BUG]  [BUGGY]  double  sumWts  =  1.0  +  values.length;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  double  sumWts  =  1.0  +  values.length;  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	double  sumWts  =  1.0  +  values.length;	      double    sumWts    =    1.0;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
99	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  >>  '  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  >>  '	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  illegal  line  end  in  character  literal	7	None	replace
100	[BUG]  [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  ';'  expected	7	None	replace
101	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	  	non-compiled	[CE]  ';'  expected	21	None	add
102	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
103	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  '  [CE]  illegal  line  end  in  character  literal  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  '  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights!=  '	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  illegal  line  end  in  character  literal	8	None	replace
105	[BUG]  [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights    	non-compiled	[CE]  ';'  expected	8	None	replace
106	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
107	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
108	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
109	[BUG]  [BUGGY]  For(int  i  =  start;  i  <  begin  +  length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  For(int  i  =  start;  i  <  begin  +  length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  start;  i  <  begin  +  length;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
110	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  else  {  sumWts  +=  1.0;  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
111	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum1  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
112	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  totalWts);  }  else  {  sumWts  +=  1.0;  }	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(!incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
114	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
115	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
116	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  Accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
117	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  else  {  var  =  Accum  -  (accum1  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
118	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    while(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	non-compiled	[CE]  'else'  without  'if'	18	None	add
119	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  weights.length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  For(int  i  =  begin;  i  <  weights.length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  weights.length;  i++)  {	  for(int    i    =    start;    i    <    weights.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	10	None	replace
120	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  Accum  -  (accum  -  (accum2  *  accum2  /	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    Accum    -    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	17	None	replace
121	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [CE]  cannot  find  symbol  pounds  [FE]          AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  pounds[i]  *  dev;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  cannot  find  symbol  pounds	6	None	replace
122	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  ';'  expected	26	None	replace
123	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum++;  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    dev);    accum    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
124	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  for(int  i  =  1;  i  <  weights.length);  i++)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  for(int  i  =  1;  i  <  weights.length;  i++)  {  for(int  i  =  1;  i  <  weights.length);  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	for(int    i    =    1;    i    <    weights.length;    i++)    {    for(int  i  =  1;  i  <  weights.length);  i++)  {	  	non-compiled	[CE]  ';'  expected	2	None	add
125	[BUG]  [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
126	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  dev  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  (accum  -  (accum2  *  dev  /  sumWts))/  1.0;  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  (accum  -  (accum2  *  dev  /  sumWts))/  1.0;	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
127	[BUG]  [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  length;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  For(int  i  =  begin;  i  <  begin  +  length  *  length;  i++)  {  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	For(int  i  =  begin;  i  <  begin  +  length  *  length;  i++)  {	  For(int    i    =    begin;    i    <    begin    +    length;    i++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
128	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  dev  *  dev;  }	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
129	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [CE]  cannot  find  symbol  i  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=  [BUGGY]    sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  dev))  /  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  dev);  accum2  +=	      	non-compiled	[CE]  cannot  find  symbol  i	4	None	replace
130	[BUG]  [BUGGY]  var  =  accum  -  (accum2  *  dev  /  sumWts);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  var  =  accum  -  (accum2  *  dev  /  sumWts);  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	var  =  accum  -  (accum2  *  dev  /  sumWts);	      if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    sumWts);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
131	[BUG]  [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [CE]  cannot  find  symbol  i  [FE]                AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	while(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    sumWts    +=    weights[i]    *    mean;    }    	non-compiled	[CE]  cannot  find  symbol  i	9	None	replace
132	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    	non-compiled	[CE]  ';'  expected	5	None	replace
133	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWtes))  /  1.0;  }  [CE]  cannot  find  symbol  sumWtes  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWtes))  /  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWtes))  /  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  sumWtes	15	None	add
134	[BUG]  [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  >=  '  [CE]  illegal  line  end  in  character  literal  [FE]            AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]  if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  >=  '  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	if(incMoment)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  >=  '	      if(isBiasCorrected)    {    for(int    i    =    begin;    i    <    begin    +    length;    i++)    {    dev    =    values[i]    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    	non-compiled	[CE]  illegal  line  end  in  character  literal	7	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	add	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	18	1	add
136	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    double  accum  =  0.0;  double  dev  =  0.0;  double  accum2  =  0.0;  for  (int  i  =  begin;  i  <  begin  +  length;  i++)  {  dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;    [BUGGY]      if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }  [BUGGY]    for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }  if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	520	520	1	replace	        if(isBiasCorrected)    {    var    =    accum    -    (accum2    *    accum2    /    1.0);    }    else    {    sumWts    +=    1.0;    }    if(isBiasCorrected)  {  var  =  accum  -  (accum  *  accum2  /  1.0);  }  else  {  sumWts  +=  1.0;  }	  	compilable	  [FE]  AssertionError  	18	1	add
