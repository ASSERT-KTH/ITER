increase failing tests,319,add, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, ,    test(values, weights, begin, length + 1);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 2) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > begin + 1) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 && isBiasCorrected) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 || length > begin + 1) {
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  return  var;  }  ,var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1 && test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin,  length);  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { return 0.0; }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin,  length);  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  2)  {  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  2)  {  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { return 0; }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  ==  2)  {  ,if(test(values, weights, begin, length)) { if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  2)  {  ,} else if(length == 2) {
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, clearSegments();  ,double y = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, clearSegments();  ,double e = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance,   double  j  =  mean.evaluate(values,  weights,  begin,  length);  ,double j = mean.evaluate(values, weights, begin, length + 1);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  j  =  mean.evaluate(values,  weights,  begin,  length);  ,double j = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 && isBiasCorrected || length > 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 && incMoment) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double w = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <=  1)  {  ,if(length >= 1) {
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double h = mean.evaluate(values, weights, begin, length + 1);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double h = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double h = mean.evaluate(values, weights, begin, length)+ 1;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  ,if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); if(length == 2) { throw new IllegalArgumentException(""); }
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,    double  y  =  mean.evaluate(values,  weights,  begin,  length);  var = evaluate(values, weights, begin, length);
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,    double  y  =  mean.evaluate(values,  weights,  begin,  length);  var = evaluate(values, weights, begin, length); isBiasCorrected = false;
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,    double  y  =  mean.evaluate(values,  weights,  begin,  length);  var = evaluate(values, weights, begin, length); isBiasCorrected = true;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, begin, length + 1);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, begin, length)- 1;
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,    test(values,  begin,  length);  var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,double s = mean.evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  Double.MIN_VALUE;  ,double var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length + 1);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length)+ 1;
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  <  1)  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,    double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)) { clear(); var = evaluate(values, weights, begin, length); }
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  2)  {  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  clear();  }  ,var = evaluate(values, weights, begin, length); if(length > 1) { clear(); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 && length < 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 || length > 2) {
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length + 1);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length)+ 1;
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <=  1)  {  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 2) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <=  1)  {  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > begin) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  1))  {  ,if(test(values, begin, length)&& length > 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin  +  length);  ,if(test(values, weights, begin, length)&& length > 0) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin  +  length);  ,if(test(values, begin, length)&& length > 0) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin  +  length);  ,if(test(values, weights, begin, length)&& length > 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > begin) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 || length < 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  ,if(test(values, weights, begin, length)) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,clear();
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > begin) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,add, [FE] StackOverflowError testWeightedVariance, ,}  else  if(length  >  2)  {  clear(); var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  2)  {  ,if(test(values, weights, begin, length)) { if(length == 1) { return 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  2)  {  ,if(test(values, weights, begin, length)) { if(length == 1) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  >  1))  {  ,if(test(values, begin, length)|| length > 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 1) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(length < 1) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <  1)  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 1) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  {  ,if(test(values, weights, begin, length)&& length <= 2) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  ,if(test(values, begin, length)) { if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  ,if(test(values, begin, length)) { if(test(values, weights, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  ,if(test(values, begin, length)) { if(test(values, begin, length)) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,   double  m  =  evaluate(values,  weights,  begin,  length);  ,double t = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > begin) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  ,if(test(values, weights, begin, length)&& length <= 1) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  2)  {  ,if(length == 1 || length > 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin  +  length);  ,if(test(values, begin, length)&& isBiasCorrected) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance,   System.arraycopy(values,  begin,  0,  var,  begin  +  length);  ,if(test(values, begin, length)&& test(weights, begin, length)) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <=  1)  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 2) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  <=  1)  {  ,if(test(values, weights, begin, length)) { var = 0.0; if(length == 2) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   var  =  evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > begin + 2) {
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  return  var;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) return var; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  2)  {  ,if(test(values, weights, begin, length)) { if(length == 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 && isBiasCorrected()) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > 1 && isBiasCorrected || length < 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,   ,var = evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,clear(); var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double e = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,add, [FE] MathIllegalArgumentException testWeightedConsistency, ,    double  weight  =  mean.evaluate(values,  weights,  begin,  length);  double value = mean.evaluate(values, values, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  y  =  mean.evaluate(values,  weights,  begin,  length);  ,double y = mean.evaluate(values, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  0.0;  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  return  var;  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { return var; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,add, [FE] ArrayStoreException testWeightedVariance, ,    double  y  =  mean.evaluate(values,  weights,  begin,  length);  System.arraycopy(values, begin, var, 0, length);
increase failing tests,325,add, [FE] StackOverflowError testWeightedVariance, ,    double  y  =  mean.evaluate(values,  weights,  begin,  length);  var = evaluate(values, weights, begin, length)- 10.0;
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,    var = evaluate(values, weights, begin, length)- 10.0;
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,324,add, [FE] IllegalArgumentException testWeightedVariance, ,    double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,    double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); } else if(length == 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  j  =  mean.evaluate(values,  weights,  begin,  length);  ,double j = mean.evaluate(values, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double j = mean.evaluate(values, values, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance,   if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double h = mean.evaluate(values, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,   double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,} else if(length > begin || length < 2) {
