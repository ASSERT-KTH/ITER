increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  2)  {  clear();  ,if(test(values, begin, length)&& length > 2) { clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  2)  {  clear();  ,if(test(values, begin, length)&& length!= 2) { clear();
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  2)  {  clear();  ,if(test(values, begin, length)|| length < 2) { clear();
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); } if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)carries  throw  new  IllegalArgumentException( " ");  ,if(test(values, weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)carries  throw  new  IllegalArgumentException( " ");  ,if(test(values, weights, begin, length)&& length > 1) throw new IllegalArgumentException("");
increase failing tests,318,replace, [FE] MathIllegalArgumentException testWeightedVariance, if(test(values,  weights,  0,  m))  {  ,if(test(values, weights, 0, begin)) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  2)  {  if(test(values,  weights,  begin,  length)&&  length  <  2)  {  ,if(test(values, weights, begin, length)&& length!= 2) {
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  1)  prompted  throw  new  IllegalArgumentException( "   ");  }  ,if(test(values, begin, length)&& length > 1) { if(test(weights, begin, length)&& length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  var  =  evaluate(values,  weights,  begin,  length);  ,double v = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length,  1);  ,if(test(values, weights, begin, length)&& length > 1) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  m,  begin,  length,  1);  ,if(test(values, weights, begin, length)|| length > 1) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  0)  {  double  m  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin  ,if(test(values, weights, begin, length)) { return 0.0; } if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  consulted  var  =  0.0;  if(test(values,  weights,  begin,  length))  return  0;  }  ,double y = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) var = 0.0; if(test(values, weights, begin, length)) return 0;
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  y  =  Double.MIN_VALUE;  double  var  =  evaluate(values,  begin,  length)-  1;  ,double y = Double.MIN_VALUE; double var = evaluate(values, weights, begin, length)- 1;
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  i  =(values  ==  null)?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  var  =  evaluate(values,  begin,  length);  ,double i =(values == null)? Double.MIN_VALUE : Double.MAX_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  var  =(values  ==  null)?  Double.POSITIVE_INFINITY  /  2.0  :  0.0;  ,double v =(values == null)? Double.POSITIVE_INFINITY / 2.0 : 0.0;
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, }  else  if(length  ==  1  &&  starts  with  n(values,  weights,  begin,  length))  {  ,var = mean.evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, }  else  if(length  ==  1  &&  starts  with  n(values,  weights,  begin,  length))  {  ,m = mean.evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, }  else  if(length  ==  1  &&  starts  with  n(values,  weights,  begin,  length))  {  ,var = mean.evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  var  =  evaluate(values,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  clear();  }  ,if(test(values, weights, begin, length)&& length > 1) { clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  0)  {  double  y  =  mean.evaluate(values,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  d  =  mean.evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { double d = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); d = mean.evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(length  ==  1)  {  return  0.0;  }  if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { if(length > 1) { throw new IllegalArgumentException(" "); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  >>  ,if(length > 2) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance,                 test(values,    weights,    begin,    length    -    1);    clear();  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,test(values, weights, begin, length); clear(); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,add, [FE] IllegalArgumentException testWeightedVariance, ,if(test(values,    weights,    begin,    length)&&    length    <=    1)    {    throw    new    IllegalArgumentException(   "   ");    }    if(test(values,  weights,  begin,  length)&&  length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  if(test(values, weights, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,319,add, [FE] IllegalArgumentException testWeightedVariance, ,if(test(values,    weights,    begin,    length)&&    length    <=    1)    {    throw    new    IllegalArgumentException(   "   ");    }    if(test(values,  weights,  begin,  length)&&  length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  if(test(values, weights, begin, length)|| length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  evaluate(values,  begin,  length);  var  =  evaluate(values,  var,  begin,  length);  ,Double var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  evaluate(values,  begin,  length);  var  =  evaluate(values,  var,  begin,  length);  ,Double var = evaluate(values, weights, begin, length); var = evaluate(values, var, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, Double  m  =  evaluate(values,  begin,  length);  var  =  evaluate(values,  var,  begin,  length);  ,Double var = evaluate(values, begin, length); var = evaluate(values, values, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, double  m  =  means.evaluate(values,  begin,  length)/  2;  double  d  =  mean.evaluate(values,  begin,  length);  ,double val =(values == null)? Double.NaN - Double.POSITIVE_INFINITY : Double.NaN; final double m = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  /  Double.POSITIVE_INFINITY  :  Double.NaN;  ,double v =(values == null)? Double.NaN / Double.POSITIVE_INFINITY : Double.NaN;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  /  Double.POSITIVE_INFINITY  :  Double.NaN;  ,double n =(values == null)? Double.NaN / Double.POSITIVE_INFINITY : Double.NaN;
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length))  var  =  evaluate(values,  weights,  begin,  length);  if(length  <  1)  {  return  0.0;  }  ,if(test(values, begin, length)&& length > 1) { if(test(values, begin, length)) var = evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  begin,  length))  var  =  evaluate(values,  weights,  begin,  length);  if(length  <  1)  {  return  0.0;  }  ,if(test(values, begin, length)|| length > 1) { if(test(values, begin, length)) var = evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  return  0;  }  ,if(test(values, begin, length)&& length!= 2) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =(values  ==  null)?  Double.NaN  :  Double.POSITIVE_INFINITY;  ,double y =(values == null)? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =(values  ==  null)?  Double.NaN  :  Double.POSITIVE_INFINITY;  ,double e =(values == null)? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, test(values,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length)-  1);  ,if(length > 1) { test(values, begin, length); var = evaluate(values, weights, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  s  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,double p = mean.evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length,  end);  ,var = evaluate(values, weights, begin, length, 1);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <  2)  {  ,if(test(values, begin, length)|| length < 2) {
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  begin,  length)&&  length  >  1)  {  clear();  }  else  {  return  0;  }  var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  0)  {  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  0)  {  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  m,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  m,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(double)Double.POSITIVE_INFINITY  *  this.values.length;  ,var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) {
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(double)Double.POSITIVE_INFINITY  *  this.values.length;  ,var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length > 1) {
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  v  =(values  ==  null)?  Double.MIN_VALUE  :  Double.MAX_VALUE;  double  var  =  evaluate(values,  begin,  length);  ,double v =(values == null)? Double.MIN_VALUE : Double.MAX_VALUE; double var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  double  n  =  mean.evaluate(values,  weights,  begin,  length,  isBiasCorrected);  }  else  {  m  =  mean.evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  double  n  =  mean.evaluate(values,  weights,  begin,  length,  isBiasCorrected);  }  else  {  m  =  mean.evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, 0, length)) { if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); double v = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  Double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,double w = mean.evaluate(values, weights, begin, length + 1); Double m = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  0)  {  clear();  if(test(weights,  begin,  length))  {  clear();  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(length > 0) { clear(); if(test(weights, begin, length)) { clear(); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, clear();  Integer  var  =  evaluate(values,  begin,  length);  ,clear(); Double var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(test(values,  begin,  length))  {  clear();  var  =  evaluate(values,  weights,  m,  begin,  length);  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { clear(); var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(test(values,  begin,  length))  {  clear();  var  =  evaluate(values,  weights,  m,  begin,  length);  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(test(values, begin, length)) { clear(); var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(test(values,  begin,  length))  {  clear();  var  =  evaluate(values,  weights,  m,  begin,  length);  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(values, begin, length)) { clear(); if(test(values, begin, length)) { clear(); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(test(values,  begin,  length))  {  clear();  var  =  evaluate(values,  weights,  m,  begin,  length);  var  =  evaluate(values,  weights,  m,  begin,  length);  }  ,if(test(weights, begin, length)) { clear(); if(test(values, begin, length)) { clear(); var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(incMoment)  {  ,if(!incMoment) {
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, }  else  if(m  >=  0.0)  {  , } else if(length >= 0.0) {
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, }  else  if(m  >=  0.0)  {  , } else if(var >= 0.0) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  var  <=  0.0)  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  sadly  return  0;  }  ,if(test(values, weights, begin, length)&& var <= 0.0) { var = 0.0; if(test(values, weights, begin, length)) return 0; }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length)&& length > 0) { clear(); if(length!= 0) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  m  =  mean.evaluate(values,  weights,  begin,  length)/  2;  double  v  =  mean.evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, weights, begin, length + 1); double v = mean.evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  double  w  =  mean.evaluate(values,  weights,  begin,  length);  double  y  =  mean.evaluate(values,  weights,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  }  ,double m = isBiasCorrected? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(values,  weights,  begin,  length)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(values,  weights,  begin,  length)  {  var  =  evaluate(values,  weights,  var,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(isBiasCorrected)  {  ,return evaluate(values, weights, begin, length)/ var;
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, else  if(m  >  0.0  &&  begins  with  cnt(values,  weights,  begin,  length))  {  ,m = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, else  if(m  >  0.0  &&  begins  with  cnt(values,  weights,  begin,  length))  {  ,var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length);
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  w  =  mean.evaluate(values,  values,  begin,  length  +  1);  ,double m = mean.evaluate(values, values, begin, length + 1);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  f  =  Double.POSITIVE_INFINITY;  double  m  =  evaluate(values,  weights,  begin,  length);  ,double f = Double.POSITIVE_INFINITY; double v = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, int  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  incMoment  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  ,if(!incMoment) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { var = 0.0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, int  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  incMoment  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  ,if(!isBiasCorrected) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, int  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  incMoment  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  ,if(isBiasCorrected) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { var = 0.0; }
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  length!=  1)return  0.0;  ,double m = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length!= 1)return 0.0;
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  0)  {  return  0;  }  var = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length!=  2)  {  clear();  }  else  {  return  0;  }  ,if(test(values, begin, length)&& length > 2) { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)  ||  test(weights,  begin,  length))  {  if(incMoment)  {  moment.evaluate(values,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  ,if(test(values, weights, begin, length)|| test(weights, begin, length)) { moment.evaluate(values, begin, length); if(test(values, weights, begin, length)) { return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  s  =  mean.evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); Double s = mean.evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  /  2  :  Double.NaN;  double  n  =  evaluate(values,  weights,  begin,  length);  ,double n =(values == null)? Double.NaN / 2 : Double.NaN; double var = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  m,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length)/ 2;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, var  =  test(values,  m,  weights,  begin,  length);  ,double y = mean.evaluate(values, weights, begin, length)/ 2 + 1;
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, [Delete]  else  if(length  >  1)  {  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,} else if(length == 1) { if(length == 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, [Delete]  else  if(length  >  1)  {  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,} else if(length > 1) { if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, [Delete]  else  if(length  >  1)  {  if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,} else if(length > 1) { if(length == 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  g  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,double r = mean.evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, System.arraycopy(values,  begin,  m,  begin,  length);  ,System.arraycopy(values, begin, weights, begin, length);
increase failing tests,319,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  begin,  m,  begin,  length);  ,System.arraycopy(values, begin, var, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  var  =  evaluate(values,  m,  begin,  length);  ,double v = evaluate(values, m, begin, length);
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length!=  2)  {  clear();  }  else  {  return  0;  }  ,if(test(values, begin, length)&& length == 2) { clear(); } else { return 0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  0.0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  if(length  >  2)  {  clear();  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(length > 2) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  0.0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  if(length  >  2)  {  clear();  }  ,if(length > 0.0) { var = evaluate(values, weights, begin, length); if(length > 2) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  0.0)  {  var  =  evaluate(values,  weights,  m,  begin,  length);  if(length  >  2)  {  clear();  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length > 2) { clear(); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1  &&  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated. ");  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 2) { throw new IllegalArgumentException("Statistics constructed from external moments cannot be evaluated."); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1  &&  length  <  2)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  if(length  ==  1)  {  throw  new  IllegalArgumentException( "Statistics  constructed  from  external  moments  cannot  be  evaluated. ");  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length!= 2) { throw new IllegalArgumentException(""); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  calculate(values,  weights,  begin,  length)/  2;  ,double var = evaluate(values, weights, begin, length)/ 2;
increase failing tests,319,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  m  =  evaluate(values,  begin,  length,  1);  ,double y = evaluate(values, weights, begin, length, 1);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length)-  1;  if(test(values,  weights,  begin,  length))  yak  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  return  0;  }  ,double y = mean.evaluate(values, weights, begin, length)- 1; if(test(values, weights, begin, length)) var = 0.0; if(test(values, weights, begin, length)) { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double  v  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double v = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double  v  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double v = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  x  =  mean.evaluate(values,  weights,  begin,  length);  double  v  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > length) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double v = mean.evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0.0;  }  ,var = evaluate(values, weights, begin, length); if(length == 1) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0.0;  }  ,var = evaluate(values, weights, begin, length); if(length > 1) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0.0;  }  ,var = evaluate(values, weights, begin, length); if(length <= 1) { return 0.0; }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  1)  {  return  0.0;  }  ,var = evaluate(values, weights, begin, length); if(length >= 1) { return 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  assess(values,  values,  begin,  length);  ,evaluate(values, 0, values.length, weights.length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  assess(values,  values,  begin,  length);  ,evaluate(values, weights, 0, values.length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  System.arraycopy(values,  weights,  begin,  0,  var,  begin,  length);  }  else  if(length  >  2)  {  System.arraycopy(values,  weights,  begin,  0,  var,  begin,  length);  [Delete]  ,double y =(values == null)? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  System.arraycopy(values,  weights,  begin,  0,  var,  begin,  length);  }  else  if(length  >  2)  {  System.arraycopy(values,  weights,  begin,  0,  var,  begin,  length);  [Delete]  ,double e =(values == null)? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  System.arraycopy(values,  weights,  begin,  0,  var,  begin,  length);  }  else  if(length  >  2)  {  System.arraycopy(values,  weights,  begin,  0,  var,  begin,  length);  [Delete]  ,double f =(values == null)? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  double  mean  =  mean.evaluate(values,  weights,  begin,  length);  }  ,double n =(values == null)? Double.NaN : Double.POSITIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  double  mean  =  mean.evaluate(values,  weights,  begin,  length);  }  ,double n =(values == null)? Double.NaN : Double.POSITIVE_INFINITY / Double.NEGATIVE_INFINITY;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  double  mean  =  mean.evaluate(values,  weights,  begin,  length);  }  ,double n =(values == null)? Double.NaN : Double.NEGATIVE_INFINITY;
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); } if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, return  evaluate(values,  begin,  0,  this.values.length,  this.weights.length);  ,if(length > 0) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { test(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, return  evaluate(values,  begin,  0,  this.values.length,  this.weights.length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { test(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)||  isBiasCorrected)  {  ,if(test(values, weights, begin, length)&& isBiasCorrected) { var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =  evaluate(values,  weights,  begin,  length);  double  m  =  evaluate(values,  weights,  begin,  length);  ,double var = evaluate(values, weights, begin, length); double y = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, unless(length  >  1  ||  length  >  2)  {  if(test(values,  weights,  begin,  length))  var  =  0.0;  }  else  if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { if(test(values, weights, begin, length)) var = 0.0; } else if(length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, unless(length  >  1  ||  length  >  2)  {  if(test(values,  weights,  begin,  length))  var  =  0.0;  }  else  if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1 && length > 2) { if(test(values, weights, begin, length)) var = 0.0; } else if(length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,                                test(values,                begin,                length);                clear();        clear();    clear();  var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  begin(length))  {  if(test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))  return  0.0;  }  ,if(test(values, weights, begin, length)|| test(values, weights, begin, length)) return 0.0; {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  -  1  :  Double.NaN;  double  n  =(values!=  null)?  Double.NaN  :  0;  ,double n =(values == null)? Double.NaN - 1 : Double.NaN; double v =(values!= null)? Double.NaN : 0;
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  0.0;  }  if(test(values,  begin,  length)&&  test(values,  weights,  begin,  length))  {  var  =  0.0;  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weighs,  begin,  length))  {  return  0;  }  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, begin, length)) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weighs,  begin,  length))  {  return  0;  }  ,if(test(values, begin, length)) { var = 0.0; if(test(values, begin, length)) { return 0; }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  2)  {  if(length  >  0)  {  return  n;  }  ,if(test(values, weights, begin, length)&& length > 2) { if(length > 0) { return length; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, }  else  if(length  >  1)  {  System.arraycopy(values,  0,  var,  begin,  length);  }  ,if(length > 1) { System.arraycopy(values, 0, var, begin, length); }
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, double  incMoment  =  evaluate(values,  weights,  begin,  length  -  1);  ,double m = evaluate(values, weights, begin, length - 1);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  if(length  ==  1)  {  return  0.0;  }  ,if(test(values, begin, length)&& length < 1) { if(length == 1) { return 0.0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); clear(); double e = mean.evaluate(values, weights, begin, length); double x = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  x  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); clear(); double e = mean.evaluate(values, weights, begin, length); double x = mean.evaluate(values, weights, begin, length); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)/  2;  double  n  =  mean.evaluate(values,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); double n = mean.evaluate(values, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(length  }  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(weights, begin, length)) { clear(); if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(length  }  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(test(values, weights,begin, length)) { clear(); if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(length  }  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length > 1) { clear(); if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)&& length > 1) { var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  >  1  &&  length  >  2)  }  ,double n =(values == null)? Double.NaN * Double.POSITIVE_INFINITY : Double.POSITIVE_INFINITY;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(length  >  1  &&  length  >  2)  }  ,boolean incMoment = isBiasCorrected();
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, else  if(length  >  1  &&  length  >  2)  }  ,double n = evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, var  =  assess(values,  m,  begin,  length)||  length  >  2;  ,double w = evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, var  =  assess(values,  m,  begin,  length)||  length  >  2;  ,double y = evaluate(values, weights, begin, length)- 1;
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, var  =  assess(values,  m,  begin,  length)||  length  >  2;  ,double v = evaluate(values, weights, begin, length)- 1;
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, figured  else  if(length  >  0.0  ||  length  >  2)  {  ,var = evaluate(values, weights, begin, length); if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  t  =  evaluate(values,  variables,  begin,  length);  ,double t = evaluate(values, m, begin, length);
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)/  2;  Double  d  =  mean.evaluate(values,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); Double d = mean.evaluate(values, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); } if(test(values, begin, length)) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(length  ==  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length == 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, double  j  =  weights.evaluate(values,  weights,  begin,  length);  ,if(test(values, weights, begin, length)) { if(test(values, weights, begin, length)&& test(weights, begin, length)) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, m  =  evaluate(values,  beginning,  length);  var  =  evaluate(values,  d,  begin,  length);  ,var = evaluate(values, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                                double                weight                =                mean.evaluate(values,                weights,                begin,                length);                double        y        =        mean.evaluate(values,        begin,        length);        double    j    =    mean.evaluate(values,    weights,    begin,    length);    double  c  =  mean.evaluate(values,  begin,  length);  var = evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] AssertionError testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length)&&  length  >  1)return  0.0;  ,double m = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)&& length > 1)return 0.0;
increase failing tests,319,replace, [FE] MathIllegalArgumentException testWeightedVariance, double  var  =  evaluate(values,  weights,  begin,  length,  0);  ,double v = evaluate(values, weights, begin, length, 0);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, double  var  =  Math.sqrt(variable,  methods.evaluate(values,  begin,  length));  ,if(incMoment) { moment.evaluate(values, begin, length); if(weights == null) { moment.evaluate(values, 0, values.length); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                                double                weight                =                mean.evaluate(values,                weights,                begin,                length);                double        y        =        mean.evaluate(values,        begin,        length);        double    c    =    mean.evaluate(values,    weights,    begin,    length);    double  g  =  mean.evaluate(values,  weights,  begin,  length);  var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  begin,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length); var = evaluate(values, 0, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  begin,  begin,  length);  var  =  evaluate(values,  0,  begin,  length);  ,var = evaluate(values, weights, begin, length); var = evaluate(values, 0, begin, length); var = evaluate(values, begin, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  d  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,double d = mean.evaluate(values, weights, begin, length); double v = mean.evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, [Delete]  else  if(length  >  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  var  =  evaluate(values,  weights,  begin,  length));  }  ,} else if(length > 1) {
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, double[]  m  =  mean.evaluate(values,  weights,  begin,  length)-  1;  ,if(test(values, weights, begin, length)) { if(length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  s  =  mean.evaluate(values,  weights,  begin,  length);  double  j  =  mean.evaluate(values,  weights,  begin,  length);  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double j = mean.evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        double    e    =    mean.evaluate(values,    weights,    begin,    length);    double  s  =  mean.evaluate(values,  weights,  begin,  length);  double  j  =  mean.evaluate(values,  weights,  begin,  length);  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); double j = mean.evaluate(values, weights, begin, length); }
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  0.0;  }  else  {  return  0;  }  double  m  =  assess(values,  weights,  begin,  length);  }  ,clear(); var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(length  >  1)  {  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); if(length > 0) { throw new IllegalArgumentException(" "); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  0,  begin,  length);  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); } if(test(values, weights, begin, length)) { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length))  provoking  throw  new  IllegalArgumentException( "   ");  }  ,if(test(values, begin, length)|| length < 1) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  begin,  length)&&  length  <  1)  {  if(test(values,  weights,  begin,  length))  provoking  throw  new  IllegalArgumentException( "   ");  }  ,if(test(values, begin, length)|| length < 1) { if(test(weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =(values  ==  null)?  Double.NaN  :  Double.NaN;  ,double y =(values == null)? Double.NaN : Double.NaN;
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, double  m  =(values  ==  null)?  Double.NaN  :  Double.NaN;  ,double e =(values == null)? Double.NaN : Double.NaN;
increase failing tests,325,replace, [FE] IllegalArgumentException testWeightedVariance, if(incMoment)  {  if(values.length!=  0)  {  moment  =  null;  }  ,if(test(values, weights, begin, length)&& length > 0) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  *  2  ==  1)  {  ,if(length * 2!= 1) {
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, Mean  mean  =  new  Mean(0.0,  0.0,  values,  begin,  incMoment);  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, Mean  mean  =  new  Mean(0.0,  0.0,  values,  begin,  incMoment);  ,if(test(values, weights, begin, length)) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, Mean  mean  =  new  Mean(0.0,  0.0,  values,  begin,  incMoment);  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, boolean  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.naN;  ,if(test(values, begin, length)) { clear(); if(test(values, weights, begin, length)) { return 0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, boolean  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.naN;  ,if(test(values, begin, length)) { clear(); if(test(weights, begin, length)) { return 0; }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  d  =  mean.evaluate(values,  weights,  begin,  length);  clear();  double  x  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,if(m > 0) { double y = mean.evaluate(values, weights, begin, length); clear(); double d = mean.evaluate(values, weights, begin, length); clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  d  =  mean.evaluate(values,  weights,  begin,  length);  clear();  double  x  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); clear(); double d = mean.evaluate(values, weights, begin, length); clear(); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  d  =  mean.evaluate(values,  weights,  begin,  length);  clear();  double  x  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,if(length > 1) { double y = mean.evaluate(values, weights, begin, length); clear(); double d = mean.evaluate(values, weights, begin, length); clear(); } else { var = evaluate(values, weights, m, begin, length); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  test(values,  weights,  begin,  length)||  test(values,  weights,  begin,  length))sadly  return  0;  ,if(test(values, weights, begin, length)|| test(values, weights, begin, length)) return 0;
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)/  2;  double  d  =  mean.evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); double d = mean.evaluate(values, weights, begin, length);
increase failing tests,324,replace, [FE] StackOverflowError testWeightedVariance, double  v  =  Double.MIN_VALUE;  double  y  =  evaluate(values,  begin,  length);  ,double m = Double.MIN_VALUE; double y = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, return  evaluate(values,  weights,  begin,  length)  &&  var  ==  0);  ,var = evaluate(values, weights, begin, length); if(length > 1) { var = 0.0; }
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, ensureValue(weights,  begin,  length),  incMoment);  ,if(length > 2) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { clear(); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  If(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  ,if(length > 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  If(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  ,if(length > 0) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  If(test(values,  weights,  begin,  length))  {  var  =  0.0;  if(test(values,  weights,  begin,  length))  {  clear();  ,if(length > 1 || length > 2) {
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,evaluate(values,  begin,  length);  var = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(test(values,  begin,  length))  {  return  0;  }  ,clear(); if(test(values, begin, length)) { return 0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); } else { var = evaluate(values, weights, 0, begin, length); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  var  =  evaluate(values,  weights,  0,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); }
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  0)  {  return  var,  values.values;  }  ,return evaluate(values, weights, begin, length)/ 2;
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  0)  {  return  var,  values.values;  }  ,return evaluate(values, weights, begin, length)/ 2 - 1;
increase failing tests,328,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  0)  {  return  var,  values.values;  }  ,return evaluate(values, weights, begin, length)/ 2 + 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  mean.evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  var  =  0.0;  if(test(values,  weights,  begin,  length))  }  return  0;  }  ,double y = mean.evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) var = 0.0; if(test(values, weights, begin, length)) var = 0;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  double  y  =  mean.evaluate(values,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  g  =  mean.evaluate(values,  weights,  begin,  length);  }  ,double g = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  double  y  =  mean.evaluate(values,  begin,  length);  double  e  =  mean.evaluate(values,  weights,  begin,  length);  g  =  mean.evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { double g = mean.evaluate(values, weights, begin, length); double e = mean.evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  begin,  length))  {  clear();  if(length  ==  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(test(values, weights, begin, length)) { clear(); if(length > 0) { var = evaluate(values, weights, begin, length); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  2)  {  return  var;  }  ,var = evaluate(values, weights, begin, length); if(length > 2) { return var; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  begin,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  0,  begin,  length);  var  =  evaluate(values,  weights,  0,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, begin, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  meant.evaluate(values,  m,  begin,  length);  ,double v =(values == null)? Double.NaN : Double.NaN + 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  meant.evaluate(values,  m,  begin,  length);  ,double y =(values == null)? Double.NaN : Double.NaN + 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, double  y  =  meant.evaluate(values,  m,  begin,  length);  ,double val =(values == null)? Double.NaN : Double.NaN + 1;
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, value  =  mean.evaluate(values,  weights,  begin,  length)-  1;  ,var = mean.evaluate(values, weights, begin, length)- 1;
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,double  val  =(values  ==  null)?  Double.NaN  :  Double.NaN;  double n = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length == 1) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(length  >  1)  {  clear();  if(test(values,  weights,  begin,  length))  {  clear();  }  else  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  }  ,if(length == 2) { clear(); if(test(values, weights, begin, length)) { clear(); } else { var = evaluate(values, weights, var, begin, length); var = evaluate(values, weights, var, begin, length); }
increase failing tests,324,add, [FE] StackOverflowError testWeightedVariance, ,                                double                weight                =                mean.evaluate(values,                weights,                begin,                length);                double        j        =        mean.evaluate(values,        weights,        begin,        length);        double    w    =    mean.evaluate(values,    weights,    begin,    length);    double  y  =  mean.evaluate(values,  weights,  begin,  length);  var = evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(test(values,  weights,  begin,  length))  {  return  0.0;  }  clear();  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) { return 0.0; } clear();
increase failing tests,325,replace, [FE] ArrayStoreException testWeightedVariance, System.arraycopy(values,  m,  0,  var,  begin  +  length,  1);  ,System.arraycopy(values, 0, var, begin + length, 1);
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, Mean  mean  =  new  Mean(0.0,  0.0,  isBiasCorrected,  values,  begin,  length);  ,if(test(values, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, Mean  mean  =  new  Mean(0.0,  0.0,  isBiasCorrected,  values,  begin,  length);  ,if(test(values, weights, begin, length)) { var = 0.0; if(test(values, weights, begin, length)) { var = 0.0; }
increase failing tests,324,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, double  w  =  mean.evaluate(values,  weights,  begin,  length);  clear();  Double  m  =  mean.evaluate(values,  weights,  begin,  length);  ,double w = mean.evaluate(values, weights, begin, length + 1); clear(); Double m = mean.evaluate(values, weights, begin, length);
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(m  >  length)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  >  2)  {  clear();  }  ,if(length > 2) { var = evaluate(values, weights, begin, length); if(length > 2) { clear(); }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  0)  {  if(test(values,  weights,  begin,  length)&&  length  <=  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, weights, begin, length)&& length > 2) { if(test(values, weights, begin, length)&& length!= 0) { throw new IllegalArgumentException(""); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length);  Double  h  =  mean.evaluate(values,  weights,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); Double h = mean.evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance, var  =  evaluate(values,  weights,  begin,  length);  if(var  ==  null  ||  length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(values == null || length > 1) { var = evaluate(values, weights, begin, length); }
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  0.0;  }  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(begin == length) {
increase failing tests,318,replace, [FE] AssertionError testWeightedVariance, if(test(values,  weights,  begin,  length)&&  length  >  1)  {  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  0.0;  }  if(test(values,  weights,  begin,  length)&&  length  >  0)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length == 2) {
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(length  ==  1)  {  if(length  >  1)  {  ,if(begin == 0) {
increase failing tests,320,replace, [FE] StackOverflowError testWeightedVariance, if(length  <  1)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length  ==  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(length  >  2)  {  var  =  evaluate(values,  weights,  begin,  length);  if(length!=  2)  {  var  =  evaluate(values,  weights,  begin,  length);  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(length <= 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,324,replace, [FE] NumberIsTooLargeException testWeightedVariance, double  m  =  mean.evaluate(values,  begin,  length)/  2;  double  h  =  mean.evaluate(values,  begin,  length);  ,double m = mean.evaluate(values, begin, length + 1); double h = mean.evaluate(values, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  :  Double.NaN  +  2;  double  n  =  evaluate(values,  weights,  begin,  length);  ,double n =(values == null)? Double.NaN : Double.NaN + 2; double var = evaluate(values, weights, begin, length);
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  <  1)  {  if(test(values,  begin,  length))  }  var  =  0.0;  if(length  ==  1)  {  throw  new  IllegalArgumentException( "   ");  }  ,if(test(values, begin, length)) { var = 0.0; if(length > 1) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  ==  1)  {  if(test(values,  begin,  length)&&  length  <=  1)  {  throw  new  IllegalArgumentException( " ");  }  ,if(test(values, begin, length) || length == 1) { if(test(values, begin, length)&& length <= 1) { throw new IllegalArgumentException(" "); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  begin,  length)&&  length  >  2)  {  var  =  0.0;  }  if(test(values, weights, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,319,add, [FE] StackOverflowError testWeightedVariance, ,if(test(values,  begin,  length)&&  length  >  2)  {  var  =  0.0;  }  if(test(values, begin, length)&& length > 2) { var = evaluate(values, weights, begin, length); }
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, double  var  =(values  ==  null)?  Double.NaN  /  1  :  Double.NaN;  double  n  =  evaluate(values,  weights,  begin,  length);  ,double n =(values == null)? Double.NaN / 1 : Double.NaN; double var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    begin,    length);    if(test(values,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  }  if(test(values,  begin,  length))  {  var  =  0.0;  }  else  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); } else if(length > 1) { var = 0.0; }
increase failing tests,318,replace, [FE] IllegalArgumentException testWeightedVariance, if(length  >  1)  {  if(test(values,  weights,  begin,  length))  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 0) { if(test(values, weights, begin, length)) { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, var  =  assess(values,  m,  begin,  length),  length  >  2;  ,double w = evaluate(values, weights, begin, length + 1);
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, var  =  assess(values,  m,  begin,  length),  length  >  2;  ,double y = evaluate(values, weights, begin, length + 1);
increase failing tests,325,replace, [FE] ArrayIndexOutOfBoundsException testWeightedVariance, var  =  assess(values,  m,  begin,  length),  length  >  2;  ,double v = evaluate(values, weights, begin, length + 1);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, var  =  assess(values,  weights,  begin,  length;  if(length  >  0)  {  return  var;  }  ,var = evaluate(values, weights, begin, length); if(length > 1) { return var; }
increase failing tests,319,add, [FE] IllegalArgumentException testWeightedVariance, ,if(test(values,    weights,    begin,    length)&&    length    <=    1)    {    throw    new    IllegalArgumentException(   "   ");    }    if(test(values,  weights,  begin,  length)&&  length  <=  2)  {  throw  new  IllegalArgumentException( " ");  }  if(test(values, weights, begin, length)&& length!= 2) { throw new IllegalArgumentException(""); }
increase failing tests,320,replace, [FE] AssertionError testWeightedVariance, if(test(values,  begin,  length)&&  length  <=  2)  {  if(test(values,  begin,  length)&&  length  <=  2)  {  ,if(test(values, begin, length)&& length!= 2) {
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, Possibly  else  if(length  ==  2)  {  ,if(length == 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] StackOverflowError testWeightedVariance, Possibly  else  if(length  ==  2)  {  ,if(length > 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, Possibly  else  if(length  ==  2)  {  ,if(length <= 1) { var = evaluate(values, weights, begin, length); if(test(values, weights, begin, length)) throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  begin,  length);  ,var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length);
increase failing tests,316,replace, [FE] StackOverflowError testWeightedVariance, Double  var  =  determine(values,  weights,  begin,  length);  ,Double var = evaluate(values, weights, begin, length);
increase failing tests,319,replace, [FE] StackOverflowError testWeightedVariance, m  =  method.evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  var,  begin,  length);  ,var = evaluate(values, weights, begin, length); var = evaluate(values, weights, var, begin, length);
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    begin,    length);    var  =  evaluate(values,  begin,  length);  if(length  >  1)  {  var  =  evaluate(values,  weights,  begin,  length);  var  =  evaluate(values,  weights,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 0) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); var = evaluate(values, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, double  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  incMoment  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { var = 0.0; }
increase failing tests,318,replace, [FE] StackOverflowError testWeightedVariance, double  isBiasCorrected  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  incMoment  =  isBiasCorrected?  Double.NaN  :  Double.NaN;  ,if(values.length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, begin, length); if(test(values, begin, length)) { var = 0.0; }
increase failing tests,322,replace, [FE] AssertionError testWeightedVariance,                 var        =        evaluate(values,        weights,        begin,        length);        var    =    evaluate(values,    weights,    0,    begin,    length);    var  =  evaluate(values,  weights,  0,  begin,  length);  if(test(values,  begin,  length))  {  double  m  =  mean.evaluate(values,  begin,  length);  var  =  evaluate(values,  m,  begin,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  ,if(length > 1) { var = evaluate(values, weights, begin, length); var = evaluate(values, weights, 0, begin, length); var = evaluate(values, weights, 0, begin, length); } else { throw new IllegalArgumentException(""); }
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance,                 double        y        =        mean.evaluate(values,        weights,        begin,        length);        clear();    double  e  =  mean.evaluate(values,  weights,  begin,  length);  double  m  =  mean.evaluate(values,  weights,  begin,  length);  clear();  ,double e = mean.evaluate(values, weights, begin, length); double y = m = mean.evaluate(values, weights, begin, length);
increase failing tests,325,replace, [FE] AssertionError testWeightedVariance, else  if(test(values,  weights,  begin,  length))  {  var  =  evaluate(values,  weights,  begin,  length);  slated  else  if  var  =  evaluate(values,  weights,  begin,  length);  >>  ,double e = evaluate(values, begin, length); double y = evaluate(values, begin, length);
