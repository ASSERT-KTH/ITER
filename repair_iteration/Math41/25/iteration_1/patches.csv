bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  var  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
4	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
6	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts);  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
8	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
10	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  /  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	      	compilable	  [FE]  AssertionError  	6	3	replace
12	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  dev;  }	      	compilable	  [FE]  AssertionError  	6	3	replace
13	[BUG]  [BUGGY]  if(isBiasCorrected)  {  incMoment  =  isBiasCorrected  ||  isBiasCorrected;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  incMoment  =  isBiasCorrected  ||  isBiasCorrected;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  incMoment  =  isBiasCorrected  ||  isBiasCorrected;  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	      	compilable	  [FE]  AssertionError  	6	3	replace
15	[BUG]  [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  for(int  i  =  begin;  i  <  begin  +  length;  i++)  {  sumWts  +=  weights[i]  *  mean;  }	      	compilable	  [FE]  AssertionError  	6	3	replace
16	[BUG]  [BUGGY]  if(isBiasCorrected)  {  incMoment  =  isBiasCorrected;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  incMoment  =  isBiasCorrected;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  incMoment  =  isBiasCorrected;  }	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  if(incMoment)  {  if(incMoment)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    if(incMoment)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if(incMoment)  {  If(incMoment)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  If(incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    If(incMoment)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
19	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/(sumWts  -  1.0);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/(sumWts  -  1.0);  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))/(sumWts  -  1.0);	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  10.0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  10.0;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  10.0;	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	9	1	add
24	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	  [FE]  AssertionError  	9	1	add
25	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    If(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	non-compiled	[CE]  ';'  expected	9	None	add
26	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))  /  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  accum1	9	None	add
27	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  1.0;  }  [CE]  cannot  find  symbol  totalWts  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  totalWts))  /  1.0;  }	  	non-compiled	[CE]  cannot  find  symbol  totalWts	9	None	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  ||  isBiasCorrected)  {	  if(incMoment)    {    	compilable	  [FE]  AssertionError  	2	1	replace
29	[BUG]  [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  isBiasCorrected)  {	  if(incMoment)    {    	compilable	  [FE]  AssertionError  	2	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment  &&  isBiasCorrected)  {	  if(incMoment)    {    	compilable	  [FE]  AssertionError  	2	1	replace
31	[BUG]  [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment  &&  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  &&  isBiasCorrected)  {	  if(incMoment)    {    	compilable	  [FE]  AssertionError  	2	1	replace
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	1	replace
33	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	1	replace
35	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	1	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	3	replace
37	[BUG]  [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	3	replace
38	[BUG]  [BUGGY]  accum2  +=  weights[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  +=  weights[i]  *  sumWts;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  weights[i]  *  sumWts;	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  if(incMoment)  {  var  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  var  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  if(!incMoment)  {  if(!incMoment)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  if(!incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    if(!incMoment)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
42	[BUG]  [BUGGY]  if(!incMoment)  {  If(!incMoment)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  If(!incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    If(!incMoment)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
43	[BUG]  [BUGGY]  if(!incMoment)  {  incMoment)  {  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    incMoment)  {	  	non-compiled	[CE]  not  a  statement	3	None	add
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	19	1	replace
45	[BUG]  [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  &&  incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  &&  incMoment)  {	  if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	19	1	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment  ||  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	19	1	replace
47	[BUG]  [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment  ||  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  ||  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	19	1	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	19	1	replace
49	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment  &&  isBiasCorrected)  {	  if(isBiasCorrected    ||    incMoment)    {    	compilable	  [FE]  AssertionError  	19	1	replace
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!incMoment  &&  isBiasCorrected)  {	  if(isBiasCorrected    &&    isMoment)    {    	compilable	  [FE]  AssertionError  	5	3	replace
51	[BUG]  [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment  &&  isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment  &&  isBiasCorrected)  {	  if(isBiasCorrected    &&    isMoment)    {    	compilable	  [FE]  AssertionError  	5	3	replace
52	[BUG]  [BUGGY]  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev;	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
54	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  if(isBiasCorrected  ||  incMoment)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  if(isBiasCorrected  ||  incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment)    {    if(isBiasCorrected  ||  incMoment)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
56	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  If(isBiasCorrected  ||  incMoment)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  If(isBiasCorrected  ||  incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment)    {    If(isBiasCorrected  ||  incMoment)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
57	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment)    {    AssertionError  accum2  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
58	[BUG]  [BUGGY]  if(isBiasCorrected)  {  accum2  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  accum2  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  accum2  *=  weights[i]  *  (dev  *  dev);  accum2  *=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev;  this.accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i]  *  dev;  this.accum2  *=  weights[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev;  this.accum2  *=  weights[i]  *  dev;	      if(isBiasCorrected)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  accum2  *=  weights[i];  accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i];  accum2  *=  weights[i];  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];  accum2  *=  weights[i];	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
61	[BUG]  [BUGGY]  incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  not  a  statement	12	None	replace
62	[BUG]  [BUGGY]  accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i];  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	20	1	replace
64	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	20	1	replace
65	[BUG]  [BUGGY]  accum  -=  accum2  *  accum2  /  sumWts;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum  -=  accum2  *  accum2  /  sumWts;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  -=  accum2  *  accum2  /  sumWts;	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
66	[BUG]  [BUGGY]  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
67	[BUG]  [BUGGY]  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)  {  if(sumWts  >  1.0)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
68	[BUG]  [BUGGY]  int  accum2  =  values[i]  /  mean;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  int  accum2  =  values[i]  /  mean;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  /  mean;	      int    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
69	[BUG]  [BUGGY]  int  accum2  =  values[i]  -  dev;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  int  accum2  =  values[i]  -  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  -  dev;	      int    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  int  accum2  =  weights[i]  -  mean;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  int  accum2  =  weights[i]  -  mean;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  -  mean;	      int    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  accum2  +=  weights[i]  *  (dev  *  dev);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  +=  weights[i]  *  (dev  *  dev);  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  weights[i]  *  (dev  *  dev);	      accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  double  accum2  =  values[i]  /  mean;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  double  accum2  =  values[i]  /  mean;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  /  mean;	      double    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
73	[BUG]  [BUGGY]  double  accum2  =  values[i]  -  dev;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  double  accum2  =  values[i]  -  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  -  dev;	      double    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  double  accum2  =  weights[i]  -  mean;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  double  accum2  =  weights[i]  -  mean;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  -  mean;	      double    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  double  accum2  =  values[i]  *  mean;  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  double  accum2  =  values[i]  *  mean;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  values[i]  *  mean;	      double    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(!isBiasCorrected)  {	  if(!incMoment)    {    	compilable	  [FE]  AssertionError  	4	3	replace
77	[BUG]  [BUGGY]  if(!isBiasCorrected)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!isBiasCorrected)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!isBiasCorrected)  {	  if(!incMoment)    {    	compilable	  [FE]  AssertionError  	4	3	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected  ||!incMoment)  {	  if(!incMoment)    {    	compilable	  [FE]  AssertionError  	4	1	replace
79	[BUG]  [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||!incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||!incMoment)  {	  if(!incMoment)    {    	compilable	  [FE]  AssertionError  	4	1	replace
80	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [CE]  cannot  find  symbol  accum1  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum1  *  accum2  /  sumWts))/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  cannot  find  symbol  accum1	23	None	replace
81	[BUG]  [BUGGY]  int  accum2  =  values[i]  -  begin;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  int  accum2  =  values[i]  -  begin;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  values[i]  -  begin;	      int    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
82	[BUG]  [BUGGY]  int  accum2  =  weights[i]  -  begin;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  int  accum2  =  weights[i]  -  begin;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  -  begin;	      int    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	20	1	replace
84	[BUG]  [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(sumWts  >  1)  {  if(isBiasCorrected)  {  accum  -=  accum2  *  accum2  /  sumWts;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	compilable	  [FE]  AssertionError  	20	1	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	1	replace
86	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  2.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	compilable	  [FE]  AssertionError  	22	1	replace
87	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
89	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
90	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
91	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
93	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  2.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	compilable	  [FE]  AssertionError  	21	1	replace
94	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  accum  -  (accum2  *  accum2  /  sumWts)/  1.0;  }  else  {  var  =  accum  -  (accum2  *  accum2  /	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	21	None	replace
95	[BUG]  [BUGGY]  double  accum2  =  weights[i]  /  mean;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  double  accum2  =  weights[i]  /  mean;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	double  accum2  =  weights[i]  /  mean;	      double    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  if(isBiasCorrected)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  var  =  1.0  /  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
97	[BUG]  [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
98	[BUG]  [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
99	[BUG]  [BUGGY]  if(isBiasCorrected)  {  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  accum2  *=  weights[0];  accum2  *=  weights[0]  *  dev;  }	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  accum2  +=  values[i]  *  dev;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  +=  values[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  +=  values[i]  *  dev;	      accum2    +=    weights[i]    *    dev;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
101	[BUG]  [BUGGY]  timeout  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	timeout	9	1	add
102	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  timeout  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    while(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }	  	compilable	timeout	9	1	add
103	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  incMoment  =  isBiasCorrected?  isBiasCorrected  :  isBiasCorrected;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected?  isBiasCorrected  :  isBiasCorrected;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  incMoment  =  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  incMoment  =  isBiasCorrected;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	incMoment  =  isBiasCorrected;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!isBiasCorrected)  {  continue;  }  [CE]  continue  outside  of  loop  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  if(!isBiasCorrected)  {  continue;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  if(!isBiasCorrected)  {  continue;  }	      	non-compiled	[CE]  continue  outside  of  loop	6	None	replace
106	[BUG]  [BUGGY]  if(incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    AssertionError  accum2  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
107	[BUG]  [BUGGY]  if(incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
108	[BUG]  [BUGGY]  if(incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  *  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
109	[BUG]  [BUGGY]  if(incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  -  mean  :  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
110	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;	      if(isBiasCorrected)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  DEV;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  DEV;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  DEV;	      if(isBiasCorrected)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  accum2  *=  weights[i];  accum2  *=  weights[i];  }	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
114	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  incMoment  =  isBiasCorrected  ||  incMoment;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  incMoment  =  isBiasCorrected  ||  incMoment;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment)    {    incMoment  =  isBiasCorrected  ||  incMoment;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
115	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  AssertionError  accum  =  values[i]  -  mean;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment)  {  AssertionError  accum  =  values[i]  -  mean;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected    ||    incMoment)    {    AssertionError  accum  =  values[i]  -  mean;	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
116	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0);  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0);  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0);  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0);    }    	non-compiled	[CE]  ';'  expected	22	None	replace
117	[BUG]  [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    dev;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
118	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
119	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum  -=  1.0;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum  -=  1.0;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  accum  -=  1.0;	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    accum    -=    accum2    *    accum2    /    sumWts;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
120	[BUG]  [BUGGY]  accum2  *=  weights[i];  this.accum2  *=  weights[i];  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i];  this.accum2  *=  weights[i];  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];  this.accum2  *=  weights[i];	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
121	[BUG]  [BUGGY]  accum2  *=  weights[i];  incMoment  =  isBiasCorrected;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i];  incMoment  =  isBiasCorrected;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];  incMoment  =  isBiasCorrected;	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i];    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))    /    1.0;    }    	compilable	  [FE]  AssertionError  	23	1	replace
123	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum  *  accum2  /  sumWts))/  1.0;  }	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum    *    accum2    /    sumWts))    /    1.0;    }    	compilable	  [FE]  AssertionError  	23	1	replace
124	[BUG]  [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)  {  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  else  {  var  =  (accum  -  (accum2  *  accum2  /	      if(sumWts    >    1.0)    {    if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    else    {    var    =    (accum    -    (accum2    *    accum2    /    	non-compiled	[CE]  ')'  expected	21	None	replace
125	[BUG]  [BUGGY]  int  accum2  =  weights[i]  -  dev;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  int  accum2  =  weights[i]  -  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	int  accum2  =  weights[i]  -  dev;	      int    accum2    =    values[i]    -    mean;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
126	[BUG]  [BUGGY]  if(incMoment)  {  incMoment)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment)  {  incMoment)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment)    {    incMoment)  {	  	non-compiled	[CE]  not  a  statement	1	None	add
127	[BUG]  [BUGGY]  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum2  *=  weights[i];  accum2  *=  weights[i]  *  dev;  }	      if(isBiasCorrected)    {    accum2    *=    weights[i];    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
128	[BUG]  [BUGGY]  accum1  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum1  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum1  *=  weights[i]  *  dev;  accum2  *=  weights[i]  *  dev;	      if(isBiasCorrected)    {    accum2    *=    weights[i]    *    dev;    accum2    *=    weights[i]    *    dev;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
129	[BUG]  [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	accum  =  1.0  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  sumWts;  }	      if(isBiasCorrected)    {    var    =    1.0    -    mean;    accum    +=    weights[i]    *    (dev    *    dev);    accum2    +=    weights[i]    *    sumWts;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
130	[BUG]  [BUGGY]  if(isBiasCorrected  ||  incMoment  ||  dev  >  values[i])  {  [CE]  cannot  find  symbol  i  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected  ||  incMoment  ||  dev  >  values[i])  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected  ||  incMoment  ||  dev  >  values[i])  {	  if(isBiasCorrected    ||    incMoment)    {    	non-compiled	[CE]  cannot  find  symbol  i	19	None	replace
131	[BUG]  [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [CE]  'else'  without  'if'  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	else  if(incMoment)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))/  1.0;  }	      if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
132	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length);  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum  =  isBiasCorrected.evaluate(values,  begin,  length);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
133	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  null;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum  =  isBiasCorrected?  values[i]  :  null;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum  =  isBiasCorrected?  values[i]  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
134	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  null;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  null;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum2  =  isBiasCorrected?  values[i]  :  null;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
135	[BUG]  [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  mean;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(!incMoment)  {  AssertionError  accum2  =  isBiasCorrected?  values[i]  :  mean;  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(!incMoment)    {    AssertionError  accum2  =  isBiasCorrected?  values[i]  :  mean;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
136	[BUG]  [BUGGY]  if(incMoment  &&  sumWts)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(incMoment  &&  sumWts)  {  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(incMoment  &&  sumWts)  {	  if(isBiasCorrected    &&    isMoment)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }	      	compilable	  [FE]  AssertionError  	6	1	replace
138	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalArgumentException( " ");  }	      	compilable	  [FE]  AssertionError  	6	1	replace
139	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  return  null;  }  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  return  null;  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  if(!incMoment)  {  return  null;  }	      	non-compiled	[CE]  incompatible  types	6	None	replace
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	add	if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }	      	compilable	  [FE]  AssertionError  	6	1	replace
141	[BUG]  [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]                  AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]  if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	if(isBiasCorrected)  {  if(!incMoment)  {  throw  new  IllegalStateException( " ");  }	      	compilable	  [FE]  AssertionError  	6	1	replace
142	[BUG]  [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0);  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    dev  =  values[i]  -  mean;  accum  +=  weights[i]  *  (dev  *  dev);  accum2  +=  weights[i]  *  dev;  }  double  sumWts  =  0;  for  (int  i  =  0;  i  <  weights.length;  i++)  {  sumWts  +=  weights[i];  }    [BUGGY]      if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0;  }  if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0);  }  [BUGGY]    if  (isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  (sumWts  -  1.0);  }  else  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  sumWts;  }  }  }  return  var;  }  [CLASS]  Variance  [METHOD]  evaluate  [RETURN_TYPE]  double  final  double[]  values  final  double[]  weights  final  double  mean  final  int  begin  final  int  length  [VARIABLES]  boolean  incMoment  isBiasCorrected  double[]  values  weights  long  serialVersionUID  SecondMoment  m2  moment  double  accum  accum2  dev  mean  sumWts  var  int  begin  i  length  	projects/Math41/src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java	0.5773502691896258	524	524	1	replace	        if(isBiasCorrected)    {    var    =    (accum    -    (accum2    *    accum2    /    sumWts))    /    1.0;    }    if(isBiasCorrected)  {  var  =  (accum  -  (accum2  *  accum2  /  sumWts))  /  1.0);  }	  	non-compiled	[CE]  ';'  expected	9	None	add
