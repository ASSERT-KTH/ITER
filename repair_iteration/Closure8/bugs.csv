bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Node assign = n.getFirstChild(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { [BUGGY] Node assign = n.getFirstChild(); [BUGGY] Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	228	228	1	replace	
2	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { [BUGGY] [BUGGY] Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	228	228	1	add	
3	[BUG] [BUGGY] Node lhs = assign.getFirstChild(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); [BUGGY] Node lhs = assign.getFirstChild(); [BUGGY] Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	229	229	1	replace	
4	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); [BUGGY] [BUGGY] Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	229	229	1	add	
5	[BUG] [BUGGY] Preconditions.checkState(lhs.isName()); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); [BUGGY] Preconditions.checkState(lhs.isName()); [BUGGY] Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	replace	
6	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); [BUGGY] [BUGGY] Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	230	230	1	add	
7	[BUG] [BUGGY] Node rhs = assign.getLastChild(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); [BUGGY] Node rhs = assign.getLastChild(); [BUGGY] lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	231	231	1	replace	
8	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); [BUGGY] [BUGGY] Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	231	231	1	add	
9	[BUG] [BUGGY] lhs.addChildToBack(rhs.detachFromParent()); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); [BUGGY] lhs.addChildToBack(rhs.detachFromParent()); [BUGGY] var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	replace	
10	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); [BUGGY] [BUGGY] lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	232	232	1	add	
11	[BUG] [BUGGY] var.addChildToBack(lhs.detachFromParent()); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); [BUGGY] var.addChildToBack(lhs.detachFromParent()); [BUGGY] redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	233	233	1	replace	
12	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); [BUGGY] [BUGGY] var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	233	233	1	add	
13	[BUG] [BUGGY] redeclaration = true; [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); [BUGGY] redeclaration = true; [BUGGY] } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	234	234	1	replace	
14	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); [BUGGY] [BUGGY] redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	234	234	1	add	
15	[BUG] [BUGGY] JSDocInfo info = new JSDocInfo(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } if (redeclaration) { [BUGGY] JSDocInfo info = new JSDocInfo(); [BUGGY] info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	240	240	1	replace	
16	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } if (redeclaration) { [BUGGY] [BUGGY] JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	240	240	1	add	
17	[BUG] [BUGGY] info.addSuppression("duplicate"); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); [BUGGY] info.addSuppression("duplicate"); [BUGGY] var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	241	241	1	replace	
18	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); [BUGGY] [BUGGY] info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	241	241	1	add	
19	[BUG] [BUGGY] var.setJSDocInfo(info); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); [BUGGY] var.setJSDocInfo(info); [BUGGY] } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	242	242	1	replace	
20	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); [BUGGY] [BUGGY] var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.7071067811865475	242	242	1	add	
21	[BUG] [BUGGY] applyCollapses(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { [BUGGY] applyCollapses(); [BUGGY] compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	116	116	1	replace	
22	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { [BUGGY] [BUGGY] applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	116	116	1	add	
23	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); [BUGGY] compiler.reportCodeChange(); [BUGGY] } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	117	117	1	replace	
24	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); [BUGGY] [BUGGY] compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	117	117	1	add	
25	[BUG] [BUGGY] for (Collapse collapse : collapses) { [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { [BUGGY] for (Collapse collapse : collapses) { [BUGGY]  Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	210	210	1	replace	
26	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { [BUGGY] [BUGGY] for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	210	210	1	add	
27	[BUG] [BUGGY] Node var = new Node(Token.VAR); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { [BUGGY] Node var = new Node(Token.VAR); [BUGGY] var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var);  [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	212	212	1	replace	
28	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { [BUGGY] [BUGGY] Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var);  [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	212	212	1	add	
29	[BUG] [BUGGY] var.copyInformationFrom(collapse.startNode); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); [BUGGY] var.copyInformationFrom(collapse.startNode); [BUGGY] collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	213	213	1	replace	
30	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); [BUGGY] [BUGGY] var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	213	213	1	add	
31	[BUG] [BUGGY] collapse.parent.addChildBefore(var, collapse.startNode); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); [BUGGY] collapse.parent.addChildBefore(var, collapse.startNode); [BUGGY]  boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	214	214	1	replace	
32	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); [BUGGY] [BUGGY] collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	214	214	1	add	
33	[BUG] [BUGGY] boolean redeclaration = false; [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); [BUGGY] boolean redeclaration = false; [BUGGY] for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	216	216	1	replace	
34	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); [BUGGY] [BUGGY] boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	216	216	1	add	
35	[BUG] [BUGGY] for (Node n = collapse.startNode; n != collapse.endNode;) { [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; [BUGGY] for (Node n = collapse.startNode; n != collapse.endNode;) { [BUGGY] Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	217	217	1	replace	
36	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; [BUGGY] [BUGGY] for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	217	217	1	add	
37	[BUG] [BUGGY] Node next = n.getNext(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { [BUGGY] Node next = n.getNext(); [BUGGY]  Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	218	218	1	replace	
38	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { [BUGGY] [BUGGY] Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	218	218	1	add	
39	[BUG] [BUGGY] Preconditions.checkState(var.getNext() == n); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); [BUGGY] Preconditions.checkState(var.getNext() == n); [BUGGY] collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	220	220	1	replace	
40	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); [BUGGY] [BUGGY] Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	220	220	1	add	
41	[BUG] [BUGGY] collapse.parent.removeChildAfter(var); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); [BUGGY] collapse.parent.removeChildAfter(var); [BUGGY]  if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	221	221	1	replace	
42	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); [BUGGY] [BUGGY] collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	221	221	1	add	
43	[BUG] [BUGGY] if (n.isVar()) { [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); [BUGGY] if (n.isVar()) { [BUGGY] while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	223	223	1	replace	
44	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); [BUGGY] [BUGGY] if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	223	223	1	add	
45	[BUG] [BUGGY] while(n.hasChildren()) { [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { [BUGGY] while(n.hasChildren()) { [BUGGY] var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	224	224	1	replace	
46	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { [BUGGY] [BUGGY] while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	224	224	1	add	
47	[BUG] [BUGGY] var.addChildToBack(n.removeFirstChild()); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { [BUGGY] var.addChildToBack(n.removeFirstChild()); [BUGGY] } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	225	225	1	replace	
48	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { [BUGGY] [BUGGY] var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	225	225	1	add	
49	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	236	236	1	replace	
50	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	236	236	1	add	
51	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; [BUGGY] } [BUGGY]  if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	237	237	1	replace	
52	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; [BUGGY] [BUGGY] } if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	237	237	1	add	
53	[BUG] [BUGGY] if (redeclaration) { [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } [BUGGY] if (redeclaration) { [BUGGY] JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	239	239	1	replace	
54	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next; } [BUGGY] [BUGGY] if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	239	239	1	add	
55	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] redeclaration = true; } n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } [BUGGY] } [BUGGY] } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	244	244	1	replace	
56	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] redeclaration = true; } n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression("duplicate"); var.setJSDocInfo(info); } [BUGGY] [BUGGY] } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] applyCollapses [RETURN_TYPE] void  [VARIABLES] Collapse collapse AbstractCompiler compiler Set blacklistedVars nodesToCollapse boolean redeclaration Node assign child endNode externs lhs n next parent rhs root startNode var varNode List collapses JSDocInfo info  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.5	244	244	1	add	
58	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private final Set<Node> nodesToCollapse = Sets.newHashSet(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses  [VARIABLES] 	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	103	103	1	replace	
59	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] private final Set<Node> nodesToCollapse = Sets.newHashSet(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses  [VARIABLES] 	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	103	103	1	add	
60	[BUG] [BUGGY] private final List<Collapse> collapses = Lists.newArrayList(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] [BUGGY] private final List<Collapse> collapses = Lists.newArrayList(); [BUGGY]  [CLASS] CollapseVariableDeclarations Collapse GatherCollapses  [VARIABLES] 	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	94	94	1	replace	
61	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] [BUGGY] [BUGGY] private final List<Collapse> collapses = Lists.newArrayList(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses  [VARIABLES] 	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	94	94	1	add	
62	[BUG] [BUGGY] private final Set<Node> nodesToCollapse = Sets.newHashSet(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] [BUGGY] private final Set<Node> nodesToCollapse = Sets.newHashSet(); [BUGGY]  [CLASS] CollapseVariableDeclarations Collapse GatherCollapses  [VARIABLES] 	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	101	101	1	replace	
63	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] [BUGGY] [BUGGY] private final Set<Node> nodesToCollapse = Sets.newHashSet(); [CLASS] CollapseVariableDeclarations Collapse GatherCollapses  [VARIABLES] 	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	101	101	1	add	
64	[BUG] [BUGGY] Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] CollapseVariableDeclarations(AbstractCompiler compiler) { [BUGGY] Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); [BUGGY] this.compiler = compiler; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode parent startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	104	104	1	replace	
65	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] CollapseVariableDeclarations(AbstractCompiler compiler) { [BUGGY] [BUGGY] Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); this.compiler = compiler; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode parent startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	104	104	1	add	
66	[BUG] [BUGGY] this.compiler = compiler; [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] CollapseVariableDeclarations(AbstractCompiler compiler) { Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); [BUGGY] this.compiler = compiler; [BUGGY] } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode parent startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	105	105	1	replace	
67	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] CollapseVariableDeclarations(AbstractCompiler compiler) { Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); [BUGGY] [BUGGY] this.compiler = compiler; } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode parent startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	105	105	1	add	
68	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] CollapseVariableDeclarations(AbstractCompiler compiler) { Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); this.compiler = compiler; [BUGGY] } [BUGGY]  [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode parent startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	106	106	1	replace	
69	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] CollapseVariableDeclarations(AbstractCompiler compiler) { Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); this.compiler = compiler; [BUGGY] [BUGGY] } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode parent startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	106	106	1	add	
70	[BUG] [BUGGY] collapses.clear(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { [BUGGY] collapses.clear(); [BUGGY] nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	110	110	1	replace	
71	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	110	110	1	add	
72	[BUG] [BUGGY] nodesToCollapse.clear(); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); [BUGGY] nodesToCollapse.clear(); [BUGGY]  NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	111	111	1	replace	
73	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); [BUGGY] [BUGGY] nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	111	111	1	add	
74	[BUG] [BUGGY] NodeTraversal.traverse(compiler, root, new GatherCollapses()); [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); [BUGGY] NodeTraversal.traverse(compiler, root, new GatherCollapses()); [BUGGY]  if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	113	113	1	replace	
75	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	113	113	1	add	
76	[BUG] [BUGGY] if (!collapses.isEmpty()) { [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); [BUGGY] if (!collapses.isEmpty()) { [BUGGY] applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	115	115	1	replace	
77	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); [BUGGY] [BUGGY] if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	115	115	1	add	
78	[BUG] [BUGGY] } [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } [BUGGY] } [BUGGY]  [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	119	119	1	replace	
79	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(a){var b=1;a=2;var c} Result: function f(a){var b=1 [CONTEXT] public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } [BUGGY] [BUGGY] } [CLASS] CollapseVariableDeclarations Collapse GatherCollapses [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler List collapses Set blacklistedVars nodesToCollapse boolean Node endNode externs parent root startNode  	projects/Closure8/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java	0.4082482904638631	119	119	1	add	
